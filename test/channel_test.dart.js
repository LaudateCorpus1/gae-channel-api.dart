// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $$ = {};
var $ = Isolate.$isolateProperties;
$$.HashMapImplementation = {"": ["_keys", "_values", "_loadLimit", "_numberOfEntries", "_numberOfDeleted"],
 "super": "Object",
 _probeForAdding$1: function(key) {
  if (key == null)
    throw $.$$throw($.CTC0);
  var t1 = $.get$hashCode(key);
  if (t1 !== (t1 | 0))
    return this._probeForAdding$1$bailout(1, key, t1);
  var hash = (t1 & this._keys.length - 1) >>> 0;
  for (var numberOfProbes = 1, insertionIndex = -1; true;) {
    t1 = this._keys;
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    var existingKey = t1[hash];
    if (existingKey == null) {
      if (insertionIndex < 0)
        return hash;
      return insertionIndex;
    } else if ($.eqB(existingKey, key))
      return hash;
    else if (insertionIndex < 0 && $.CTC12 === existingKey)
      insertionIndex = hash;
    var numberOfProbes0 = numberOfProbes + 1;
    hash = $.HashMapImplementation__nextProbe(hash, numberOfProbes, this._keys.length);
    numberOfProbes = numberOfProbes0;
  }
},
 _probeForAdding$1$bailout: function(state0, key, t1) {
  var hash = $.and(t1, this._keys.length - 1);
  for (var numberOfProbes = 1, insertionIndex = -1; true;) {
    t1 = this._keys;
    if (hash !== (hash | 0))
      throw $.iae(hash);
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    var existingKey = t1[hash];
    if (existingKey == null) {
      if (insertionIndex < 0)
        return hash;
      return insertionIndex;
    } else if ($.eqB(existingKey, key))
      return hash;
    else if (insertionIndex < 0 && $.CTC12 === existingKey)
      insertionIndex = hash;
    var numberOfProbes0 = numberOfProbes + 1;
    hash = $.HashMapImplementation__nextProbe(hash, numberOfProbes, this._keys.length);
    numberOfProbes = numberOfProbes0;
  }
},
 _probeForLookup$1: function(key) {
  if (key == null)
    throw $.$$throw($.CTC0);
  var hash = $.and($.get$hashCode(key), this._keys.length - 1);
  if (hash !== (hash | 0))
    return this._probeForLookup$1$bailout(1, key, hash);
  for (var numberOfProbes = 1; true;) {
    var t1 = this._keys;
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    var existingKey = t1[hash];
    if (existingKey == null)
      return -1;
    if ($.eqB(existingKey, key))
      return hash;
    var numberOfProbes0 = numberOfProbes + 1;
    hash = $.HashMapImplementation__nextProbe(hash, numberOfProbes, this._keys.length);
    numberOfProbes = numberOfProbes0;
  }
},
 _probeForLookup$1$bailout: function(state0, key, hash) {
  for (var numberOfProbes = 1; true;) {
    var t1 = this._keys;
    if (hash !== (hash | 0))
      throw $.iae(hash);
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    var existingKey = t1[hash];
    if (existingKey == null)
      return -1;
    if ($.eqB(existingKey, key))
      return hash;
    var numberOfProbes0 = numberOfProbes + 1;
    hash = $.HashMapImplementation__nextProbe(hash, numberOfProbes, this._keys.length);
    numberOfProbes = numberOfProbes0;
  }
},
 _ensureCapacity$0: function() {
  var newNumberOfEntries = this._numberOfEntries + 1;
  if ($.geB(newNumberOfEntries, this._loadLimit)) {
    this._grow$1(this._keys.length * 2);
    return;
  }
  var capacity = this._keys.length;
  var numberOfFreeOrDeleted = capacity - newNumberOfEntries;
  var t1 = this._numberOfDeleted;
  if (t1 > numberOfFreeOrDeleted - t1)
    this._grow$1(capacity);
},
 _grow$1: function(newCapacity) {
  var capacity = this._keys.length;
  this._loadLimit = $.tdiv(newCapacity * 3, 4);
  var oldKeys = this._keys;
  var oldValues = this._values;
  this._keys = $.ListImplementation_List(newCapacity);
  this._values = $.ListImplementation_List(newCapacity);
  for (var t1 = oldKeys.length, t2 = oldValues.length, i = 0; i < capacity; ++i) {
    if (i >= t1)
      throw $.ioore(i);
    var key = oldKeys[i];
    if (key == null || key === $.CTC12)
      continue;
    if (i >= t2)
      throw $.ioore(i);
    var value = oldValues[i];
    var newIndex = this._probeForAdding$1(key);
    var t3 = this._keys;
    if (newIndex !== (newIndex | 0))
      throw $.iae(newIndex);
    if (newIndex < 0 || newIndex >= t3.length)
      throw $.ioore(newIndex);
    t3[newIndex] = key;
    t3 = this._values;
    if (newIndex >= t3.length)
      throw $.ioore(newIndex);
    t3[newIndex] = value;
  }
  this._numberOfDeleted = 0;
},
 clear$0: function() {
  this._numberOfEntries = 0;
  this._numberOfDeleted = 0;
  var t1 = this._keys;
  var length$ = t1.length;
  for (var t2 = this._values, t3 = t2.length, i = 0; i < length$; ++i) {
    t1[i] = null;
    if (i >= t3)
      throw $.ioore(i);
    t2[i] = null;
  }
},
 operator$indexSet$2: function(key, value) {
  this._ensureCapacity$0();
  var index = this._probeForAdding$1(key);
  var t1 = this._keys;
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  t1 = t1[index];
  if (t1 == null || t1 === $.CTC12)
    this._numberOfEntries = this._numberOfEntries + 1;
  t1 = this._keys;
  if (index >= t1.length)
    throw $.ioore(index);
  t1[index] = key;
  t1 = this._values;
  if (index >= t1.length)
    throw $.ioore(index);
  t1[index] = value;
},
 operator$index$1: function(key) {
  var index = this._probeForLookup$1(key);
  if ($.ltB(index, 0))
    return;
  var t1 = this._values;
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  return t1[index];
},
 remove$1: function(key) {
  var index = this._probeForLookup$1(key);
  if ($.geB(index, 0)) {
    this._numberOfEntries = this._numberOfEntries - 1;
    var t1 = this._values;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    var value = t1[index];
    t1[index] = null;
    t1 = this._keys;
    if (index >= t1.length)
      throw $.ioore(index);
    t1[index] = $.CTC12;
    this._numberOfDeleted = this._numberOfDeleted + 1;
    return value;
  }
  return;
},
 get$isEmpty: function() {
  return this._numberOfEntries === 0;
},
 get$length: function() {
  return this._numberOfEntries;
},
 forEach$1: function(f) {
  var length$ = this._keys.length;
  for (var i = 0; i < length$; ++i) {
    var t1 = this._keys;
    if (i >= t1.length)
      throw $.ioore(i);
    var key = t1[i];
    if (!(key == null) && !(key === $.CTC12)) {
      t1 = this._values;
      if (i >= t1.length)
        throw $.ioore(i);
      f.call$2(key, t1[i]);
    }
  }
},
 getKeys$0: function() {
  var t1 = {};
  var list = $.ListImplementation_List($.get$length(this));
  t1.i_10 = 0;
  this.forEach$1(new $.HashMapImplementation_getKeys__(list, t1));
  return list;
},
 getValues$0: function() {
  var t1 = {};
  var list = $.ListImplementation_List($.get$length(this));
  t1.i_1 = 0;
  this.forEach$1(new $.HashMapImplementation_getValues__(list, t1));
  return list;
},
 containsKey$1: function(key) {
  return !$.eqB(this._probeForLookup$1(key), -1);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 HashMapImplementation$0: function() {
  this._numberOfEntries = 0;
  this._numberOfDeleted = 0;
  this._loadLimit = $.HashMapImplementation__computeLoadLimit(8);
  this._keys = $.ListImplementation_List(8);
  this._values = $.ListImplementation_List(8);
},
 is$Map: function() { return true; }
};

$$.HashSetImplementation = {"": ["_backingMap"],
 "super": "Object",
 clear$0: function() {
  this._backingMap.clear$0();
},
 add$1: function(value) {
  this._backingMap.operator$indexSet$2(value, value);
},
 contains$1: function(value) {
  return this._backingMap.containsKey$1(value);
},
 remove$1: function(value) {
  if (this._backingMap.containsKey$1(value) !== true)
    return false;
  this._backingMap.remove$1(value);
  return true;
},
 addAll$1: function(collection) {
  $.forEach(collection, new $.HashSetImplementation_addAll__(this));
},
 forEach$1: function(f) {
  this._backingMap.forEach$1(new $.HashSetImplementation_forEach__(f));
},
 map$1: function(f) {
  var result = $.Set_Set();
  this._backingMap.forEach$1(new $.HashSetImplementation_map__(f, result));
  return result;
},
 filter$1: function(f) {
  var result = $.Set_Set();
  this._backingMap.forEach$1(new $.HashSetImplementation_filter__(f, result));
  return result;
},
 get$isEmpty: function() {
  return $.get$isEmpty(this._backingMap);
},
 get$length: function() {
  return $.get$length(this._backingMap);
},
 iterator$0: function() {
  return $.HashSetIterator$(this);
},
 toString$0: function() {
  return $.Collections_collectionToString(this);
},
 HashSetImplementation$0: function() {
  this._backingMap = $.HashMapImplementation$();
},
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$.HashSetIterator = {"": ["_entries", "_nextValidIndex"],
 "super": "Object",
 get$hasNext: function() {
  var t1 = this._nextValidIndex;
  var t2 = this._entries;
  var t3 = t2.length;
  if (t1 >= t3)
    return false;
  if (t1 < 0)
    throw $.ioore(t1);
  if (t2[t1] === $.CTC12)
    this._advance$0();
  return this._nextValidIndex < t3;
},
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.CTC2);
  var t1 = this._entries;
  var t2 = this._nextValidIndex;
  if (t2 < 0 || t2 >= t1.length)
    throw $.ioore(t2);
  var res = t1[t2];
  this._advance$0();
  return res;
},
 _advance$0: function() {
  var t1 = this._entries;
  var length$ = t1.length;
  var entry = null;
  do {
    var t2 = this._nextValidIndex + 1;
    this._nextValidIndex = t2;
    if (t2 >= length$)
      break;
    t2 = this._nextValidIndex;
    if (t2 < 0 || t2 >= length$)
      throw $.ioore(t2);
    entry = t1[t2];
  } while (entry == null || entry === $.CTC12);
},
 HashSetIterator$1: function(set_) {
  this._advance$0();
}
};

$$._DeletedKeySentinel = {"": [],
 "super": "Object"
};

$$.KeyValuePair = {"": ["key?", "value="],
 "super": "Object"
};

$$.LinkedHashMapImplementation = {"": ["_list", "_map"],
 "super": "Object",
 operator$indexSet$2: function(key, value) {
  if (this._map.containsKey$1(key) === true)
    this._map.operator$index$1(key).get$element().set$value(value);
  else {
    this._list.addLast$1($.KeyValuePair$(key, value));
    this._map.operator$indexSet$2(key, this._list.lastEntry$0());
  }
},
 operator$index$1: function(key) {
  var entry = this._map.operator$index$1(key);
  if (entry == null)
    return;
  return entry.get$element().get$value();
},
 remove$1: function(key) {
  var entry = this._map.remove$1(key);
  if (entry == null)
    return;
  entry.remove$0();
  return entry.get$element().get$value();
},
 getKeys$0: function() {
  var t1 = {};
  var list = $.ListImplementation_List($.get$length(this));
  t1.index_10 = 0;
  this._list.forEach$1(new $.LinkedHashMapImplementation_getKeys__(list, t1));
  return list;
},
 getValues$0: function() {
  var t1 = {};
  var list = $.ListImplementation_List($.get$length(this));
  t1.index_1 = 0;
  this._list.forEach$1(new $.LinkedHashMapImplementation_getValues__(list, t1));
  return list;
},
 forEach$1: function(f) {
  this._list.forEach$1(new $.LinkedHashMapImplementation_forEach__(f));
},
 containsKey$1: function(key) {
  return this._map.containsKey$1(key);
},
 get$length: function() {
  return $.get$length(this._map);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 clear$0: function() {
  this._map.clear$0();
  this._list.clear$0();
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 LinkedHashMapImplementation$0: function() {
  this._map = $.HashMapImplementation$();
  this._list = $.DoubleLinkedQueue$();
},
 is$Map: function() { return true; }
};

$$.DoubleLinkedQueueEntry = {"": ["_previous!", "_next=", "_element?"],
 "super": "Object",
 _link$2: function(p, n) {
  this._next = n;
  this._previous = p;
  p.set$_next(this);
  n.set$_previous(this);
},
 prepend$1: function(e) {
  $.DoubleLinkedQueueEntry$(e)._link$2(this._previous, this);
},
 remove$0: function() {
  var t1 = this._next;
  this._previous.set$_next(t1);
  t1 = this._previous;
  this._next.set$_previous(t1);
  this._next = null;
  this._previous = null;
  return this._element;
},
 _asNonSentinelEntry$0: function() {
  return this;
},
 previousEntry$0: function() {
  return this._previous._asNonSentinelEntry$0();
},
 get$element: function() {
  return this._element;
},
 DoubleLinkedQueueEntry$1: function(e) {
  this._element = e;
}
};

$$._DoubleLinkedQueueEntrySentinel = {"": ["_previous", "_next", "_element"],
 "super": "DoubleLinkedQueueEntry",
 remove$0: function() {
  throw $.$$throw($.CTC13);
},
 _asNonSentinelEntry$0: function() {
  return;
},
 get$element: function() {
  throw $.$$throw($.CTC13);
},
 _DoubleLinkedQueueEntrySentinel$0: function() {
  this._link$2(this, this);
}
};

$$.DoubleLinkedQueue = {"": ["_sentinel"],
 "super": "Object",
 addLast$1: function(value) {
  this._sentinel.prepend$1(value);
},
 add$1: function(value) {
  this.addLast$1(value);
},
 addAll$1: function(collection) {
  for (var t1 = $.iterator(collection); t1.get$hasNext() === true;)
    this.add$1(t1.next$0());
},
 removeLast$0: function() {
  return this._sentinel._previous.remove$0();
},
 removeFirst$0: function() {
  return this._sentinel._next.remove$0();
},
 last$0: function() {
  return this._sentinel._previous.get$element();
},
 lastEntry$0: function() {
  return this._sentinel.previousEntry$0();
},
 get$length: function() {
  var t1 = {};
  t1.counter_1 = 0;
  this.forEach$1(new $.DoubleLinkedQueue_length__(t1));
  return t1.counter_1;
},
 get$isEmpty: function() {
  var t1 = this._sentinel;
  return t1._next === t1;
},
 clear$0: function() {
  var t1 = this._sentinel;
  t1._next = t1;
  t1 = this._sentinel;
  t1._previous = t1;
},
 forEach$1: function(f) {
  var entry = this._sentinel._next;
  for (; !(entry === this._sentinel);) {
    var nextEntry = entry.get$_next();
    f.call$1(entry.get$_element());
    entry = nextEntry;
  }
},
 map$1: function(f) {
  var other = $.Queue_Queue();
  var entry = this._sentinel._next;
  for (; !(entry === this._sentinel);) {
    var nextEntry = entry.get$_next();
    $.addLast(other, f.call$1(entry.get$_element()));
    entry = nextEntry;
  }
  return other;
},
 filter$1: function(f) {
  var other = $.Queue_Queue();
  var entry = this._sentinel._next;
  for (; !(entry === this._sentinel);) {
    var nextEntry = entry.get$_next();
    if (f.call$1(entry.get$_element()) === true)
      $.addLast(other, entry.get$_element());
    entry = nextEntry;
  }
  return other;
},
 iterator$0: function() {
  return $._DoubleLinkedQueueIterator$(this._sentinel);
},
 toString$0: function() {
  return $.Collections_collectionToString(this);
},
 DoubleLinkedQueue$0: function() {
  this._sentinel = $._DoubleLinkedQueueEntrySentinel$();
},
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$._DoubleLinkedQueueIterator = {"": ["_sentinel", "_currentEntry"],
 "super": "Object",
 get$hasNext: function() {
  return !(this._currentEntry.get$_next() === this._sentinel);
},
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.CTC2);
  this._currentEntry = this._currentEntry.get$_next();
  return this._currentEntry.get$element();
},
 _DoubleLinkedQueueIterator$1: function(_sentinel) {
  this._currentEntry = this._sentinel;
}
};

$$.JSSyntaxRegExp = {"": ["_lib0_pattern", "_multiLine", "_ignoreCase"],
 "super": "Object",
 firstMatch$1: function(str) {
  var m = $.regExpExec(this, $.checkString(str));
  if (m == null)
    return;
  var matchStart = $.regExpMatchStart(m);
  var t1 = $.get$length($.index(m, 0));
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  var matchEnd = matchStart + t1;
  return $._MatchImplementation$(this.get$pattern(), str, matchStart, matchEnd, m);
},
 allMatches$1: function(str) {
  $.checkString(str);
  return $._AllMatchesIterable$(this, str);
},
 hasMatch$1: function(str) {
  return $.regExpTest(this, $.checkString(str));
},
 get$pattern: function() {
  return this._lib0_pattern;
},
 get$multiLine: function() {
  return this._multiLine;
},
 get$ignoreCase: function() {
  return this._ignoreCase;
},
 is$JSSyntaxRegExp: true,
 is$RegExp: true
};

$$._MatchImplementation = {"": ["pattern?", "str", "_start", "_end", "_groups"],
 "super": "Object",
 group$1: function(index) {
  return $.index(this._groups, index);
},
 operator$index$1: function(index) {
  return this.group$1(index);
}
};

$$._AllMatchesIterable = {"": ["_re", "_str"],
 "super": "Object",
 iterator$0: function() {
  return $._AllMatchesIterator$(this._re, this._str);
},
 is$Iterable: function() { return true; }
};

$$._AllMatchesIterator = {"": ["_re", "_str", "_next=", "_done"],
 "super": "Object",
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.CTC2);
  var next = this._next;
  this._next = null;
  return next;
},
 get$hasNext: function() {
  if (this._done)
    return false;
  else if (!(this._next == null))
    return true;
  this._next = this._re.firstMatch$1(this._str);
  if (this._next == null) {
    this._done = true;
    return false;
  } else
    return true;
}
};

$$._DateImpl = {"": ["millisecondsSinceEpoch?", "isUtc"],
 "super": "Object",
 operator$eq$1: function(other) {
  if (!(typeof other === 'object' && other !== null && !!other.is$Date))
    return false;
  return $.eq(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 operator$lt$1: function(other) {
  return $.lt(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 operator$le$1: function(other) {
  return $.le(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 operator$gt$1: function(other) {
  return $.gt(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 operator$ge$1: function(other) {
  return $.ge(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 get$hashCode: function() {
  return this.millisecondsSinceEpoch;
},
 toString$0: function() {
  var t1 = new $._DateImpl_toString_fourDigits();
  var t2 = new $._DateImpl_toString_threeDigits();
  var t3 = new $._DateImpl_toString_twoDigits();
  var y = t1.call$1(this.get$year());
  var m = t3.call$1(this.get$month());
  var d = t3.call$1(this.get$day());
  var h = t3.call$1(this.get$hour());
  var min = t3.call$1(this.get$minute());
  var sec = t3.call$1(this.get$second());
  var ms = t2.call$1(this.get$millisecond());
  if (this.isUtc === true)
    return $.S(y) + '-' + $.S(m) + '-' + $.S(d) + ' ' + $.S(h) + ':' + $.S(min) + ':' + $.S(sec) + '.' + $.S(ms) + 'Z';
  else
    return $.S(y) + '-' + $.S(m) + '-' + $.S(d) + ' ' + $.S(h) + ':' + $.S(min) + ':' + $.S(sec) + '.' + $.S(ms);
},
 add$1: function(duration) {
  return $.Date_Date$fromMillisecondsSinceEpoch($.add(this.millisecondsSinceEpoch, duration.get$inMilliseconds()), this.isUtc);
},
 get$year: function() {
  return $.Primitives_getYear(this);
},
 get$month: function() {
  return $.Primitives_getMonth(this);
},
 get$day: function() {
  return $.Primitives_getDay(this);
},
 get$hour: function() {
  return $.Primitives_getHours(this);
},
 get$minute: function() {
  return $.Primitives_getMinutes(this);
},
 get$second: function() {
  return $.Primitives_getSeconds(this);
},
 get$millisecond: function() {
  return $.Primitives_getMilliseconds(this);
},
 _DateImpl$fromMillisecondsSinceEpoch$2: function(millisecondsSinceEpoch, isUtc) {
  var t1 = this.millisecondsSinceEpoch;
  if ($.gtB($.abs(t1), 8640000000000000))
    throw $.$$throw($.ArgumentError$(t1));
  t1 = this.isUtc;
  if (t1 == null)
    throw $.$$throw($.ArgumentError$(t1));
},
 _DateImpl$now$0: function() {
  $.Primitives_lazyAsJsDate(this);
},
 is$Date: true
};

$$.Duration = {"": ["inMilliseconds?"],
 "super": "Object",
 get$inHours: function() {
  return $.tdiv(this.inMilliseconds, 3600000);
},
 get$inMinutes: function() {
  return $.tdiv(this.inMilliseconds, 60000);
},
 get$inSeconds: function() {
  return $.tdiv(this.inMilliseconds, 1000);
},
 operator$eq$1: function(other) {
  if (!(typeof other === 'object' && other !== null && !!other.is$Duration))
    return false;
  return $.eq(this.inMilliseconds, other.inMilliseconds);
},
 get$hashCode: function() {
  return $.get$hashCode(this.inMilliseconds);
},
 toString$0: function() {
  var t1 = new $.Duration_toString_threeDigits();
  var t2 = new $.Duration_toString_twoDigits();
  var t3 = this.inMilliseconds;
  if ($.ltB(t3, 0))
    return '-' + $.S($.Duration$(0, 0, $.neg(t3), 0, 0));
  var twoDigitMinutes = t2.call$1($.remainder(this.get$inMinutes(), 60));
  var twoDigitSeconds = t2.call$1($.remainder(this.get$inSeconds(), 60));
  var threeDigitMs = t1.call$1($.remainder(t3, 1000));
  return $.S(this.get$inHours()) + ':' + $.S(twoDigitMinutes) + ':' + $.S(twoDigitSeconds) + '.' + $.S(threeDigitMs);
},
 is$Duration: true
};

$$.ArgumentError = {"": ["message?"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.message;
  if (!(t1 == null))
    return 'Illegal argument(s): ' + $.S(t1);
  return 'Illegal argument(s)';
}
};

$$.NoSuchMethodError = {"": ["_receiver", "_functionName", "_arguments", "_existingArgumentNames"],
 "super": "Object",
 toString$0: function() {
  var sb = $.StringBuffer_StringBuffer('');
  var t1 = this._arguments;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.toString$0$bailout(1, t1, sb);
  var i = 0;
  for (; i < t1.length; ++i) {
    if (i > 0)
      $.add$1(sb, ', ');
    if (i >= t1.length)
      throw $.ioore(i);
    $.add$1(sb, $.NoSuchMethodError_safeToString(t1[i]));
  }
  t1 = this._existingArgumentNames;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.toString$0$bailout(2, sb, t1);
  var actualParameters = $.toString(sb);
  sb = $.StringBuffer_StringBuffer('');
  for (i = 0; i < t1.length; ++i) {
    if (i > 0)
      $.add$1(sb, ', ');
    if (i >= t1.length)
      throw $.ioore(i);
    $.add$1(sb, t1[i]);
  }
  var formalParameters = $.toString(sb);
  t1 = this._functionName;
  return 'NoSuchMethodError: incorrect number of arguments passed to method named \'' + $.S(t1) + '\'\n' + 'Receiver: ' + $.S($.NoSuchMethodError_safeToString(this._receiver)) + '\n' + 'Tried calling: ' + $.S(t1) + '(' + $.S(actualParameters) + ')\n' + 'Found: ' + $.S(t1) + '(' + $.S(formalParameters) + ')';
},
 toString$0$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t1 = env0;
      sb = env1;
      break;
    case 2:
      sb = env0;
      t1 = env1;
      break;
  }
  switch (state0) {
    case 0:
      var sb = $.StringBuffer_StringBuffer('');
      var t1 = this._arguments;
    case 1:
      state0 = 0;
      var i = 0;
      for (; $.ltB(i, $.get$length(t1)); ++i) {
        if (i > 0)
          $.add$1(sb, ', ');
        $.add$1(sb, $.NoSuchMethodError_safeToString($.index(t1, i)));
      }
      t1 = this._existingArgumentNames;
    case 2:
      state0 = 0;
      if (t1 == null)
        return 'NoSuchMethodError : method not found: \'' + $.S(this._functionName) + '\'\n' + 'Receiver: ' + $.S($.NoSuchMethodError_safeToString(this._receiver)) + '\n' + 'Arguments: [' + $.S(sb) + ']';
      else {
        var actualParameters = $.toString(sb);
        sb = $.StringBuffer_StringBuffer('');
        for (i = 0; $.ltB(i, $.get$length(t1)); ++i) {
          if (i > 0)
            $.add$1(sb, ', ');
          $.add$1(sb, $.index(t1, i));
        }
        var formalParameters = $.toString(sb);
        t1 = this._functionName;
        return 'NoSuchMethodError: incorrect number of arguments passed to method named \'' + $.S(t1) + '\'\n' + 'Receiver: ' + $.S($.NoSuchMethodError_safeToString(this._receiver)) + '\n' + 'Tried calling: ' + $.S(t1) + '(' + $.S(actualParameters) + ')\n' + 'Found: ' + $.S(t1) + '(' + $.S(formalParameters) + ')';
      }
  }
}
};

$$.UnsupportedError = {"": ["message?"],
 "super": "Object",
 toString$0: function() {
  return this.message;
}
};

$$.StackOverflowError = {"": [],
 "super": "Object",
 toString$0: function() {
  return 'Stack Overflow';
}
};

$$._ExceptionImplementation = {"": ["message?"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.message;
  return t1 == null ? 'Exception' : 'Exception: ' + $.S(t1);
},
 is$Exception: true
};

$$.IndexOutOfRangeException = {"": ["_value?"],
 "super": "Object",
 toString$0: function() {
  return 'IndexOutOfRangeException: ' + $.S(this._value);
},
 is$Exception: true
};

$$.FormatException = {"": ["message?"],
 "super": "Object",
 toString$0: function() {
  return 'FormatException: ' + $.S(this.message);
},
 is$Exception: true
};

$$.NullPointerException = {"": ["functionName", "arguments"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.functionName;
  if (t1 == null)
    return this.get$exceptionName();
  else
    return $.S(this.get$exceptionName()) + ' : method: \'' + $.S(t1) + '\'\n' + 'Receiver: null\n' + 'Arguments: ' + $.S(this.arguments);
},
 get$exceptionName: function() {
  return 'NullPointerException';
},
 is$Exception: true
};

$$.NoMoreElementsException = {"": [],
 "super": "Object",
 toString$0: function() {
  return 'NoMoreElementsException';
},
 is$Exception: true
};

$$.EmptyQueueException = {"": [],
 "super": "Object",
 toString$0: function() {
  return 'EmptyQueueException';
},
 is$Exception: true
};

$$.NotImplementedException = {"": ["_message"],
 "super": "Object",
 toString$0: function() {
  var t1 = this._message;
  return !(t1 == null) ? 'NotImplementedException: ' + $.S(t1) : 'NotImplementedException';
},
 is$Exception: true
};

$$.IllegalJSRegExpException = {"": ["_pattern", "_errmsg"],
 "super": "Object",
 toString$0: function() {
  return 'IllegalJSRegExpException: \'' + $.S(this._pattern) + '\' \'' + this._errmsg + '\'';
},
 is$Exception: true
};

$$.ExpectException = {"": ["message?"],
 "super": "Object",
 toString$0: function() {
  return this.message;
},
 is$ExpectException: true,
 is$Exception: true
};

$$.FutureNotCompleteException = {"": [],
 "super": "Object",
 toString$0: function() {
  return 'Exception: future has not been completed';
},
 is$Exception: true
};

$$.FutureAlreadyCompleteException = {"": [],
 "super": "Object",
 toString$0: function() {
  return 'Exception: future already completed';
},
 is$Exception: true
};

$$.FutureUnhandledException = {"": ["source", "stackTrace?"],
 "super": "Object",
 toString$0: function() {
  return 'FutureUnhandledException: exception while executing Future\n  ' + $.S($.replaceAll($.toString(this.source), '\n', '\n  ')) + '\n' + 'original stack trace:\n  ' + $.S($.replaceAll($.toString(this.stackTrace), '\n', '\n  '));
},
 is$Exception: true
};

$$._FutureImpl = {"": ["_isComplete", "_value?", "_exception", "_stackTrace", "_exceptionHandled", "_successListeners", "_exceptionHandlers", "_completionListeners"],
 "super": "Object",
 get$value: function() {
  if (this.get$isComplete() !== true)
    throw $.$$throw($.FutureNotCompleteException$());
  var t1 = this._exception;
  if (!(t1 == null))
    throw $.$$throw($.FutureUnhandledException$(t1, this.get$stackTrace()));
  return this._value;
},
 get$stackTrace: function() {
  if (this.get$isComplete() !== true)
    throw $.$$throw($.FutureNotCompleteException$());
  return this._stackTrace;
},
 get$isComplete: function() {
  return this._isComplete;
},
 get$hasValue: function() {
  return this.get$isComplete() === true && this._exception == null;
},
 then$1: function(onSuccess) {
  if (this.get$hasValue() === true)
    onSuccess.call$1(this.get$value());
  else if (this.get$isComplete() !== true)
    this._successListeners.push(onSuccess);
  else if (this._exceptionHandled !== true)
    throw $.$$throw($.FutureUnhandledException$(this._exception, this.get$stackTrace()));
},
 handleException$1: function(onException) {
  if (this._exceptionHandled === true)
    return;
  if (this._isComplete) {
    var t1 = this._exception;
    if (!(t1 == null))
      this._exceptionHandled = onException.call$1(t1);
  } else
    this._exceptionHandlers.push(onException);
},
 _lib4_complete$0: function() {
  this._isComplete = true;
  try {
    if (!(this._exception == null))
      for (var t1 = $.iterator(this._exceptionHandlers); t1.get$hasNext() === true;) {
        var handler = t1.next$0();
        if ($.eqB(handler.call$1(this._exception), true)) {
          this._exceptionHandled = true;
          break;
        }
      }
    if (this.get$hasValue() === true)
      for (t1 = $.iterator(this._successListeners); t1.get$hasNext() === true;) {
        var listener = t1.next$0();
        listener.call$1(this.get$value());
      }
    else if (this._exceptionHandled !== true && this._successListeners.length > 0)
      throw $.$$throw($.FutureUnhandledException$(this._exception, this.get$stackTrace()));
  } finally {
    for (t1 = $.iterator(this._completionListeners); t1.get$hasNext() === true;) {
      var listener0 = t1.next$0();
      try {
        listener0.call$1(this);
      } catch (exception) {
        $.unwrapException(exception);
      }

    }
  }
},
 _setValue$1: function(value) {
  if (this._isComplete)
    throw $.$$throw($.FutureAlreadyCompleteException$());
  this._value = value;
  this._lib4_complete$0();
},
 _setException$2: function(exception, stackTrace) {
  if (exception == null)
    throw $.$$throw($.ArgumentError$(null));
  if (this._isComplete)
    throw $.$$throw($.FutureAlreadyCompleteException$());
  this._exception = exception;
  this._stackTrace = stackTrace;
  this._lib4_complete$0();
}
};

$$._CompleterImpl = {"": ["_futureImpl"],
 "super": "Object",
 get$future: function() {
  return this._futureImpl;
},
 complete$1: function(value) {
  this._futureImpl._setValue$1(value);
},
 completeException$2: function(exception, stackTrace) {
  this._futureImpl._setException$2(exception, stackTrace);
},
 completeException$1: function(exception) {
  return this.completeException$2(exception,null)
}
};

$$.Object = {"": [],
 "super": "",
 operator$eq$1: function(other) {
  return this === other;
},
 get$hashCode: function() {
  return $.Primitives_objectHashCode(this);
},
 toString$0: function() {
  return $.Primitives_objectToString(this);
},
 noSuchMethod$2: function(name$, args) {
  throw $.$$throw($.NoSuchMethodError$(this, name$, args, null));
},
 _addEscapedString$1: function($0) {
  return this.noSuchMethod$2("_addEscapedString", [$0]);
 },
 describeMismatch$4: function($0, $1, $2, $3) {
  return this.noSuchMethod$2("describeMismatch", [$0, $1, $2, $3]);
 },
 startsWith$1: function($0) {
  return this.noSuchMethod$2("startsWith", [$0]);
 },
 _getPropertyValue$1: function($0) {
  return this.noSuchMethod$2("_getPropertyValue", [$0]);
 },
 fail$2: function($0, $1) {
  return this.noSuchMethod$2("fail", [$0, $1]);
 },
 getRange$2: function($0, $1) {
  return this.noSuchMethod$2("getRange", [$0, $1]);
 },
 onmessage$1: function($0) {
  return this.noSuchMethod$2("onmessage", [$0]);
 },
 receive$1: function($0) {
  return this.noSuchMethod$2("receive", [$0]);
 },
 queryAll$1: function($0) {
  return this.noSuchMethod$2("queryAll", [$0]);
 },
 _add_1$2: function($0, $1) {
  return this.noSuchMethod$2("_add_1", [$0, $1]);
 },
 pass$0: function() {
  return this.noSuchMethod$2("pass", []);
 },
 removeLast$0: function() {
  return this.noSuchMethod$2("removeLast", []);
 },
 onInit$0: function() {
  return this.noSuchMethod$2("onInit", []);
 },
 _serializeList$1: function($0) {
  return this.noSuchMethod$2("_serializeList", [$0]);
 },
 _lib3_serializeList$1: function($0) {
  return this.noSuchMethod$2("_serializeList", [$0]);
 },
 _complete$0: function() {
  return this.noSuchMethod$2("_complete", []);
 },
 _lib4_complete$0: function() {
  return this.noSuchMethod$2("_complete", []);
 },
 removeFirst$0: function() {
  return this.noSuchMethod$2("removeFirst", []);
 },
 _postMessage_1$2: function($0, $1) {
  return this.noSuchMethod$2("_postMessage_1", [$0, $1]);
 },
 _add$2: function($0, $1) {
  return this.noSuchMethod$2("_add", [$0, $1]);
 },
 clear$0: function() {
  return this.noSuchMethod$2("clear", []);
 },
 onOpen$0: function() {
  return this.noSuchMethod$2("onOpen", []);
 },
 remainder$1: function($0) {
  return this.noSuchMethod$2("remainder", [$0]);
 },
 failMatch$5: function($0, $1, $2, $3, $4) {
  return this.noSuchMethod$2("failMatch", [$0, $1, $2, $3, $4]);
 },
 substring$1: function($0) {
  return this.noSuchMethod$2("substring", [$0]);
 },
 substring$2: function($0, $1) {
  return this.noSuchMethod$2("substring", [$0, $1]);
 },
 addLast$1: function($0) {
  return this.noSuchMethod$2("addLast", [$0]);
 },
 add$1: function($0) {
  return this.noSuchMethod$2("add", [$0]);
 },
 add$2: function($0, $1) {
  return this.noSuchMethod$2("add", [$0, $1]);
 },
 forEach$1: function($0) {
  return this.noSuchMethod$2("forEach", [$0]);
 },
 _init$4: function($0, $1, $2, $3) {
  return this.noSuchMethod$2("_init", [$0, $1, $2, $3]);
 },
 _probeForLookup$1: function($0) {
  return this.noSuchMethod$2("_probeForLookup", [$0]);
 },
 get$1: function($0) {
  return this.noSuchMethod$2("get", [$0]);
 },
 split$1: function($0) {
  return this.noSuchMethod$2("split", [$0]);
 },
 $dom_replaceChild$2: function($0, $1) {
  return this.noSuchMethod$2("$dom_replaceChild", [$0, $1]);
 },
 _setAttachedInfo$2: function($0, $1) {
  return this.noSuchMethod$2("_setAttachedInfo", [$0, $1]);
 },
 getKeys$0: function() {
  return this.noSuchMethod$2("getKeys", []);
 },
 complete$1: function($0) {
  return this.noSuchMethod$2("complete", [$0]);
 },
 allMatches$1: function($0) {
  return this.noSuchMethod$2("allMatches", [$0]);
 },
 map$1: function($0) {
  return this.noSuchMethod$2("map", [$0]);
 },
 unregister$1: function($0) {
  return this.noSuchMethod$2("unregister", [$0]);
 },
 _clearAttachedInfo$1: function($0) {
  return this.noSuchMethod$2("_clearAttachedInfo", [$0]);
 },
 query$1: function($0) {
  return this.noSuchMethod$2("query", [$0]);
 },
 abs$0: function() {
  return this.noSuchMethod$2("abs", []);
 },
 exitScope$0: function() {
  return this.noSuchMethod$2("exitScope", []);
 },
 $dom_removeEventListener$3: function($0, $1, $2) {
  return this.noSuchMethod$2("$dom_removeEventListener", [$0, $1, $2]);
 },
 error$2: function($0, $1) {
  return this.noSuchMethod$2("error", [$0, $1]);
 },
 _initialize$1: function($0) {
  return this.noSuchMethod$2("_initialize", [$0]);
 },
 addDescriptionOf$1: function($0) {
  return this.noSuchMethod$2("addDescriptionOf", [$0]);
 },
 _isDone$0: function() {
  return this.noSuchMethod$2("_isDone", []);
 },
 _indent$1: function($0) {
  return this.noSuchMethod$2("_indent", [$0]);
 },
 filter$1: function($0) {
  return this.noSuchMethod$2("filter", [$0]);
 },
 concat$1: function($0) {
  return this.noSuchMethod$2("concat", [$0]);
 },
 then$1: function($0) {
  return this.noSuchMethod$2("then", [$0]);
 },
 previousEntry$0: function() {
  return this.noSuchMethod$2("previousEntry", []);
 },
 _count_1$0: function() {
  return this.noSuchMethod$2("_count_1", []);
 },
 $dom_createElement$1: function($0) {
  return this.noSuchMethod$2("$dom_createElement", [$0]);
 },
 _asNonSentinelEntry$0: function() {
  return this.noSuchMethod$2("_asNonSentinelEntry", []);
 },
 handleException$1: function($0) {
  return this.noSuchMethod$2("handleException", [$0]);
 },
 toSendPort$0: function() {
  return this.noSuchMethod$2("toSendPort", []);
 },
 onError$2: function($0, $1) {
  return this.noSuchMethod$2("onError", [$0, $1]);
 },
 send$2: function($0, $1) {
  return this.noSuchMethod$2("send", [$0, $1]);
 },
 maybeCloseWorker$0: function() {
  return this.noSuchMethod$2("maybeCloseWorker", []);
 },
 call$0: function() {
  return this.noSuchMethod$2("call", []);
 },
 call$1: function($0) {
  return this.noSuchMethod$2("call", [$0]);
 },
 call$2: function($0, $1) {
  return this.noSuchMethod$2("call", [$0, $1]);
 },
 call$3: function($0, $1, $2) {
  return this.noSuchMethod$2("call", [$0, $1, $2]);
 },
 call$4: function($0, $1, $2, $3) {
  return this.noSuchMethod$2("call", [$0, $1, $2, $3]);
 },
 call$5: function($0, $1, $2, $3, $4) {
  return this.noSuchMethod$2("call", [$0, $1, $2, $3, $4]);
 },
 completeException$1: function($0) {
  return this.noSuchMethod$2("completeException", [$0]);
 },
 completeException$2: function($0, $1) {
  return this.noSuchMethod$2("completeException", [$0, $1]);
 },
 lookup$1: function($0) {
  return this.noSuchMethod$2("lookup", [$0]);
 },
 hasMatch$1: function($0) {
  return this.noSuchMethod$2("hasMatch", [$0]);
 },
 replaceAll$2: function($0, $1) {
  return this.noSuchMethod$2("replaceAll", [$0, $1]);
 },
 _toList$0: function() {
  return this.noSuchMethod$2("_toList", []);
 },
 _get_1$1: function($0) {
  return this.noSuchMethod$2("_get_1", [$0]);
 },
 _matcher$1: function($0) {
  return this.noSuchMethod$2("_matcher", [$0]);
 },
 indexOf$2: function($0, $1) {
  return this.noSuchMethod$2("indexOf", [$0, $1]);
 },
 _count_2$1: function($0) {
  return this.noSuchMethod$2("_count_2", [$0]);
 },
 cleanup$0: function() {
  return this.noSuchMethod$2("cleanup", []);
 },
 dispatch$1: function($0) {
  return this.noSuchMethod$2("dispatch", [$0]);
 },
 lookupPort$1: function($0) {
  return this.noSuchMethod$2("lookupPort", [$0]);
 },
 $dom_appendChild$1: function($0) {
  return this.noSuchMethod$2("$dom_appendChild", [$0]);
 },
 _shouldCallBack$0: function() {
  return this.noSuchMethod$2("_shouldCallBack", []);
 },
 stringifyValue$1: function($0) {
  return this.noSuchMethod$2("stringifyValue", [$0]);
 },
 toJson$0: function() {
  return this.noSuchMethod$2("toJson", []);
 },
 globalize$1: function($0) {
  return this.noSuchMethod$2("globalize", [$0]);
 },
 _compareIterables$4: function($0, $1, $2, $3) {
  return this.noSuchMethod$2("_compareIterables", [$0, $1, $2, $3]);
 },
 _tearDown$0: function() {
  return this.noSuchMethod$2("_tearDown", []);
 },
 last$0: function() {
  return this.noSuchMethod$2("last", []);
 },
 _add_2$1: function($0) {
  return this.noSuchMethod$2("_add_2", [$0]);
 },
 $dom_initCustomEvent$4: function($0, $1, $2, $3) {
  return this.noSuchMethod$2("$dom_initCustomEvent", [$0, $1, $2, $3]);
 },
 _ensureCapacity$0: function() {
  return this.noSuchMethod$2("_ensureCapacity", []);
 },
 _runHelper$0: function() {
  return this.noSuchMethod$2("_runHelper", []);
 },
 next$0: function() {
  return this.noSuchMethod$2("next", []);
 },
 _postMessage$1: function($0) {
  return this.noSuchMethod$2("_postMessage", [$0]);
 },
 _escape$1: function($0) {
  return this.noSuchMethod$2("_escape", [$0]);
 },
 _deserializeHelper$1: function($0) {
  return this.noSuchMethod$2("_deserializeHelper", [$0]);
 },
 _lib3_deserializeHelper$1: function($0) {
  return this.noSuchMethod$2("_deserializeHelper", [$0]);
 },
 charCodeAt$1: function($0) {
  return this.noSuchMethod$2("charCodeAt", [$0]);
 },
 onDone$5: function($0, $1, $2, $3, $4) {
  return this.noSuchMethod$2("onDone", [$0, $1, $2, $3, $4]);
 },
 _get_2$1: function($0) {
  return this.noSuchMethod$2("_get_2", [$0]);
 },
 _checkReplyTo$1: function($0) {
  return this.noSuchMethod$2("_checkReplyTo", [$0]);
 },
 _deserializeRef$1: function($0) {
  return this.noSuchMethod$2("_deserializeRef", [$0]);
 },
 _lib3_deserializeRef$1: function($0) {
  return this.noSuchMethod$2("_deserializeRef", [$0]);
 },
 _recursiveMatch$4: function($0, $1, $2, $3) {
  return this.noSuchMethod$2("_recursiveMatch", [$0, $1, $2, $3]);
 },
 _dispatch$1: function($0) {
  return this.noSuchMethod$2("_dispatch", [$0]);
 },
 _lib3_dispatch$1: function($0) {
  return this.noSuchMethod$2("_dispatch", [$0]);
 },
 enterScope$0: function() {
  return this.noSuchMethod$2("enterScope", []);
 },
 removeRange$2: function($0, $1) {
  return this.noSuchMethod$2("removeRange", [$0, $1]);
 },
 lastEntry$0: function() {
  return this.noSuchMethod$2("lastEntry", []);
 },
 run$0: function() {
  return this.noSuchMethod$2("run", []);
 },
 _getAttachedInfo$1: function($0) {
  return this.noSuchMethod$2("_getAttachedInfo", [$0]);
 },
 $dom_dispatchEvent$1: function($0) {
  return this.noSuchMethod$2("$dom_dispatchEvent", [$0]);
 },
 setTimeout$2: function($0, $1) {
  return this.noSuchMethod$2("setTimeout", [$0, $1]);
 },
 _link$2: function($0, $1) {
  return this.noSuchMethod$2("_link", [$0, $1]);
 },
 reset$0: function() {
  return this.noSuchMethod$2("reset", []);
 },
 onTestResult$1: function($0) {
  return this.noSuchMethod$2("onTestResult", [$0]);
 },
 containsKey$1: function($0) {
  return this.noSuchMethod$2("containsKey", [$0]);
 },
 onStart$0: function() {
  return this.noSuchMethod$2("onStart", []);
 },
 toUpperCase$0: function() {
  return this.noSuchMethod$2("toUpperCase", []);
 },
 _grow$1: function($0) {
  return this.noSuchMethod$2("_grow", [$0]);
 },
 $dom_removeChild$1: function($0) {
  return this.noSuchMethod$2("$dom_removeChild", [$0]);
 },
 _throwUnmodifiable$0: function() {
  return this.noSuchMethod$2("_throwUnmodifiable", []);
 },
 iterator$0: function() {
  return this.noSuchMethod$2("iterator", []);
 },
 callSync$1: function($0) {
  return this.noSuchMethod$2("callSync", [$0]);
 },
 _setGlobals$0: function() {
  return this.noSuchMethod$2("_setGlobals", []);
 },
 _probeForAdding$1: function($0) {
  return this.noSuchMethod$2("_probeForAdding", [$0]);
 },
 _nativeDetectEnvironment$0: function() {
  return this.noSuchMethod$2("_nativeDetectEnvironment", []);
 },
 _setUp$0: function() {
  return this.noSuchMethod$2("_setUp", []);
 },
 replaceWith$1: function($0) {
  return this.noSuchMethod$2("replaceWith", [$0]);
 },
 _count_3$1: function($0) {
  return this.noSuchMethod$2("_count_3", [$0]);
 },
 contains$1: function($0) {
  return this.noSuchMethod$2("contains", [$0]);
 },
 contains$2: function($0, $1) {
  return this.noSuchMethod$2("contains", [$0, $1]);
 },
 remove$0: function() {
  return this.noSuchMethod$2("remove", []);
 },
 remove$1: function($0) {
  return this.noSuchMethod$2("remove", [$0]);
 },
 find$1: function($0) {
  return this.noSuchMethod$2("find", [$0]);
 },
 onClose$0: function() {
  return this.noSuchMethod$2("onClose", []);
 },
 close$0: function() {
  return this.noSuchMethod$2("close", []);
 },
 prepend$1: function($0) {
  return this.noSuchMethod$2("prepend", [$0]);
 },
 process$0: function() {
  return this.noSuchMethod$2("process", []);
 },
 _postMessage_2$1: function($0) {
  return this.noSuchMethod$2("_postMessage_2", [$0]);
 },
 _callback$1: function($0) {
  return this.noSuchMethod$2("_callback", [$0]);
 },
 _lib3_callback$2: function($0, $1) {
  return this.noSuchMethod$2("_callback", [$0, $1]);
 },
 _lib5_callback$1: function($0) {
  return this.noSuchMethod$2("_callback", [$0]);
 },
 register$2: function($0, $1) {
  return this.noSuchMethod$2("register", [$0, $1]);
 },
 postMessage$1: function($0) {
  return this.noSuchMethod$2("postMessage", [$0]);
 },
 _advance$0: function() {
  return this.noSuchMethod$2("_advance", []);
 },
 _remove$2: function($0, $1) {
  return this.noSuchMethod$2("_remove", [$0, $1]);
 },
 $dom_createEvent$1: function($0) {
  return this.noSuchMethod$2("$dom_createEvent", [$0]);
 },
 registerPort$2: function($0, $1) {
  return this.noSuchMethod$2("registerPort", [$0, $1]);
 },
 onTestStart$1: function($0) {
  return this.noSuchMethod$2("onTestStart", [$0]);
 },
 matches$2: function($0, $1) {
  return this.noSuchMethod$2("matches", [$0, $1]);
 },
 endsWith$1: function($0) {
  return this.noSuchMethod$2("endsWith", [$0]);
 },
 _deserializeMap$1: function($0) {
  return this.noSuchMethod$2("_deserializeMap", [$0]);
 },
 _lib3_deserializeMap$1: function($0) {
  return this.noSuchMethod$2("_deserializeMap", [$0]);
 },
 setInterval$2: function($0, $1) {
  return this.noSuchMethod$2("setInterval", [$0, $1]);
 },
 firstMatch$1: function($0) {
  return this.noSuchMethod$2("firstMatch", [$0]);
 },
 enqueue$3: function($0, $1, $2) {
  return this.noSuchMethod$2("enqueue", [$0, $1, $2]);
 },
 eval$1: function($0) {
  return this.noSuchMethod$2("eval", [$0]);
 },
 _deserializeList$1: function($0) {
  return this.noSuchMethod$2("_deserializeList", [$0]);
 },
 _lib3_deserializeList$1: function($0) {
  return this.noSuchMethod$2("_deserializeList", [$0]);
 },
 onMessage$1: function($0) {
  return this.noSuchMethod$2("onMessage", [$0]);
 },
 $dom_addEventListener$3: function($0, $1, $2) {
  return this.noSuchMethod$2("$dom_addEventListener", [$0, $1, $2]);
 },
 addAll$1: function($0) {
  return this.noSuchMethod$2("addAll", [$0]);
 },
 runIteration$0: function() {
  return this.noSuchMethod$2("runIteration", []);
 },
 _match$2: function($0, $1) {
  return this.noSuchMethod$2("_match", [$0, $1]);
 },
 _nativeInitWorkerMessageHandler$0: function() {
  return this.noSuchMethod$2("_nativeInitWorkerMessageHandler", []);
 },
 get$needSerialization: function() {
  return this.noSuchMethod$2("get:needSerialization", []);
 },
 get$_lib3_id: function() {
  return this.noSuchMethod$2("get:_id", []);
 },
 get$key: function() {
  return this.noSuchMethod$2("get:key", []);
 },
 get$_allCallsDone: function() {
  return this.noSuchMethod$2("get:_allCallsDone", []);
 },
 get$currentManagerId: function() {
  return this.noSuchMethod$2("get:currentManagerId", []);
 },
 get$name: function() {
  return this.noSuchMethod$2("get:name", []);
 },
 get$parent: function() {
  return this.noSuchMethod$2("get:parent", []);
 },
 get$description: function() {
  return this.noSuchMethod$2("get:description", []);
 },
 get$total: function() {
  return this.noSuchMethod$2("get:total", []);
 },
 get$callbackFunctionsOutstanding: function() {
  return this.noSuchMethod$2("get:callbackFunctionsOutstanding", []);
 },
 get$userAgent: function() {
  return this.noSuchMethod$2("get:userAgent", []);
 },
 get$_set: function() {
  return this.noSuchMethod$2("get:_set", []);
 },
 get$detail: function() {
  return this.noSuchMethod$2("get:detail", []);
 },
 get$fromCommandLine: function() {
  return this.noSuchMethod$2("get:fromCommandLine", []);
 },
 get$hasNext: function() {
  return this.noSuchMethod$2("get:hasNext", []);
 },
 get$_parent: function() {
  return this.noSuchMethod$2("get:_parent", []);
 },
 get$isWorker: function() {
  return this.noSuchMethod$2("get:isWorker", []);
 },
 get$sb: function() {
  return this.noSuchMethod$2("get:sb", []);
 },
 get$topEventLoop: function() {
  return this.noSuchMethod$2("get:topEventLoop", []);
 },
 get$isolates: function() {
  return this.noSuchMethod$2("get:isolates", []);
 },
 get$_listenerName: function() {
  return this.noSuchMethod$2("get:_listenerName", []);
 },
 get$_scopeIndices: function() {
  return this.noSuchMethod$2("get:_scopeIndices", []);
 },
 get$_key: function() {
  return this.noSuchMethod$2("get:_key", []);
 },
 get$socket: function() {
  return this.noSuchMethod$2("get:socket", []);
 },
 get$managers: function() {
  return this.noSuchMethod$2("get:managers", []);
 },
 get$_filtered: function() {
  return this.noSuchMethod$2("get:_filtered", []);
 },
 get$id: function() {
  return this.noSuchMethod$2("get:id", []);
 },
 get$_result: function() {
  return this.noSuchMethod$2("get:_result", []);
 },
 get$count: function() {
  return this.noSuchMethod$2("get:count", []);
 },
 get$nextIsolateId: function() {
  return this.noSuchMethod$2("get:nextIsolateId", []);
 },
 get$_recursiveMatch: function() {
  return this.noSuchMethod$2("get:_recursiveMatch", []);
 },
 get$_element: function() {
  return this.noSuchMethod$2("get:_element", []);
 },
 get$sendPort: function() {
  return this.noSuchMethod$2("get:sendPort", []);
 },
 get$future: function() {
  return this.noSuchMethod$2("get:future", []);
 },
 get$_after: function() {
  return this.noSuchMethod$2("get:_after", []);
 },
 get$isEmpty: function() {
  return this.noSuchMethod$2("get:isEmpty", []);
 },
 get$_next: function() {
  return this.noSuchMethod$2("get:_next", []);
 },
 get$elements: function() {
  return this.noSuchMethod$2("get:elements", []);
 },
 get$ports: function() {
  return this.noSuchMethod$2("get:ports", []);
 },
 get$_lib_value: function() {
  return this.noSuchMethod$2("get:_value", []);
 },
 get$config: function() {
  return this.noSuchMethod$2("get:config", []);
 },
 get$multiLine: function() {
  return this.noSuchMethod$2("get:multiLine", []);
 },
 get$_serialized: function() {
  return this.noSuchMethod$2("get:_serialized", []);
 },
 get$on: function() {
  return this.noSuchMethod$2("get:on", []);
 },
 get$pattern: function() {
  return this.noSuchMethod$2("get:pattern", []);
 },
 get$mainManager: function() {
  return this.noSuchMethod$2("get:mainManager", []);
 },
 get$navigator: function() {
  return this.noSuchMethod$2("get:navigator", []);
 },
 get$_checkCallCount: function() {
  return this.noSuchMethod$2("get:_checkCallCount", []);
 },
 get$_receivePort: function() {
  return this.noSuchMethod$2("get:_receivePort", []);
 },
 get$_lib3_receivePort: function() {
  return this.noSuchMethod$2("get:_receivePort", []);
 },
 get$millisecondsSinceEpoch: function() {
  return this.noSuchMethod$2("get:millisecondsSinceEpoch", []);
 },
 get$body: function() {
  return this.noSuchMethod$2("get:body", []);
 },
 get$value: function() {
  return this.noSuchMethod$2("get:value", []);
 },
 get$_lib3_callback: function() {
  return this.noSuchMethod$2("get:_callback", []);
 },
 get$result: function() {
  return this.noSuchMethod$2("get:result", []);
 },
 get$autoStart: function() {
  return this.noSuchMethod$2("get:autoStart", []);
 },
 get$element: function() {
  return this.noSuchMethod$2("get:element", []);
 },
 get$isComplete: function() {
  return this.noSuchMethod$2("get:isComplete", []);
 },
 get$ignoreCase: function() {
  return this.noSuchMethod$2("get:ignoreCase", []);
 },
 get$Object: function() {
  return this.noSuchMethod$2("get:Object", []);
 },
 get$channels: function() {
  return this.noSuchMethod$2("get:channels", []);
 },
 get$currentContext: function() {
  return this.noSuchMethod$2("get:currentContext", []);
 },
 get$length: function() {
  return this.noSuchMethod$2("get:length", []);
 },
 get$nodes: function() {
  return this.noSuchMethod$2("get:nodes", []);
 },
 get$_tag: function() {
  return this.noSuchMethod$2("get:_tag", []);
 },
 get$stackTrace: function() {
  return this.noSuchMethod$2("get:stackTrace", []);
 },
 get$_workerId: function() {
  return this.noSuchMethod$2("get:_workerId", []);
 },
 get$_futurePort: function() {
  return this.noSuchMethod$2("get:_futurePort", []);
 },
 get$message: function() {
  return this.noSuchMethod$2("get:message", []);
 },
 get$documentElement: function() {
  return this.noSuchMethod$2("get:documentElement", []);
 },
 get$onMessage: function() {
  return this.noSuchMethod$2("get:onMessage", []);
 },
 get$_actualCalls: function() {
  return this.noSuchMethod$2("get:_actualCalls", []);
 },
 get$inMilliseconds: function() {
  return this.noSuchMethod$2("get:inMilliseconds", []);
 },
 get$_registry: function() {
  return this.noSuchMethod$2("get:_registry", []);
 },
 get$attributes: function() {
  return this.noSuchMethod$2("get:attributes", []);
 },
 get$_isolateId: function() {
  return this.noSuchMethod$2("get:_isolateId", []);
 },
 get$_lib3_isolateId: function() {
  return this.noSuchMethod$2("get:_isolateId", []);
 },
 get$rootContext: function() {
  return this.noSuchMethod$2("get:rootContext", []);
 },
 get$_portId: function() {
  return this.noSuchMethod$2("get:_portId", []);
 },
 set$type: function($0) {
  return this.noSuchMethod$2("set:type", [$0]);
 },
 set$rootContext: function($0) {
  return this.noSuchMethod$2("set:rootContext", [$0]);
 },
 set$innerHTML: function($0) {
  return this.noSuchMethod$2("set:innerHTML", [$0]);
 },
 set$text: function($0) {
  return this.noSuchMethod$2("set:text", [$0]);
 },
 set$value: function($0) {
  return this.noSuchMethod$2("set:value", [$0]);
 },
 set$onMessage: function($0) {
  return this.noSuchMethod$2("set:onMessage", [$0]);
 },
 set$_next: function($0) {
  return this.noSuchMethod$2("set:_next", [$0]);
 },
 set$currentContext: function($0) {
  return this.noSuchMethod$2("set:currentContext", [$0]);
 },
 set$length: function($0) {
  return this.noSuchMethod$2("set:length", [$0]);
 },
 set$nextIsolateId: function($0) {
  return this.noSuchMethod$2("set:nextIsolateId", [$0]);
 },
 set$_actualCalls: function($0) {
  return this.noSuchMethod$2("set:_actualCalls", [$0]);
 },
 set$_previous: function($0) {
  return this.noSuchMethod$2("set:_previous", [$0]);
 },
 set$dartProxyDebug: function($0) {
  return this.noSuchMethod$2("set:dartProxyDebug", [$0]);
 },
 set$callbackFunctionsOutstanding: function($0) {
  return this.noSuchMethod$2("set:callbackFunctionsOutstanding", [$0]);
 }
};

$$._StringBufferImpl = {"": ["_buffer", "_length"],
 "super": "Object",
 get$length: function() {
  return this._length;
},
 get$isEmpty: function() {
  return this._length === 0;
},
 add$1: function(obj) {
  var str = $.toString(obj);
  if (str == null || $.get$isEmpty(str) === true)
    return this;
  $.add$1(this._buffer, str);
  this._length = $.add(this._length, $.get$length(str));
  return this;
},
 addAll$1: function(objects) {
  for (var t1 = $.iterator(objects); t1.get$hasNext() === true;)
    this.add$1(t1.next$0());
  return this;
},
 clear$0: function() {
  this._buffer = $.ListImplementation_List(null);
  this._length = 0;
  return this;
},
 toString$0: function() {
  if ($.get$length(this._buffer) === 0)
    return '';
  if ($.get$length(this._buffer) === 1)
    return $.index(this._buffer, 0);
  var result = $.StringImplementation_concatAll(this._buffer);
  $.clear(this._buffer);
  $.add$1(this._buffer, result);
  return result;
},
 _StringBufferImpl$1: function(content$) {
  this.clear$0();
  this.add$1(content$);
}
};

$$.ListIterator = {"": ["i", "list"],
 "super": "Object",
 get$hasNext: function() {
  return this.i < this.list.length;
},
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.NoMoreElementsException$());
  var value = this.list[this.i];
  this.i = this.i + 1;
  return value;
}
};

$$.StackTrace = {"": ["stack"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.stack;
  return !(t1 == null) ? t1 : '';
}
};

$$.Closure = {"": [],
 "super": "Object",
 toString$0: function() {
  return 'Closure';
},
 is$Function: true
};

$$.ConstantMap = {"": ["length?", "_jsObject", "_lib2_keys"],
 "super": "Object",
 containsKey$1: function(key) {
  if (typeof key !== 'string')
    return this.containsKey$1$bailout(1, key);
  if (key === '__proto__')
    return false;
  return $.jsHasOwnProperty(this._jsObject, key);
},
 containsKey$1$bailout: function(state0, key) {
  if ($.eqB(key, '__proto__'))
    return false;
  return $.jsHasOwnProperty(this._jsObject, key);
},
 operator$index$1: function(key) {
  if (this.containsKey$1(key) !== true)
    return;
  return this._jsObject[key];
},
 forEach$1: function(f) {
  $.forEach(this._lib2_keys, new $.ConstantMap_forEach_anon(this, f));
},
 getKeys$0: function() {
  return this._lib2_keys;
},
 getValues$0: function() {
  var result = [];
  $.forEach(this._lib2_keys, new $.ConstantMap_getValues_anon(this, result));
  return result;
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 _throwUnmodifiable$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot modify unmodifiable Map'));
},
 operator$indexSet$2: function(key, val) {
  return this._throwUnmodifiable$0();
},
 remove$1: function(key) {
  return this._throwUnmodifiable$0();
},
 clear$0: function() {
  return this._throwUnmodifiable$0();
},
 is$Map: function() { return true; }
};

$$.MetaInfo = {"": ["_tag?", "_tags", "_set?"],
 "super": "Object"
};

$$.StringMatch = {"": ["_lib2_start", "str", "pattern?"],
 "super": "Object",
 operator$index$1: function(g) {
  return this.group$1(g);
},
 group$1: function(group_) {
  if (!$.eqB(group_, 0))
    throw $.$$throw($.IndexOutOfRangeException$(group_));
  return this.pattern;
}
};

$$._AbstractWorkerEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); }
};

$$._AudioContextEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$complete: function() {
  return this.operator$index$1('complete');
},
 complete$1: function(arg0) { return this.get$complete().call$1(arg0); }
};

$$._BatteryManagerEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl"
};

$$._BodyElementEventsImpl = {"": ["_ptr"],
 "super": "_ElementEventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); },
 get$message: function() {
  return this.operator$index$1('message');
}
};

$$._DOMApplicationCacheEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); }
};

$$._DedicatedWorkerContextEventsImpl = {"": ["_ptr"],
 "super": "_WorkerContextEventsImpl",
 get$message: function() {
  return this.operator$index$1('message');
}
};

$$._FilteredElementList = {"": ["_node", "_childNodes"],
 "super": "Object",
 get$_filtered: function() {
  return $.ListImplementation_List$from($.filter(this._childNodes, new $._FilteredElementList__filtered_anon()));
},
 forEach$1: function(f) {
  $.forEach(this.get$_filtered(), f);
},
 operator$indexSet$2: function(index, value) {
  this.operator$index$1(index).replaceWith$1(value);
},
 set$length: function(newLength) {
  var len = $.get$length(this);
  if ($.geB(newLength, len))
    return;
  else if ($.ltB(newLength, 0))
    throw $.$$throw($.CTC19);
  this.removeRange$2($.sub(newLength, 1), $.sub(len, newLength));
},
 add$1: function(value) {
  $.add$1(this._childNodes, value);
},
 get$add: function() { return new $.BoundClosure(this, 'add$1'); },
 addAll$1: function(collection) {
  $.forEach(collection, this.get$add());
},
 addLast$1: function(value) {
  this.add$1(value);
},
 contains$1: function(element) {
  return typeof element === 'object' && element !== null && element.is$Element() && $.contains$1(this._childNodes, element) === true;
},
 removeRange$2: function(start, rangeLength) {
  $.forEach($.getRange(this.get$_filtered(), start, rangeLength), new $._FilteredElementList_removeRange_anon());
},
 clear$0: function() {
  $.clear(this._childNodes);
},
 removeLast$0: function() {
  var result = this.last$0();
  if (!(result == null))
    result.remove$0();
  return result;
},
 map$1: function(f) {
  return $.map(this.get$_filtered(), f);
},
 filter$1: function(f) {
  return $.filter(this.get$_filtered(), f);
},
 get$isEmpty: function() {
  return $.get$isEmpty(this.get$_filtered());
},
 get$length: function() {
  return $.get$length(this.get$_filtered());
},
 operator$index$1: function(index) {
  return $.index(this.get$_filtered(), index);
},
 iterator$0: function() {
  return $.iterator(this.get$_filtered());
},
 getRange$2: function(start, rangeLength) {
  return $.getRange(this.get$_filtered(), start, rangeLength);
},
 indexOf$2: function(element, start) {
  return $.indexOf$2(this.get$_filtered(), element, start);
},
 last$0: function() {
  return $.last(this.get$_filtered());
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$._DocumentEventsImpl = {"": ["_ptr"],
 "super": "_ElementEventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); },
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); }
};

$$._ChildrenElementList = {"": ["_lib_element?", "_childElements"],
 "super": "Object",
 _toList$0: function() {
  var t1 = this._childElements;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this._toList$0$bailout(1, t1);
  var t3 = t1.length;
  var output = $.ListImplementation_List(t3);
  for (var len = t1.length, i = 0; i < len; ++i) {
    var t2 = t1[i];
    if (i >= t3)
      throw $.ioore(i);
    output[i] = t2;
  }
  return output;
},
 _toList$0$bailout: function(state0, t1) {
  var output = $.ListImplementation_List($.get$length(t1));
  for (var len = $.get$length(t1), i = 0; $.ltB(i, len); ++i) {
    var t2 = $.index(t1, i);
    if (i >= output.length)
      throw $.ioore(i);
    output[i] = t2;
  }
  return output;
},
 contains$1: function(element) {
  return $.contains$1(this._childElements, element);
},
 forEach$1: function(f) {
  for (var t1 = $.iterator(this._childElements); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
},
 filter$1: function(f) {
  var output = [];
  this.forEach$1(new $._ChildrenElementList_filter_anon(f, output));
  return $._FrozenElementList$_wrap(output);
},
 map$1: function(f) {
  var out = [];
  for (var t1 = $.iterator(this); t1.get$hasNext() === true;)
    out.push(f.call$1(t1.next$0()));
  return out;
},
 get$isEmpty: function() {
  return this._lib_element.get$$$dom_firstElementChild() == null;
},
 get$length: function() {
  return $.get$length(this._childElements);
},
 operator$index$1: function(index) {
  return $.index(this._childElements, index);
},
 operator$indexSet$2: function(index, value) {
  this._lib_element.$dom_replaceChild$2(value, $.index(this._childElements, index));
},
 set$length: function(newLength) {
  throw $.$$throw($.UnsupportedError$(''));
},
 add$1: function(value) {
  this._lib_element.$dom_appendChild$1(value);
  return value;
},
 addLast$1: function(value) {
  return this.add$1(value);
},
 iterator$0: function() {
  return $.iterator(this._toList$0());
},
 addAll$1: function(collection) {
  for (var t1 = $.iterator(collection), t2 = this._lib_element; t1.get$hasNext() === true;)
    t2.$dom_appendChild$1(t1.next$0());
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC18);
},
 getRange$2: function(start, rangeLength) {
  return $._FrozenElementList$_wrap($._Lists_getRange(this, start, rangeLength, []));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 clear$0: function() {
  this._lib_element.set$text('');
},
 removeLast$0: function() {
  var result = this.last$0();
  if (!(result == null))
    this._lib_element.$dom_removeChild$1(result);
  return result;
},
 last$0: function() {
  return this._lib_element.get$$$dom_lastElementChild();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$._FrozenElementList = {"": ["_nodeList"],
 "super": "Object",
 contains$1: function(element) {
  for (var t1 = $.iterator(this); t1.get$hasNext() === true;)
    if ($.eqB(t1.next$0(), element))
      return true;
  return false;
},
 forEach$1: function(f) {
  for (var t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
},
 map$1: function(f) {
  var out = [];
  for (var t1 = $.iterator(this); t1.get$hasNext() === true;)
    out.push(f.call$1(t1.next$0()));
  return out;
},
 filter$1: function(f) {
  var out = [];
  for (var t1 = $.iterator(this); t1.get$hasNext() === true;) {
    var t2 = t1.next$0();
    if (f.call$1(t2) === true)
      out.push(t2);
  }
  return out;
},
 get$isEmpty: function() {
  return $.get$isEmpty(this._nodeList);
},
 get$length: function() {
  return $.get$length(this._nodeList);
},
 operator$index$1: function(index) {
  return $.index(this._nodeList, index);
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$(''));
},
 set$length: function(newLength) {
  $.set$length(this._nodeList, newLength);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$(''));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$(''));
},
 iterator$0: function() {
  return $._FrozenElementListIterator$(this);
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$(''));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$(''));
},
 getRange$2: function(start, rangeLength) {
  return $._FrozenElementList$_wrap($.getRange(this._nodeList, start, rangeLength));
},
 indexOf$2: function(element, start) {
  return $.indexOf$2(this._nodeList, element, start);
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$(''));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$(''));
},
 last$0: function() {
  return $.last(this._nodeList);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$._FrozenElementListIterator = {"": ["_lib_list", "_index"],
 "super": "Object",
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.CTC2);
  var t1 = this._lib_list;
  var t2 = this._index;
  this._index = t2 + 1;
  return t1.operator$index$1(t2);
},
 get$hasNext: function() {
  return $.lt(this._index, $.get$length(this._lib_list));
}
};

$$._ElementAttributeMap = {"": ["_lib_element?"],
 "super": "Object",
 containsKey$1: function(key) {
  return this._lib_element.$dom_hasAttribute$1(key);
},
 operator$index$1: function(key) {
  return this._lib_element.$dom_getAttribute$1(key);
},
 operator$indexSet$2: function(key, value) {
  this._lib_element.$dom_setAttribute$2(key, $.S(value));
},
 remove$1: function(key) {
  var t1 = this._lib_element;
  var value = t1.$dom_getAttribute$1(key);
  t1.$dom_removeAttribute$1(key);
  return value;
},
 clear$0: function() {
  var attributes = this._lib_element.get$$$dom_attributes();
  if (typeof attributes !== 'string' && (typeof attributes !== 'object' || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
    return this.clear$0$bailout(1, attributes);
  for (var i = attributes.length - 1; i >= 0; --i) {
    if (i >= attributes.length)
      throw $.ioore(i);
    this.remove$1(attributes[i].get$name());
  }
},
 clear$0$bailout: function(state0, attributes) {
  for (var i = $.sub($.get$length(attributes), 1); $.geB(i, 0); i = $.sub(i, 1))
    this.remove$1($.index(attributes, i).get$name());
},
 forEach$1: function(f) {
  var attributes = this._lib_element.get$$$dom_attributes();
  if (typeof attributes !== 'string' && (typeof attributes !== 'object' || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
    return this.forEach$1$bailout(1, f, attributes);
  for (var len = attributes.length, i = 0; i < len; ++i) {
    if (i >= attributes.length)
      throw $.ioore(i);
    var item = attributes[i];
    f.call$2(item.get$name(), item.get$value());
  }
},
 forEach$1$bailout: function(state0, f, attributes) {
  for (var len = $.get$length(attributes), i = 0; $.ltB(i, len); ++i) {
    var item = $.index(attributes, i);
    f.call$2(item.get$name(), item.get$value());
  }
},
 getKeys$0: function() {
  var attributes = this._lib_element.get$$$dom_attributes();
  if (typeof attributes !== 'string' && (typeof attributes !== 'object' || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
    return this.getKeys$0$bailout(1, attributes);
  var t2 = attributes.length;
  var keys = $.ListImplementation_List(t2);
  for (var len = attributes.length, i = 0; i < len; ++i) {
    if (i >= attributes.length)
      throw $.ioore(i);
    var t1 = attributes[i].get$name();
    if (i >= t2)
      throw $.ioore(i);
    keys[i] = t1;
  }
  return keys;
},
 getKeys$0$bailout: function(state0, attributes) {
  var keys = $.ListImplementation_List($.get$length(attributes));
  for (var len = $.get$length(attributes), i = 0; $.ltB(i, len); ++i) {
    var t1 = $.index(attributes, i).get$name();
    if (i >= keys.length)
      throw $.ioore(i);
    keys[i] = t1;
  }
  return keys;
},
 getValues$0: function() {
  var attributes = this._lib_element.get$$$dom_attributes();
  if (typeof attributes !== 'string' && (typeof attributes !== 'object' || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
    return this.getValues$0$bailout(1, attributes);
  var t2 = attributes.length;
  var values = $.ListImplementation_List(t2);
  for (var len = attributes.length, i = 0; i < len; ++i) {
    if (i >= attributes.length)
      throw $.ioore(i);
    var t1 = attributes[i].get$value();
    if (i >= t2)
      throw $.ioore(i);
    values[i] = t1;
  }
  return values;
},
 getValues$0$bailout: function(state0, attributes) {
  var values = $.ListImplementation_List($.get$length(attributes));
  for (var len = $.get$length(attributes), i = 0; $.ltB(i, len); ++i) {
    var t1 = $.index(attributes, i).get$value();
    if (i >= values.length)
      throw $.ioore(i);
    values[i] = t1;
  }
  return values;
},
 get$length: function() {
  return $.get$length(this._lib_element.get$$$dom_attributes());
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 is$Map: function() { return true; }
};

$$._ElementEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); },
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); }
};

$$._EventSourceEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); },
 get$message: function() {
  return this.operator$index$1('message');
}
};

$$._EventsImpl = {"": ["_ptr"],
 "super": "Object",
 operator$index$1: function(type) {
  return $._EventListenerListImpl$(this._ptr, type);
}
};

$$._EventListenerListImpl = {"": ["_ptr", "_type"],
 "super": "Object",
 add$2: function(listener, useCapture) {
  this._add$2(listener, useCapture);
  return this;
},
 add$1: function(listener) {
  return this.add$2(listener,false)
},
 remove$2: function(listener, useCapture) {
  this._remove$2(listener, useCapture);
  return this;
},
 remove$1: function(listener) {
  return this.remove$2(listener,false)
},
 dispatch$1: function(evt) {
  return this._ptr.$dom_dispatchEvent$1(evt);
},
 _add$2: function(listener, useCapture) {
  this._ptr.$dom_addEventListener$3(this._type, listener, useCapture);
},
 _remove$2: function(listener, useCapture) {
  this._ptr.$dom_removeEventListener$3(this._type, listener, useCapture);
}
};

$$._FileReaderEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); }
};

$$._FileWriterEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); }
};

$$._FrameSetElementEventsImpl = {"": ["_ptr"],
 "super": "_ElementEventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); },
 get$message: function() {
  return this.operator$index$1('message');
}
};

$$._HttpRequestEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); }
};

$$._HttpRequestUploadEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); }
};

$$._IDBDatabaseEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); }
};

$$._IDBOpenDBRequestEventsImpl = {"": ["_ptr"],
 "super": "_IDBRequestEventsImpl"
};

$$._IDBRequestEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); }
};

$$._IDBTransactionEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$complete: function() {
  return this.operator$index$1('complete');
},
 complete$1: function(arg0) { return this.get$complete().call$1(arg0); },
 get$error: function() {
  return this.operator$index$1('error');
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); }
};

$$._IDBVersionChangeRequestEventsImpl = {"": ["_ptr"],
 "super": "_IDBRequestEventsImpl"
};

$$._InputElementEventsImpl = {"": ["_ptr"],
 "super": "_ElementEventsImpl"
};

$$._JavaScriptAudioNodeEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl"
};

$$._LocalWindowEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); },
 get$message: function() {
  return this.operator$index$1('message');
},
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); }
};

$$._MediaElementEventsImpl = {"": ["_ptr"],
 "super": "_ElementEventsImpl"
};

$$._MediaStreamEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl"
};

$$._MediaStreamTrackEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl"
};

$$._MediaStreamTrackListEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl"
};

$$._MessagePortEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$message: function() {
  return this.operator$index$1('message');
}
};

$$._ChildNodeListLazy = {"": ["_this"],
 "super": "Object",
 last$0: function() {
  return this._this.lastChild;
},
 add$1: function(value) {
  this._this.$dom_appendChild$1(value);
},
 addLast$1: function(value) {
  this._this.$dom_appendChild$1(value);
},
 addAll$1: function(collection) {
  for (var t1 = $.iterator(collection), t2 = this._this; t1.get$hasNext() === true;)
    t2.$dom_appendChild$1(t1.next$0());
},
 removeLast$0: function() {
  var result = this.last$0();
  if (!(result == null))
    this._this.$dom_removeChild$1(result);
  return result;
},
 clear$0: function() {
  this._this.set$text('');
},
 operator$indexSet$2: function(index, value) {
  this._this.$dom_replaceChild$2(value, this.operator$index$1(index));
},
 iterator$0: function() {
  return $.iterator(this._this.get$$$dom_childNodes());
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._NodeListWrapper$($._Collections_filter(this, [], f));
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._NodeListWrapper$($._Lists_getRange(this, start, rangeLength, []));
},
 get$length: function() {
  return $.get$length(this._this.get$$$dom_childNodes());
},
 operator$index$1: function(index) {
  return $.index(this._this.get$$$dom_childNodes(), index);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$._ListWrapper = {"": [],
 "super": "Object",
 iterator$0: function() {
  return $.iterator(this._lib_list);
},
 contains$1: function(element) {
  return $.contains$1(this._lib_list, element);
},
 forEach$1: function(f) {
  return $.forEach(this._lib_list, f);
},
 map$1: function(f) {
  return $.map(this._lib_list, f);
},
 filter$1: function(f) {
  return $.filter(this._lib_list, f);
},
 get$isEmpty: function() {
  return $.get$isEmpty(this._lib_list);
},
 get$length: function() {
  return $.get$length(this._lib_list);
},
 operator$index$1: function(index) {
  return $.index(this._lib_list, index);
},
 operator$indexSet$2: function(index, value) {
  $.indexSet(this._lib_list, index, value);
},
 set$length: function(newLength) {
  $.set$length(this._lib_list, newLength);
},
 add$1: function(value) {
  return $.add$1(this._lib_list, value);
},
 addLast$1: function(value) {
  return $.addLast(this._lib_list, value);
},
 addAll$1: function(collection) {
  return $.addAll(this._lib_list, collection);
},
 indexOf$2: function(element, start) {
  return $.indexOf$2(this._lib_list, element, start);
},
 clear$0: function() {
  return $.clear(this._lib_list);
},
 removeLast$0: function() {
  return $.removeLast(this._lib_list);
},
 last$0: function() {
  return $.last(this._lib_list);
},
 getRange$2: function(start, rangeLength) {
  return $.getRange(this._lib_list, start, rangeLength);
},
 removeRange$2: function(start, rangeLength) {
  return $.removeRange(this._lib_list, start, rangeLength);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$._NodeListWrapper = {"": ["_lib_list"],
 "super": "_ListWrapper",
 filter$1: function(f) {
  return $._NodeListWrapper$($.filter(this._lib_list, f));
},
 getRange$2: function(start, rangeLength) {
  return $._NodeListWrapper$($.getRange(this._lib_list, start, rangeLength));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$._NotificationEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$close: function() {
  return this.operator$index$1('close');
},
 close$0: function() { return this.get$close().call$0(); },
 get$error: function() {
  return this.operator$index$1('error');
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); }
};

$$._PeerConnection00EventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl"
};

$$._RTCDataChannelEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$close: function() {
  return this.operator$index$1('close');
},
 close$0: function() { return this.get$close().call$0(); },
 get$error: function() {
  return this.operator$index$1('error');
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); },
 get$message: function() {
  return this.operator$index$1('message');
}
};

$$._RTCPeerConnectionEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl"
};

$$._SVGElementInstanceEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); },
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); }
};

$$._SharedWorkerContextEventsImpl = {"": ["_ptr"],
 "super": "_WorkerContextEventsImpl"
};

$$._SpeechRecognitionEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); },
 get$result: function() {
  return this.operator$index$1('result');
}
};

$$._TextTrackCueEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl"
};

$$._TextTrackEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl"
};

$$._TextTrackListEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl"
};

$$._WebSocketEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$close: function() {
  return this.operator$index$1('close');
},
 close$0: function() { return this.get$close().call$0(); },
 get$error: function() {
  return this.operator$index$1('error');
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); },
 get$message: function() {
  return this.operator$index$1('message');
}
};

$$._WorkerContextEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); }
};

$$._WorkerEventsImpl = {"": ["_ptr"],
 "super": "_AbstractWorkerEventsImpl",
 get$message: function() {
  return this.operator$index$1('message');
}
};

$$._JsSerializer = {"": ["_nextFreeRefId", "_visited"],
 "super": "_Serializer",
 visitSendPortSync$1: function(x) {
  if (!!x.is$_JsSendPortSync)
    return this.visitJsSendPortSync$1(x);
  if (!!x.is$_LocalSendPortSync)
    return this.visitLocalSendPortSync$1(x);
  if (!!x.is$_RemoteSendPortSync)
    return this.visitRemoteSendPortSync$1(x);
  throw $.$$throw('Unknown port type ' + $.S(x));
},
 visitJsSendPortSync$1: function(x) {
  return ['sendport', 'nativejs', x._id];
},
 visitLocalSendPortSync$1: function(x) {
  return ['sendport', 'dart', $.ReceivePortSync__isolateId(), x._receivePort._portId];
},
 visitRemoteSendPortSync$1: function(x) {
  return ['sendport', 'dart', x.get$_receivePort().get$_isolateId(), x.get$_receivePort().get$_portId()];
}
};

$$._JsDeserializer = {"": ["_deserialized"],
 "super": "_Deserializer",
 deserializeSendPort$1: function(x) {
  var tag = $.index(x, 1);
  switch (tag) {
    case 'nativejs':
      return $._JsSendPortSync$($.index(x, 2));
    case 'dart':
      return $.ReceivePortSync__lookup($.index(x, 2), $.index(x, 3));
    default:
      throw $.$$throw('Illegal SendPortSync type: ' + $.S(tag));
  }
}
};

$$._JsSendPortSync = {"": ["_id?"],
 "super": "Object",
 callSync$1: function(message) {
  var serialized = $._JsSerializer$().traverse$1(message);
  var result = $._callPortSync(this._id, serialized);
  return $._JsDeserializer$().deserialize$1(result);
},
 is$_JsSendPortSync: true,
 is$SendPortSync: true
};

$$._RemoteSendPortSync = {"": ["_isolateId?", "_portId?"],
 "super": "Object",
 callSync$1: function(message) {
  var serialized = $._JsSerializer$().traverse$1(message);
  var result = $._RemoteSendPortSync__call(this._isolateId, this._portId, serialized);
  return $._JsDeserializer$().deserialize$1(result);
},
 is$_RemoteSendPortSync: true,
 is$SendPortSync: true
};

$$._LocalSendPortSync = {"": ["_receivePort?"],
 "super": "Object",
 callSync$1: function(message) {
  var t1 = $._JsSerializer$().traverse$1(message);
  var copy = $._JsDeserializer$().deserialize$1(t1);
  var result = this._receivePort._callback$1(copy);
  t1 = $._JsSerializer$().traverse$1(result);
  return $._JsDeserializer$().deserialize$1(t1);
},
 is$_LocalSendPortSync: true,
 is$SendPortSync: true
};

$$.ReceivePortSync = {"": ["_portId?", "_callback?", "_listener"],
 "super": "Object",
 _callback$1: function(arg0) { return this._callback.call$1(arg0); },
 _callback$2: function(arg0, arg1) { return this._callback.call$2(arg0, arg1); },
 _callback$1: function(arg0) { return this._callback.call$1(arg0); },
 get$_listenerName: function() {
  return $.ReceivePortSync__getListenerName($.ReceivePortSync__isolateId(), this._portId);
},
 receive$1: function(callback) {
  this._callback = callback;
  if (this._listener == null) {
    this._listener = new $.ReceivePortSync_receive_anon(this);
    $.add$1($.index($.window().get$on(), this.get$_listenerName()), this._listener);
  }
},
 close$0: function() {
  $.ReceivePortSync__portMap.remove$1(this._portId);
  if (!(this._listener == null))
    $.index($.window().get$on(), this.get$_listenerName()).remove$1(this._listener);
},
 toSendPort$0: function() {
  return $._LocalSendPortSync$_internal(this);
},
 ReceivePortSync$0: function() {
  if ($.ReceivePortSync__portIdCount == null) {
    $.ReceivePortSync__portIdCount = 0;
    $.ReceivePortSync__portMap = $.HashMapImplementation$();
  }
  var t1 = $.ReceivePortSync__portIdCount;
  $.ReceivePortSync__portIdCount = $.add(t1, 1);
  this._portId = t1;
  $.indexSet($.ReceivePortSync__portMap, this._portId, this);
}
};

$$._MessageTraverserVisitedMap = {"": [],
 "super": "Object",
 operator$index$1: function(object) {
  return;
},
 operator$indexSet$2: function(object, info) {
},
 reset$0: function() {
},
 cleanup$0: function() {
}
};

$$._MessageTraverser = {"": [],
 "super": "Object",
 traverse$1: function(x) {
  if ($._MessageTraverser_isPrimitive(x))
    return this.visitPrimitive$1(x);
  this._visited.reset$0();
  var result = null;
  try {
    result = this._dispatch$1(x);
  } finally {
    this._visited.cleanup$0();
  }
  return result;
},
 _dispatch$1: function(x) {
  if ($._MessageTraverser_isPrimitive(x))
    return this.visitPrimitive$1(x);
  if (typeof x === 'object' && x !== null && (x.constructor === Array || x.is$List()))
    return this.visitList$1(x);
  if (typeof x === 'object' && x !== null && x.is$Map())
    return this.visitMap$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPort)
    return this.visitSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPortSync)
    return this.visitSendPortSync$1(x);
  return this.visitObject$1(x);
},
 visitObject$1: function(x) {
  throw $.$$throw('Message serialization: Illegal value ' + $.S(x) + ' passed');
}
};

$$._Serializer = {"": [],
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
  return x;
},
 visitList$1: function(list) {
  var copyId = this._visited.operator$index$1(list);
  if (!(copyId == null))
    return ['ref', copyId];
  var id = this._nextFreeRefId;
  this._nextFreeRefId = id + 1;
  this._visited.operator$indexSet$2(list, id);
  return ['list', id, this._serializeList$1(list)];
},
 visitMap$1: function(map) {
  var copyId = this._visited.operator$index$1(map);
  if (!(copyId == null))
    return ['ref', copyId];
  var id = this._nextFreeRefId;
  this._nextFreeRefId = id + 1;
  this._visited.operator$indexSet$2(map, id);
  return ['map', id, this._serializeList$1(map.getKeys$0()), this._serializeList$1(map.getValues$0())];
},
 _serializeList$1: function(list) {
  if (typeof list !== 'string' && (typeof list !== 'object' || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior()))
    return this._serializeList$1$bailout(1, list);
  var len = list.length;
  var result = $.ListImplementation_List(len);
  for (var i = 0; i < len; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    result[i] = this._dispatch$1(list[i]);
  }
  return result;
},
 _serializeList$1$bailout: function(state0, list) {
  var len = $.get$length(list);
  var result = $.ListImplementation_List(len);
  for (var i = 0; $.ltB(i, len); ++i) {
    var t1 = this._dispatch$1($.index(list, i));
    if (i >= result.length)
      throw $.ioore(i);
    result[i] = t1;
  }
  return result;
}
};

$$._Deserializer = {"": [],
 "super": "Object",
 deserialize$1: function(x) {
  if ($._Deserializer_isPrimitive(x))
    return x;
  this._deserialized = $.HashMapImplementation$();
  return this._deserializeHelper$1(x);
},
 _deserializeHelper$1: function(x) {
  if ($._Deserializer_isPrimitive(x))
    return x;
  switch ($.index(x, 0)) {
    case 'ref':
      return this._deserializeRef$1(x);
    case 'list':
      return this._deserializeList$1(x);
    case 'map':
      return this._deserializeMap$1(x);
    case 'sendport':
      return this.deserializeSendPort$1(x);
    default:
      return this.deserializeObject$1(x);
  }
},
 _deserializeRef$1: function(x) {
  var id = $.index(x, 1);
  return $.index(this._deserialized, id);
},
 _deserializeList$1: function(x) {
  var id = $.index(x, 1);
  var dartList = $.index(x, 2);
  if (typeof dartList !== 'object' || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !dartList.is$JavaScriptIndexingBehavior())
    return this._deserializeList$1$bailout(1, dartList, id);
  $.indexSet(this._deserialized, id, dartList);
  var len = dartList.length;
  for (var i = 0; i < len; ++i) {
    if (i >= dartList.length)
      throw $.ioore(i);
    var t1 = this._deserializeHelper$1(dartList[i]);
    if (i >= dartList.length)
      throw $.ioore(i);
    dartList[i] = t1;
  }
  return dartList;
},
 _deserializeList$1$bailout: function(state0, dartList, id) {
  $.indexSet(this._deserialized, id, dartList);
  var len = $.get$length(dartList);
  for (var i = 0; $.ltB(i, len); ++i)
    $.indexSet(dartList, i, this._deserializeHelper$1($.index(dartList, i)));
  return dartList;
},
 _deserializeMap$1: function(x) {
  var result = $.HashMapImplementation$();
  var id = $.index(x, 1);
  $.indexSet(this._deserialized, id, result);
  var keys = $.index(x, 2);
  if (typeof keys !== 'string' && (typeof keys !== 'object' || keys === null || keys.constructor !== Array && !keys.is$JavaScriptIndexingBehavior()))
    return this._deserializeMap$1$bailout(1, x, result, keys);
  var values = $.index(x, 3);
  if (typeof values !== 'string' && (typeof values !== 'object' || values === null || values.constructor !== Array && !values.is$JavaScriptIndexingBehavior()))
    return this._deserializeMap$1$bailout(2, values, result, keys);
  var len = keys.length;
  for (var i = 0; i < len; ++i) {
    if (i >= keys.length)
      throw $.ioore(i);
    var key = this._deserializeHelper$1(keys[i]);
    if (i >= values.length)
      throw $.ioore(i);
    result.operator$indexSet$2(key, this._deserializeHelper$1(values[i]));
  }
  return result;
},
 _deserializeMap$1$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      var x = env0;
      result = env1;
      keys = env2;
      break;
    case 2:
      values = env0;
      result = env1;
      keys = env2;
      break;
  }
  switch (state0) {
    case 0:
      var result = $.HashMapImplementation$();
      var id = $.index(x, 1);
      $.indexSet(this._deserialized, id, result);
      var keys = $.index(x, 2);
    case 1:
      state0 = 0;
      var values = $.index(x, 3);
    case 2:
      state0 = 0;
      var len = $.get$length(keys);
      for (var i = 0; $.ltB(i, len); ++i)
        result.operator$indexSet$2(this._deserializeHelper$1($.index(keys, i)), this._deserializeHelper$1($.index(values, i)));
      return result;
  }
},
 deserializeObject$1: function(x) {
  throw $.$$throw('Unexpected serialized object');
}
};

$$._DOMWindowCrossFrameImpl = {"": ["_window"],
 "super": "Object",
 get$parent: function() {
  return $._DOMWindowCrossFrameImpl__createSafe(this._window.parent);
},
 close$0: function() {
  return this._window.close();
}
};

$$._FixedSizeListIterator = {"": ["_lib_length", "_array", "_pos"],
 "super": "_VariableSizeListIterator",
 get$hasNext: function() {
  return $.gt(this._lib_length, this._pos);
}
};

$$._VariableSizeListIterator = {"": [],
 "super": "Object",
 get$hasNext: function() {
  return $.gt($.get$length(this._array), this._pos);
},
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.CTC2);
  var t1 = this._array;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.next$0$bailout(1, t1);
  var t3 = this._pos;
  this._pos = t3 + 1;
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  return t1[t3];
},
 next$0$bailout: function(state0, t1) {
  var t3 = this._pos;
  this._pos = t3 + 1;
  return $.index(t1, t3);
}
};

$$._Manager = {"": ["nextIsolateId=", "currentManagerId?", "nextManagerId", "currentContext=", "rootContext=", "topEventLoop?", "fromCommandLine?", "isWorker?", "supportsWorkers", "isolates?", "mainManager?", "managers?"],
 "super": "Object",
 get$useWorkers: function() {
  return this.supportsWorkers;
},
 get$needSerialization: function() {
  return this.get$useWorkers();
},
 _nativeDetectEnvironment$0: function() {
  this.isWorker = $isWorker;
  this.supportsWorkers = $supportsWorkers;
  this.fromCommandLine = typeof(window) == 'undefined';
},
 _nativeInitWorkerMessageHandler$0: function() {
  $globalThis.onmessage = function (e) {
  _IsolateNatives._processWorkerMessage(this.mainManager, e);
};
},
 maybeCloseWorker$0: function() {
  if ($.get$isEmpty(this.isolates) === true)
    this.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(['command', 'close'])));
},
 _Manager$0: function() {
  this._nativeDetectEnvironment$0();
  this.topEventLoop = $._EventLoop$();
  this.isolates = $.HashMapImplementation$();
  this.managers = $.HashMapImplementation$();
  if (this.isWorker === true) {
    this.mainManager = $._MainManagerStub$();
    this._nativeInitWorkerMessageHandler$0();
  }
}
};

$$._IsolateContext = {"": ["id?", "ports?", "isolateStatics"],
 "super": "Object",
 initGlobals$0: function() {
  $initGlobals(this);
},
 eval$1: function(code) {
  var old = $._globalState().get$currentContext();
  $._globalState().set$currentContext(this);
  this._setGlobals$0();
  var result = null;
  try {
    result = code.call$0();
  } finally {
    var t1 = old;
    $._globalState().set$currentContext(t1);
    if (!(old == null))
      old._setGlobals$0();
  }
  return result;
},
 _setGlobals$0: function() {
  $setGlobals(this);
},
 lookup$1: function(portId) {
  return $.index(this.ports, portId);
},
 register$2: function(portId, port) {
  if (this.ports.containsKey$1(portId) === true)
    throw $.$$throw($._ExceptionImplementation$('Registry: ports must be registered only once.'));
  $.indexSet(this.ports, portId, port);
  $.indexSet($._globalState().get$isolates(), this.id, this);
},
 unregister$1: function(portId) {
  this.ports.remove$1(portId);
  if ($.get$isEmpty(this.ports) === true)
    $._globalState().get$isolates().remove$1(this.id);
},
 _IsolateContext$0: function() {
  var t1 = $._globalState();
  var t2 = t1.get$nextIsolateId();
  t1.set$nextIsolateId($.add(t2, 1));
  this.id = t2;
  this.ports = $.HashMapImplementation$();
  this.initGlobals$0();
}
};

$$._EventLoop = {"": ["events"],
 "super": "Object",
 enqueue$3: function(isolate, fn, msg) {
  $.addLast(this.events, $._IsolateEvent$(isolate, fn, msg));
},
 dequeue$0: function() {
  var t1 = this.events;
  if ($.get$isEmpty(t1) === true)
    return;
  return t1.removeFirst$0();
},
 runIteration$0: function() {
  var event$ = this.dequeue$0();
  if (event$ == null) {
    if ($._globalState().get$isWorker() === true)
      $._globalState().maybeCloseWorker$0();
    else if (!($._globalState().get$rootContext() == null) && $._globalState().get$isolates().containsKey$1($._globalState().get$rootContext().get$id()) === true && $._globalState().get$fromCommandLine() === true && $.get$isEmpty($._globalState().get$rootContext().get$ports()) === true)
      throw $.$$throw($._ExceptionImplementation$('Program exited with open ReceivePorts.'));
    return false;
  }
  event$.process$0();
  return true;
},
 _runHelper$0: function() {
  if (!($._window() == null))
    new $._EventLoop__runHelper_next(this).call$0();
  else
    for (; this.runIteration$0() === true;)
      ;
},
 run$0: function() {
  if ($._globalState().get$isWorker() !== true)
    this._runHelper$0();
  else
    try {
      this._runHelper$0();
    } catch (exception) {
      var t1 = $.unwrapException(exception);
      var e = t1;
      var trace = $.getTraceFromException(exception);
      $._globalState().get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(['command', 'error', 'msg', $.S(e) + '\n' + $.S(trace)])));
    }

}
};

$$._IsolateEvent = {"": ["isolate", "fn", "message?"],
 "super": "Object",
 process$0: function() {
  this.isolate.eval$1(this.fn);
}
};

$$._MainManagerStub = {"": [],
 "super": "Object",
 get$id: function() {
  return 0;
},
 postMessage$1: function(msg) {
  $globalThis.postMessage(msg);
}
};

$$._BaseSendPort = {"": ["_lib3_isolateId?"],
 "super": "Object",
 _checkReplyTo$1: function(replyTo) {
  if (!(replyTo == null) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_NativeJsSendPort) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_WorkerSendPort) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_BufferingSendPort))
    throw $.$$throw($._ExceptionImplementation$('SendPort.send: Illegal replyTo port type'));
},
 call$1: function(message) {
  var completer = $.Completer_Completer();
  var port = $._ReceivePortImpl$();
  this.send$2(message, port.toSendPort$0());
  port.receive$1(new $._BaseSendPort_call_anon(port, completer));
  return completer.get$future();
},
 is$SendPort: true
};

$$._NativeJsSendPort = {"": ["_lib3_receivePort?", "_lib3_isolateId"],
 "super": "_BaseSendPort",
 send$2: function(message, replyTo) {
  $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_anon(this, message, replyTo));
},
 operator$eq$1: function(other) {
  return typeof other === 'object' && other !== null && !!other.is$_NativeJsSendPort && $.eqB(this._lib3_receivePort, other._lib3_receivePort);
},
 get$hashCode: function() {
  return this._lib3_receivePort.get$_lib3_id();
},
 is$_NativeJsSendPort: true,
 is$SendPort: true
};

$$._WorkerSendPort = {"": ["_workerId?", "_receivePortId", "_lib3_isolateId"],
 "super": "_BaseSendPort",
 send$2: function(message, replyTo) {
  $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_anon(this, message, replyTo));
},
 operator$eq$1: function(other) {
  if (typeof other === 'object' && other !== null && !!other.is$_WorkerSendPort)
    var t1 = $.eqB(this._workerId, other._workerId) && $.eqB(this._lib3_isolateId, other._lib3_isolateId) && $.eqB(this._receivePortId, other._receivePortId);
  else
    t1 = false;
  return t1;
},
 get$hashCode: function() {
  return $.xor($.xor($.shl(this._workerId, 16), $.shl(this._lib3_isolateId, 8)), this._receivePortId);
},
 is$_WorkerSendPort: true,
 is$SendPort: true
};

$$._ReceivePortImpl = {"": ["_lib3_id?", "_lib3_callback?"],
 "super": "Object",
 _lib3_callback$1: function(arg0) { return this._lib3_callback.call$1(arg0); },
 _lib3_callback$2: function(arg0, arg1) { return this._lib3_callback.call$2(arg0, arg1); },
 _lib3_callback$1: function(arg0) { return this._lib3_callback.call$1(arg0); },
 receive$1: function(onMessage) {
  this._lib3_callback = onMessage;
},
 close$0: function() {
  this._lib3_callback = null;
  $._globalState().get$currentContext().unregister$1(this._lib3_id);
},
 toSendPort$0: function() {
  return $._NativeJsSendPort$(this, $._globalState().get$currentContext().get$id());
},
 _ReceivePortImpl$0: function() {
  $._globalState().get$currentContext().register$2(this._lib3_id, this);
}
};

$$._PendingSendPortFinder = {"": ["ports?", "_lib3_visited"],
 "super": "_MessageTraverser0",
 visitPrimitive$1: function(x) {
},
 visitList$1: function(list) {
  if (!($.index(this._lib3_visited, list) == null))
    return;
  $.indexSet(this._lib3_visited, list, true);
  $.forEach(list, new $._PendingSendPortFinder_visitList_anon(this));
},
 visitMap$1: function(map) {
  if (!($.index(this._lib3_visited, map) == null))
    return;
  $.indexSet(this._lib3_visited, map, true);
  $.forEach(map.getValues$0(), new $._PendingSendPortFinder_visitMap_anon(this));
},
 visitSendPort$1: function(port) {
  if (!!port.is$_BufferingSendPort && port._lib3_port == null)
    this.ports.push(port.get$_futurePort());
},
 _PendingSendPortFinder$0: function() {
  this._lib3_visited = $._JsVisitedMap$();
}
};

$$._JsSerializer0 = {"": ["_lib3_nextFreeRefId", "_lib3_visited"],
 "super": "_Serializer0",
 visitSendPort$1: function(x) {
  if (typeof x === 'object' && x !== null && !!x.is$_NativeJsSendPort)
    return this.visitNativeJsSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_WorkerSendPort)
    return this.visitWorkerSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_BufferingSendPort)
    return this.visitBufferingSendPort$1(x);
  throw $.$$throw('Illegal underlying port ' + $.S(x));
},
 visitNativeJsSendPort$1: function(port) {
  return ['sendport', $._globalState().get$currentManagerId(), port._lib3_isolateId, port._lib3_receivePort.get$_lib3_id()];
},
 visitWorkerSendPort$1: function(port) {
  return ['sendport', port._workerId, port._lib3_isolateId, port._receivePortId];
},
 visitBufferingSendPort$1: function(port) {
  var t1 = port._lib3_port;
  if (!(t1 == null))
    return this.visitSendPort$1(t1);
  else
    throw $.$$throw('internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.');
},
 _JsSerializer$0: function() {
  this._lib3_visited = $._JsVisitedMap$();
}
};

$$._JsCopier = {"": ["_lib3_visited"],
 "super": "_Copier",
 visitSendPort$1: function(x) {
  if (typeof x === 'object' && x !== null && !!x.is$_NativeJsSendPort)
    return this.visitNativeJsSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_WorkerSendPort)
    return this.visitWorkerSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_BufferingSendPort)
    return this.visitBufferingSendPort$1(x);
  throw $.$$throw('Illegal underlying port ' + $.S(this.get$p()));
},
 visitNativeJsSendPort$1: function(port) {
  return $._NativeJsSendPort$(port._lib3_receivePort, port._lib3_isolateId);
},
 visitWorkerSendPort$1: function(port) {
  return $._WorkerSendPort$(port._workerId, port._lib3_isolateId, port._receivePortId);
},
 visitBufferingSendPort$1: function(port) {
  var t1 = port._lib3_port;
  if (!(t1 == null))
    return this.visitSendPort$1(t1);
  else
    throw $.$$throw('internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.');
},
 _JsCopier$0: function() {
  this._lib3_visited = $._JsVisitedMap$();
}
};

$$._JsDeserializer0 = {"": ["_lib3_deserialized"],
 "super": "_Deserializer0",
 deserializeSendPort$1: function(x) {
  var managerId = $.index(x, 1);
  var isolateId = $.index(x, 2);
  var receivePortId = $.index(x, 3);
  if ($.eqB(managerId, $._globalState().get$currentManagerId())) {
    var isolate = $.index($._globalState().get$isolates(), isolateId);
    if (isolate == null)
      return;
    return $._NativeJsSendPort$(isolate.lookup$1(receivePortId), isolateId);
  } else
    return $._WorkerSendPort$(managerId, isolateId, receivePortId);
}
};

$$._JsVisitedMap = {"": ["tagged"],
 "super": "Object",
 operator$index$1: function(object) {
  return this._getAttachedInfo$1(object);
},
 operator$indexSet$2: function(object, info) {
  $.add$1(this.tagged, object);
  this._setAttachedInfo$2(object, info);
},
 reset$0: function() {
  this.tagged = $.ListImplementation_List(null);
},
 cleanup$0: function() {
  var length$ = $.get$length(this.tagged);
  if (typeof length$ !== 'number')
    return this.cleanup$0$bailout(1, length$);
  var i = 0;
  for (; i < length$; ++i)
    this._clearAttachedInfo$1($.index(this.tagged, i));
  this.tagged = null;
},
 cleanup$0$bailout: function(state0, length$) {
  var i = 0;
  for (; $.ltB(i, length$); ++i)
    this._clearAttachedInfo$1($.index(this.tagged, i));
  this.tagged = null;
},
 _clearAttachedInfo$1: function(o) {
  o['__MessageTraverser__attached_info__'] = null;
},
 _setAttachedInfo$2: function(o, info) {
  o['__MessageTraverser__attached_info__'] = info;
},
 _getAttachedInfo$1: function(o) {
  return o['__MessageTraverser__attached_info__'];
}
};

$$._MessageTraverserVisitedMap0 = {"": [],
 "super": "Object",
 operator$index$1: function(object) {
  return;
},
 operator$indexSet$2: function(object, info) {
},
 reset$0: function() {
},
 cleanup$0: function() {
}
};

$$._MessageTraverser0 = {"": [],
 "super": "Object",
 traverse$1: function(x) {
  if ($._MessageTraverser_isPrimitive0(x))
    return this.visitPrimitive$1(x);
  this._lib3_visited.reset$0();
  var result = null;
  try {
    result = this._lib3_dispatch$1(x);
  } finally {
    this._lib3_visited.cleanup$0();
  }
  return result;
},
 _lib3_dispatch$1: function(x) {
  if ($._MessageTraverser_isPrimitive0(x))
    return this.visitPrimitive$1(x);
  if (typeof x === 'object' && x !== null && (x.constructor === Array || x.is$List()))
    return this.visitList$1(x);
  if (typeof x === 'object' && x !== null && x.is$Map())
    return this.visitMap$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPort)
    return this.visitSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPortSync)
    return this.visitSendPortSync$1(x);
  return this.visitObject$1(x);
},
 visitObject$1: function(x) {
  throw $.$$throw('Message serialization: Illegal value ' + $.S(x) + ' passed');
}
};

$$._Copier = {"": [],
 "super": "_MessageTraverser0",
 visitPrimitive$1: function(x) {
  return x;
},
 visitList$1: function(list) {
  if (typeof list !== 'object' || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior())
    return this.visitList$1$bailout(1, list);
  var copy = $.index(this._lib3_visited, list);
  if (!(copy == null))
    return copy;
  var len = list.length;
  copy = $.ListImplementation_List(len);
  $.indexSet(this._lib3_visited, list, copy);
  for (var i = 0; i < len; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    copy[i] = this._lib3_dispatch$1(list[i]);
  }
  return copy;
},
 visitList$1$bailout: function(state0, list) {
  var copy = $.index(this._lib3_visited, list);
  if (!(copy == null))
    return copy;
  var len = $.get$length(list);
  copy = $.ListImplementation_List(len);
  $.indexSet(this._lib3_visited, list, copy);
  for (var i = 0; $.ltB(i, len); ++i) {
    var t1 = this._lib3_dispatch$1($.index(list, i));
    if (i >= copy.length)
      throw $.ioore(i);
    copy[i] = t1;
  }
  return copy;
},
 visitMap$1: function(map) {
  var t1 = {};
  t1.copy_10 = $.index(this._lib3_visited, map);
  var t2 = t1.copy_10;
  if (!(t2 == null))
    return t2;
  t1.copy_10 = $.HashMapImplementation$();
  $.indexSet(this._lib3_visited, map, t1.copy_10);
  map.forEach$1(new $._Copier_visitMap_anon(this, t1));
  return t1.copy_10;
}
};

$$._Serializer0 = {"": [],
 "super": "_MessageTraverser0",
 visitPrimitive$1: function(x) {
  return x;
},
 visitList$1: function(list) {
  var copyId = $.index(this._lib3_visited, list);
  if (!(copyId == null))
    return ['ref', copyId];
  var id = this._lib3_nextFreeRefId;
  this._lib3_nextFreeRefId = id + 1;
  $.indexSet(this._lib3_visited, list, id);
  return ['list', id, this._lib3_serializeList$1(list)];
},
 visitMap$1: function(map) {
  var copyId = $.index(this._lib3_visited, map);
  if (!(copyId == null))
    return ['ref', copyId];
  var id = this._lib3_nextFreeRefId;
  this._lib3_nextFreeRefId = id + 1;
  $.indexSet(this._lib3_visited, map, id);
  return ['map', id, this._lib3_serializeList$1(map.getKeys$0()), this._lib3_serializeList$1(map.getValues$0())];
},
 _lib3_serializeList$1: function(list) {
  if (typeof list !== 'string' && (typeof list !== 'object' || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior()))
    return this._lib3_serializeList$1$bailout(1, list);
  var len = list.length;
  var result = $.ListImplementation_List(len);
  for (var i = 0; i < len; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    result[i] = this._lib3_dispatch$1(list[i]);
  }
  return result;
},
 _lib3_serializeList$1$bailout: function(state0, list) {
  var len = $.get$length(list);
  var result = $.ListImplementation_List(len);
  for (var i = 0; $.ltB(i, len); ++i) {
    var t1 = this._lib3_dispatch$1($.index(list, i));
    if (i >= result.length)
      throw $.ioore(i);
    result[i] = t1;
  }
  return result;
}
};

$$._Deserializer0 = {"": [],
 "super": "Object",
 deserialize$1: function(x) {
  if ($._Deserializer_isPrimitive0(x))
    return x;
  this._lib3_deserialized = $.HashMapImplementation$();
  return this._lib3_deserializeHelper$1(x);
},
 _lib3_deserializeHelper$1: function(x) {
  if ($._Deserializer_isPrimitive0(x))
    return x;
  switch ($.index(x, 0)) {
    case 'ref':
      return this._lib3_deserializeRef$1(x);
    case 'list':
      return this._lib3_deserializeList$1(x);
    case 'map':
      return this._lib3_deserializeMap$1(x);
    case 'sendport':
      return this.deserializeSendPort$1(x);
    default:
      return this.deserializeObject$1(x);
  }
},
 _lib3_deserializeRef$1: function(x) {
  var id = $.index(x, 1);
  return $.index(this._lib3_deserialized, id);
},
 _lib3_deserializeList$1: function(x) {
  var id = $.index(x, 1);
  var dartList = $.index(x, 2);
  if (typeof dartList !== 'object' || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !dartList.is$JavaScriptIndexingBehavior())
    return this._lib3_deserializeList$1$bailout(1, dartList, id);
  $.indexSet(this._lib3_deserialized, id, dartList);
  var len = dartList.length;
  for (var i = 0; i < len; ++i) {
    if (i >= dartList.length)
      throw $.ioore(i);
    var t1 = this._lib3_deserializeHelper$1(dartList[i]);
    if (i >= dartList.length)
      throw $.ioore(i);
    dartList[i] = t1;
  }
  return dartList;
},
 _lib3_deserializeList$1$bailout: function(state0, dartList, id) {
  $.indexSet(this._lib3_deserialized, id, dartList);
  var len = $.get$length(dartList);
  for (var i = 0; $.ltB(i, len); ++i)
    $.indexSet(dartList, i, this._lib3_deserializeHelper$1($.index(dartList, i)));
  return dartList;
},
 _lib3_deserializeMap$1: function(x) {
  var result = $.HashMapImplementation$();
  var id = $.index(x, 1);
  $.indexSet(this._lib3_deserialized, id, result);
  var keys = $.index(x, 2);
  if (typeof keys !== 'string' && (typeof keys !== 'object' || keys === null || keys.constructor !== Array && !keys.is$JavaScriptIndexingBehavior()))
    return this._lib3_deserializeMap$1$bailout(1, x, result, keys);
  var values = $.index(x, 3);
  if (typeof values !== 'string' && (typeof values !== 'object' || values === null || values.constructor !== Array && !values.is$JavaScriptIndexingBehavior()))
    return this._lib3_deserializeMap$1$bailout(2, values, result, keys);
  var len = keys.length;
  for (var i = 0; i < len; ++i) {
    if (i >= keys.length)
      throw $.ioore(i);
    var key = this._lib3_deserializeHelper$1(keys[i]);
    if (i >= values.length)
      throw $.ioore(i);
    result.operator$indexSet$2(key, this._lib3_deserializeHelper$1(values[i]));
  }
  return result;
},
 _lib3_deserializeMap$1$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      var x = env0;
      result = env1;
      keys = env2;
      break;
    case 2:
      values = env0;
      result = env1;
      keys = env2;
      break;
  }
  switch (state0) {
    case 0:
      var result = $.HashMapImplementation$();
      var id = $.index(x, 1);
      $.indexSet(this._lib3_deserialized, id, result);
      var keys = $.index(x, 2);
    case 1:
      state0 = 0;
      var values = $.index(x, 3);
    case 2:
      state0 = 0;
      var len = $.get$length(keys);
      for (var i = 0; $.ltB(i, len); ++i)
        result.operator$indexSet$2(this._lib3_deserializeHelper$1($.index(keys, i)), this._lib3_deserializeHelper$1($.index(values, i)));
      return result;
  }
},
 deserializeObject$1: function(x) {
  throw $.$$throw('Unexpected serialized object');
}
};

$$._Timer = {"": ["_once", "_handle"],
 "super": "Object",
 _Timer$repeating$2: function(milliSeconds, callback) {
  this._handle = $._window().setInterval$2(new $.anon2(this, callback), milliSeconds);
},
 _Timer$2: function(milliSeconds, callback) {
  this._handle = $._window().setTimeout$2(new $.anon1(this, callback), milliSeconds);
}
};

$$.JsonUnsupportedObjectError = {"": ["unsupportedObject", "cause"],
 "super": "Object",
 toString$0: function() {
  if (!(this.cause == null))
    return 'Calling toJson method on object failed.';
  else
    return 'Object toJson method returns non-serializable value.';
}
};

$$._JsonParser = {"": ["json", "length?", "position"],
 "super": "Object",
 parseToplevel$0: function() {
  var result = this.parseValue$0();
  if (!(this.token$0() == null))
    this.error$1('Junk at the end of JSON input');
  return result;
},
 parseValue$0: function() {
  var token = this.token$0();
  if (token == null)
    this.error$1('Nothing to parse');
  switch (token) {
    case 34:
      return this.parseString$0();
    case 45:
      return this.parseNumber$0();
    case 110:
      return this.expectKeyword$2('null', null);
    case 102:
      return this.expectKeyword$2('false', false);
    case 116:
      return this.expectKeyword$2('true', true);
    case 123:
      return this.parseObject$0();
    case 91:
      return this.parseList$0();
    default:
      this.error$1('Unexpected token');
  }
},
 expectKeyword$2: function(word, value) {
  for (var t1 = word.length, i = 0; i < t1; ++i) {
    if (!$.eqB(this.char$0(), $.charCodeAt(word, i)))
      this.error$1('Expected keyword \'' + word + '\'');
    this.position = $.add(this.position, 1);
  }
  return value;
},
 parseObject$0: function() {
  var object = $.makeLiteralMap([]);
  if (typeof object !== 'object' || object === null || (object.constructor !== Array || !!object.immutable$list) && !object.is$JavaScriptIndexingBehavior())
    return this.parseObject$0$bailout(1, object);
  this.position = $.add(this.position, 1);
  if (this.isToken$1(125) !== true) {
    for (; true;) {
      var key = this.parseString$0();
      if (this.isToken$1(58) !== true)
        this.error$1('Expected \':\' when parsing object');
      this.position = $.add(this.position, 1);
      var t1 = this.parseValue$0();
      if (key !== (key | 0))
        throw $.iae(key);
      if (key < 0 || key >= object.length)
        throw $.ioore(key);
      object[key] = t1;
      if (this.isToken$1(44) !== true)
        break;
      this.position = $.add(this.position, 1);
    }
    if (this.isToken$1(125) !== true)
      this.error$1('Expected \'}\' at end of object');
  }
  this.position = $.add(this.position, 1);
  return object;
},
 parseObject$0$bailout: function(state0, object) {
  this.position = $.add(this.position, 1);
  if (this.isToken$1(125) !== true) {
    for (; true;) {
      var key = this.parseString$0();
      if (this.isToken$1(58) !== true)
        this.error$1('Expected \':\' when parsing object');
      this.position = $.add(this.position, 1);
      $.indexSet(object, key, this.parseValue$0());
      if (this.isToken$1(44) !== true)
        break;
      this.position = $.add(this.position, 1);
    }
    if (this.isToken$1(125) !== true)
      this.error$1('Expected \'}\' at end of object');
  }
  this.position = $.add(this.position, 1);
  return object;
},
 parseList$0: function() {
  var list = [];
  this.position = $.add(this.position, 1);
  if (this.isToken$1(93) !== true) {
    for (; true;) {
      list.push(this.parseValue$0());
      if (this.isToken$1(44) !== true)
        break;
      this.position = $.add(this.position, 1);
    }
    if (this.isToken$1(93) !== true)
      this.error$1('Expected \']\' at end of list');
  }
  this.position = $.add(this.position, 1);
  return list;
},
 parseString$0: function() {
  if (this.isToken$1(34) !== true)
    this.error$1('Expected string literal');
  this.position = $.add(this.position, 1);
  var charCodes = $.ListImplementation_List(null);
  for (var t1 = this.json; true;) {
    var c = this.char$0();
    if ($.eqB(c, 34)) {
      this.position = $.add(this.position, 1);
      break;
    }
    if ($.eqB(c, 92)) {
      this.position = $.add(this.position, 1);
      if ($.eqB(this.position, $.get$length(this)))
        this.error$1('\\ at the end of input');
      switch (this.char$0()) {
        case 34:
          c = 34;
          break;
        case 92:
          c = 92;
          break;
        case 47:
          c = 47;
          break;
        case 98:
          c = 8;
          break;
        case 110:
          c = 10;
          break;
        case 114:
          c = 13;
          break;
        case 102:
          c = 12;
          break;
        case 116:
          c = 9;
          break;
        case 117:
          if ($.gtB($.add(this.position, 5), $.get$length(this)))
            this.error$1('Invalid unicode esacape sequence');
          var codeString = $.substring$2(t1, $.add(this.position, 1), $.add(this.position, 5));
          try {
            c = $.int_parse('0x' + $.S(codeString));
          } catch (exception) {
            $.unwrapException(exception);
            this.error$1('Invalid unicode esacape sequence');
          }

          this.position = $.add(this.position, 4);
          break;
        default:
          this.error$1('Invalid esacape sequence in string literal');
      }
    }
    charCodes.push(c);
    this.position = $.add(this.position, 1);
  }
  return $.StringImplementation_String$fromCharCodes(charCodes);
},
 parseNumber$0: function() {
  if (this.isToken$1(45) !== true)
    this.error$1('Expected number literal');
  var startPos = this.position;
  var char$ = this.char$0();
  if (char$ === 45)
    char$ = this.nextChar$0();
  if (char$ === 48)
    char$ = this.nextChar$0();
  else if (this.isDigit$1(char$) === true) {
    char$ = this.nextChar$0();
    for (; this.isDigit$1(char$) === true;)
      char$ = this.nextChar$0();
  } else
    this.error$1('Expected digit when parsing number');
  if (char$ === 46) {
    char$ = this.nextChar$0();
    if (this.isDigit$1(char$) === true) {
      char$ = this.nextChar$0();
      for (; this.isDigit$1(char$) === true;)
        char$ = this.nextChar$0();
      var isInt = false;
    } else {
      this.error$1('Expected digit following comma');
      isInt = true;
    }
  } else
    isInt = true;
  if (char$ === 101 || char$ === 69) {
    char$ = this.nextChar$0();
    if (char$ === 45 || char$ === 43)
      char$ = this.nextChar$0();
    if (this.isDigit$1(char$) === true) {
      char$ = this.nextChar$0();
      for (; this.isDigit$1(char$) === true;)
        char$ = this.nextChar$0();
      isInt = false;
    } else
      this.error$1('Expected digit following \'e\' or \'E\'');
  }
  var number = $.substring$2(this.json, startPos, this.position);
  if (isInt)
    return $.int_parse(number);
  else
    return $.double_parse(number);
},
 isDigit$1: function(char$) {
  if (typeof char$ !== 'number')
    return this.isDigit$1$bailout(1, char$);
  return char$ >= 48 && char$ <= 57;
},
 isDigit$1$bailout: function(state0, char$) {
  return $.geB(char$, 48) && $.leB(char$, 57);
},
 isToken$1: function(tokenKind) {
  var t1 = this.token$0();
  if (typeof t1 !== 'number')
    return this.isToken$1$bailout(1, tokenKind, t1);
  return t1 === tokenKind;
},
 isToken$1$bailout: function(state0, tokenKind, t1) {
  return $.eq(t1, tokenKind);
},
 char$0: function() {
  var t1 = this.position;
  if (typeof t1 !== 'number')
    return this.char$0$bailout(1, t1, 0);
  var t3 = $.get$length(this);
  if (typeof t3 !== 'number')
    return this.char$0$bailout(2, t1, t3);
  if (t1 >= t3)
    this.error$1('Unexpected end of JSON stream');
  return $.charCodeAt(this.json, this.position);
},
 char$0$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t1 = env0;
      t3 = env1;
      break;
  }
  switch (state0) {
    case 0:
      var t1 = this.position;
    case 1:
      state0 = 0;
      var t3 = $.get$length(this);
    case 2:
      state0 = 0;
      if ($.geB(t1, t3))
        this.error$1('Unexpected end of JSON stream');
      return $.charCodeAt(this.json, this.position);
  }
},
 nextChar$0: function() {
  var t1 = this.position;
  if (typeof t1 !== 'number')
    return this.nextChar$0$bailout(1, t1, 0);
  this.position = t1 + 1;
  t1 = this.position;
  if (typeof t1 !== 'number')
    return this.nextChar$0$bailout(2, t1, 0);
  var t3 = $.get$length(this);
  if (typeof t3 !== 'number')
    return this.nextChar$0$bailout(3, t1, t3);
  if (t1 >= t3)
    return 0;
  return $.charCodeAt(this.json, this.position);
},
 nextChar$0$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t1 = env0;
      break;
    case 3:
      t1 = env0;
      t3 = env1;
      break;
  }
  switch (state0) {
    case 0:
      var t1 = this.position;
    case 1:
      state0 = 0;
      this.position = $.add(t1, 1);
      t1 = this.position;
    case 2:
      state0 = 0;
      var t3 = $.get$length(this);
    case 3:
      state0 = 0;
      if ($.geB(t1, t3))
        return 0;
      return $.charCodeAt(this.json, this.position);
  }
},
 token$0: function() {
  for (var t1 = this.json; true;) {
    if ($.geB(this.position, $.get$length(this)))
      return;
    var char$ = $.charCodeAt(t1, this.position);
    var token = $.index($._JsonParser_tokens, char$);
    if (token === 32) {
      this.position = $.add(this.position, 1);
      continue;
    }
    if (token == null)
      return 0;
    return token;
  }
},
 error$1: function(message) {
  throw $.$$throw(message);
},
 _JsonParser$1: function(json) {
  if (!($._JsonParser_tokens == null))
    return;
  $._JsonParser_tokens = $.ListImplementation_List(126);
  $.indexSet($._JsonParser_tokens, 9, 32);
  $.indexSet($._JsonParser_tokens, 10, 32);
  $.indexSet($._JsonParser_tokens, 13, 32);
  $.indexSet($._JsonParser_tokens, 32, 32);
  $.indexSet($._JsonParser_tokens, 48, 45);
  $.indexSet($._JsonParser_tokens, 49, 45);
  $.indexSet($._JsonParser_tokens, 50, 45);
  $.indexSet($._JsonParser_tokens, 51, 45);
  $.indexSet($._JsonParser_tokens, 52, 45);
  $.indexSet($._JsonParser_tokens, 53, 45);
  $.indexSet($._JsonParser_tokens, 54, 45);
  $.indexSet($._JsonParser_tokens, 55, 45);
  $.indexSet($._JsonParser_tokens, 56, 45);
  $.indexSet($._JsonParser_tokens, 57, 45);
  $.indexSet($._JsonParser_tokens, 45, 45);
  $.indexSet($._JsonParser_tokens, 123, 123);
  $.indexSet($._JsonParser_tokens, 125, 125);
  $.indexSet($._JsonParser_tokens, 91, 91);
  $.indexSet($._JsonParser_tokens, 93, 93);
  $.indexSet($._JsonParser_tokens, 34, 34);
  $.indexSet($._JsonParser_tokens, 58, 58);
  $.indexSet($._JsonParser_tokens, 44, 44);
  $.indexSet($._JsonParser_tokens, 110, 110);
  $.indexSet($._JsonParser_tokens, 116, 116);
  $.indexSet($._JsonParser_tokens, 102, 102);
}
};

$$._JsonStringifier = {"": ["sb?", "seen"],
 "super": "Object",
 checkCycle$1: function(object) {
  for (var t1 = this.seen, t2 = t1.length, i = 0; i < t2; ++i) {
    var t3 = t1[i];
    if (t3 == null ? object == null : t3 === object)
      throw $.$$throw('Cyclic structure');
  }
  t1.push(object);
},
 stringifyValue$1: function(object) {
  if (this.stringifyJsonValue$1(object) !== true) {
    this.checkCycle$1(object);
    try {
      var customJson = object.toJson$0();
      if (this.stringifyJsonValue$1(customJson) !== true)
        throw $.$$throw($.JsonUnsupportedObjectError$(object));
      var t1 = this.seen;
      if (0 >= t1.length)
        throw $.ioore(0);
      t1.pop();
    } catch (exception) {
      t1 = $.unwrapException(exception);
      var e = t1;
      throw $.$$throw($.JsonUnsupportedObjectError$withCause(object, e));
    }

  }
},
 stringifyJsonValue$1: function(object) {
  var t1 = {};
  if (typeof object === 'number') {
    $.add$1(this.sb, $.toString(object));
    return true;
  } else if (object === true) {
    $.add$1(this.sb, 'true');
    return true;
  } else if (object === false) {
    $.add$1(this.sb, 'false');
    return true;
  } else if (object == null) {
    $.add$1(this.sb, 'null');
    return true;
  } else if (typeof object === 'string') {
    t1 = this.sb;
    $.add$1(t1, '"');
    $._JsonStringifier_escape(t1, object);
    $.add$1(t1, '"');
    return true;
  } else if (typeof object === 'object' && object !== null && (object.constructor === Array || object.is$List())) {
    if (typeof object !== 'object' || object === null || object.constructor !== Array && !object.is$JavaScriptIndexingBehavior())
      return this.stringifyJsonValue$1$bailout(1, object);
    this.checkCycle$1(object);
    var t2 = this.sb;
    $.add$1(t2, '[');
    if (object.length > 0) {
      this.stringifyValue$1(object[0]);
      for (var i = 1; i < object.length; ++i) {
        $.add$1(t2, ',');
        if (i >= object.length)
          throw $.ioore(i);
        this.stringifyValue$1(object[i]);
      }
    }
    $.add$1(t2, ']');
    t1 = this.seen;
    if (0 >= t1.length)
      throw $.ioore(0);
    t1.pop();
    return true;
  } else if (typeof object === 'object' && object !== null && object.is$Map()) {
    this.checkCycle$1(object);
    t2 = this.sb;
    $.add$1(t2, '{');
    t1.first_10 = true;
    object.forEach$1(new $._JsonStringifier_stringifyJsonValue_anon(this, t1));
    $.add$1(t2, '}');
    t2 = this.seen;
    if (0 >= t2.length)
      throw $.ioore(0);
    t2.pop();
    return true;
  } else
    return false;
},
 stringifyJsonValue$1$bailout: function(state0, env0) {
  switch (state0) {
    case 1:
      var object = env0;
      break;
  }
  switch (state0) {
    case 0:
      var t1 = {};
    case 1:
      if (state0 === 0 && typeof object === 'number') {
        $.add$1(this.sb, $.toString(object));
        return true;
      } else
        switch (state0) {
          case 0:
          case 1:
            if (state0 === 0 && object === true) {
              $.add$1(this.sb, 'true');
              return true;
            } else
              switch (state0) {
                case 0:
                case 1:
                  if (state0 === 0 && object === false) {
                    $.add$1(this.sb, 'false');
                    return true;
                  } else
                    switch (state0) {
                      case 0:
                      case 1:
                        if (state0 === 0 && object == null) {
                          $.add$1(this.sb, 'null');
                          return true;
                        } else
                          switch (state0) {
                            case 0:
                            case 1:
                              if (state0 === 0 && typeof object === 'string') {
                                t1 = this.sb;
                                $.add$1(t1, '"');
                                $._JsonStringifier_escape(t1, object);
                                $.add$1(t1, '"');
                                return true;
                              } else
                                switch (state0) {
                                  case 0:
                                  case 1:
                                    if (state0 === 1 || state0 === 0 && typeof object === 'object' && object !== null && (object.constructor === Array || object.is$List()))
                                      switch (state0) {
                                        case 0:
                                        case 1:
                                          state0 = 0;
                                          this.checkCycle$1(object);
                                          var t2 = this.sb;
                                          $.add$1(t2, '[');
                                          if ($.gtB($.get$length(object), 0)) {
                                            this.stringifyValue$1($.index(object, 0));
                                            for (var i = 1; $.ltB(i, $.get$length(object)); ++i) {
                                              $.add$1(t2, ',');
                                              this.stringifyValue$1($.index(object, i));
                                            }
                                          }
                                          $.add$1(t2, ']');
                                          t1 = this.seen;
                                          if (0 >= t1.length)
                                            throw $.ioore(0);
                                          t1.pop();
                                          return true;
                                      }
                                    else if (typeof object === 'object' && object !== null && object.is$Map()) {
                                      this.checkCycle$1(object);
                                      t2 = this.sb;
                                      $.add$1(t2, '{');
                                      t1.first_10 = true;
                                      object.forEach$1(new $._JsonStringifier_stringifyJsonValue_anon(this, t1));
                                      $.add$1(t2, '}');
                                      t2 = this.seen;
                                      if (0 >= t2.length)
                                        throw $.ioore(0);
                                      t2.pop();
                                      return true;
                                    } else
                                      return false;
                                }
                          }
                    }
              }
        }
  }
}
};

$$.Channel = {"": ["token"],
 "super": "Object",
 open$0: function() {
  $._setup();
  var t1 = this.token;
  $._send('_open_channel', t1);
  var socket = $.Socket$_(t1);
  $.indexSet($._sockets, t1, socket);
  return socket;
}
};

$$.Socket = {"": ["_token", "onOpen", "onMessage=", "onError", "onClose"],
 "super": "Object",
 onOpen$0: function() { return this.onOpen.call$0(); },
 onMessage$1: function(arg0) { return this.onMessage.call$1(arg0); },
 onError$2: function(arg0, arg1) { return this.onError.call$2(arg0, arg1); },
 onClose$0: function() { return this.onClose.call$0(); }
};

$$._SpreadArgsHelper = {"": ["_lib5_callback?", "_expectedCalls", "_actualCalls=", "_testNum", "_testCase", "_shouldCallBack", "_isDone"],
 "super": "Object",
 _lib5_callback$1: function(arg0) { return this._lib5_callback.call$1(arg0); },
 _lib5_callback$2: function(arg0, arg1) { return this._lib5_callback.call$2(arg0, arg1); },
 _lib5_callback$1: function(arg0) { return this._lib5_callback.call$1(arg0); },
 _shouldCallBack$0: function() { return this._shouldCallBack.call$0(); },
 _isDone$0: function() { return this._isDone.call$0(); },
 _init$4: function(callback, shouldCallBack, isDone, expectedCalls) {
  $.ensureInitialized();
  if (!($.geB($._currentTest, 0) && $.ltB($._currentTest, $.get$length($._tests)) && !($.index($._tests, $._currentTest) == null)))
    $.print('No valid test, did you forget to run your test inside a call to test()?');
  this._lib5_callback = callback;
  this._shouldCallBack = shouldCallBack;
  this._isDone = isDone;
  this._expectedCalls = expectedCalls;
  var t1 = $._currentTest;
  this._testNum = t1;
  this._testCase = $.index($._tests, t1);
  if ($.gtB(expectedCalls, 0)) {
    t1 = this._testCase;
    t1.set$callbackFunctionsOutstanding($.add(t1.get$callbackFunctionsOutstanding(), 1));
  }
},
 _after$0: function() {
  if (this._isDone$0() === true)
    $._handleCallbackFunctionComplete();
},
 get$_after: function() { return new $.BoundClosure2(this, '_after$0'); },
 _allCallsDone$0: function() {
  return $.eq(this._actualCalls, this._expectedCalls);
},
 get$_allCallsDone: function() { return new $.BoundClosure2(this, '_allCallsDone$0'); },
 invoke1$1: function(arg1) {
  return $.guardAsync(new $._SpreadArgsHelper_invoke1_anon(this, arg1), this.get$_after(), this._testNum);
},
 get$invoke1: function() { return new $.BoundClosure(this, 'invoke1$1'); },
 _checkCallCount$0: function() {
  if ($.gtB(this._actualCalls, this._expectedCalls)) {
    this._testCase.error$2('Callback called more times than expected (' + $.S(this._actualCalls) + ' > ' + $.S(this._expectedCalls) + ').', '');
    return false;
  }
  return true;
},
 get$_checkCallCount: function() { return new $.BoundClosure2(this, '_checkCallCount$0'); },
 _SpreadArgsHelper$fixedCallCount$2: function(callback, expectedCalls) {
  this._init$4(callback, this.get$_checkCallCount(), this.get$_allCallsDone(), expectedCalls);
}
};

$$.Configuration = {"": ["currentTestCase"],
 "super": "Object",
 get$name: function() {
  return 'Configuration';
},
 get$autoStart: function() {
  return true;
},
 onInit$0: function() {
},
 onStart$0: function() {
  this._postMessage$1('unittest-suite-wait-for-done');
},
 onTestStart$1: function(testCase) {
  this.currentTestCase = testCase;
},
 onTestResult$1: function(testCase) {
  this.currentTestCase = null;
},
 onDone$5: function(passed, failed, errors, results, uncaughtError) {
  for (var t1 = $.iterator($._tests); t1.get$hasNext() === true;) {
    var t2 = t1.next$0();
    $.print($.S($.toUpperCase(t2.get$result())) + ': ' + $.S(t2.get$description()));
    if (!$.eqB(t2.get$message(), ''))
      $.print(this._indent$1(t2.get$message()));
    if (!(t2.get$stackTrace() == null) && !$.eqB(t2.get$stackTrace(), ''))
      $.print(this._indent$1(t2.get$stackTrace()));
  }
  $.print('');
  if (passed === 0 && failed === 0 && errors === 0) {
    $.print('No tests found.');
    var success = false;
  } else if (failed === 0 && errors === 0 && uncaughtError == null) {
    $.print('All ' + $.S(passed) + ' tests passed.');
    success = true;
  } else {
    if (!(uncaughtError == null))
      $.print('Top-level uncaught error: ' + $.S(uncaughtError));
    $.print($.S(passed) + ' PASSED, ' + $.S(failed) + ' FAILED, ' + $.S(errors) + ' ERRORS');
    success = false;
  }
  if (success)
    this._postMessage$1('unittest-suite-success');
  else
    throw $.$$throw($._ExceptionImplementation$('Some tests failed.'));
},
 _indent$1: function(str) {
  return $.Strings_join($.map($.split(str, '\n'), new $.Configuration__indent_anon()), '\n');
},
 _postMessage$1: function(message) {
  $.print(message);
}
};

$$._IsTrue = {"": [],
 "super": "BaseMatcher",
 matches$2: function(item, matchState) {
  return $.eq(item, true);
},
 describe$1: function(description) {
  return description.add$1('true');
}
};

$$._DeepMatcher = {"": ["_expected", "_limit", "count?"],
 "super": "BaseMatcher",
 _compareIterables$4: function(expected, actual, matcher, depth) {
  if (!(typeof actual === 'object' && actual !== null && (actual.constructor === Array || actual.is$Iterable())))
    return 'is not Iterable';
  var expectedIterator = $.iterator(expected);
  var actualIterator = $.iterator(actual);
  for (var position = 0, reason = null; reason == null;)
    if (expectedIterator.get$hasNext() === true)
      if (actualIterator.get$hasNext() === true) {
        var r = matcher.call$4(expectedIterator.next$0(), actualIterator.next$0(), 'mismatch at position ' + $.S(position), depth);
        if (!(r == null))
          reason = $.toString(r);
        ++position;
      } else
        reason = 'shorter than expected';
    else {
      if (actualIterator.get$hasNext() === true)
        ;
      else
        return;
      reason = 'longer than expected';
    }
  return reason;
},
 _recursiveMatch$4: function(expected, actual, location$, depth) {
  if (typeof expected !== 'string' && (typeof expected !== 'object' || expected === null || expected.constructor !== Array && !expected.is$JavaScriptIndexingBehavior()))
    return this._recursiveMatch$4$bailout(1, expected, actual, location$, depth, 0, 0);
  if (depth !== 0) {
    var t1 = this._limit;
    if (typeof t1 !== 'number')
      return this._recursiveMatch$4$bailout(2, expected, actual, location$, depth, t1, 0);
    var canRecurse = t1 > 1;
  } else
    canRecurse = true;
  if (expected === actual)
    var reason = null;
  else {
    t1 = this._limit;
    if (typeof t1 !== 'number')
      return this._recursiveMatch$4$bailout(3, expected, actual, location$, depth, canRecurse, t1);
    if (depth > t1)
      reason = $.StringDescription$('recursion depth limit exceeded');
    else if (typeof expected === 'object' && expected !== null && (expected.constructor === Array || expected.is$Iterable()) && canRecurse) {
      var r = this._compareIterables$4(expected, actual, this.get$_recursiveMatch(), depth + 1);
      reason = !(r == null) ? $.StringDescription$(r) : null;
    } else if (typeof expected === 'object' && expected !== null && expected.is$Map() && canRecurse)
      if (!(typeof actual === 'object' && actual !== null && actual.is$Map()))
        reason = $.StringDescription$('expected a map');
      else if (!(expected.length === $.get$length(actual)))
        reason = $.StringDescription$('different map lengths');
      else
        for (var t1 = $.iterator(expected.getKeys$0()), t2 = depth + 1, reason = null; t1.get$hasNext() === true;) {
          var t3 = t1.next$0();
          if (actual.containsKey$1(t3) !== true) {
            reason = $.StringDescription$('missing map key ');
            reason.addDescriptionOf$1(t3);
            break;
          }
          if (t3 !== (t3 | 0))
            throw $.iae(t3);
          if (t3 < 0 || t3 >= expected.length)
            throw $.ioore(t3);
          reason = this._recursiveMatch$4(expected[t3], actual.operator$index$1(t3), 'with key <' + $.S(t3) + '> ' + location$, t2);
          if (!(reason == null))
            break;
        }
    else {
      reason = $.StringDescription$('');
      if (depth > 1)
        $.add$1(reason.add$1('expected ').addDescriptionOf$1(expected), ' but was ').addDescriptionOf$1(actual);
      else
        reason.add$1('was ').addDescriptionOf$1(actual);
    }
  }
  if (!(reason == null) && location$.length > 0)
    $.add$1($.add$1(reason, ' '), location$);
  return reason;
},
 _recursiveMatch$4$bailout: function(state0, env0, env1, env2, env3, env4, env5) {
  switch (state0) {
    case 1:
      var expected = env0;
      var actual = env1;
      var location$ = env2;
      var depth = env3;
      break;
    case 2:
      expected = env0;
      actual = env1;
      location$ = env2;
      depth = env3;
      t1 = env4;
      break;
    case 3:
      expected = env0;
      actual = env1;
      location$ = env2;
      depth = env3;
      canRecurse = env4;
      t1 = env5;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
    case 2:
      if (state0 === 2 || state0 === 0 && depth !== 0)
        switch (state0) {
          case 0:
            var t1 = this._limit;
          case 2:
            state0 = 0;
            var canRecurse = $.gtB(t1, 1);
        }
      else
        canRecurse = true;
    case 3:
      if (state0 === 0 && $.eqB(expected, actual))
        var reason = null;
      else
        switch (state0) {
          case 0:
            t1 = this._limit;
          case 3:
            state0 = 0;
            if ($.gtB(depth, t1))
              reason = $.StringDescription$('recursion depth limit exceeded');
            else if (typeof expected === 'object' && expected !== null && (expected.constructor === Array || expected.is$Iterable()) && canRecurse) {
              var r = this._compareIterables$4(expected, actual, this.get$_recursiveMatch(), depth + 1);
              reason = !(r == null) ? $.StringDescription$(r) : null;
            } else if (typeof expected === 'object' && expected !== null && expected.is$Map() && canRecurse)
              if (!(typeof actual === 'object' && actual !== null && actual.is$Map()))
                reason = $.StringDescription$('expected a map');
              else if (!$.eqB($.get$length(expected), $.get$length(actual)))
                reason = $.StringDescription$('different map lengths');
              else
                for (var t1 = $.iterator(expected.getKeys$0()), t2 = depth + 1, reason = null; t1.get$hasNext() === true;) {
                  var t3 = t1.next$0();
                  if (actual.containsKey$1(t3) !== true) {
                    reason = $.StringDescription$('missing map key ');
                    reason.addDescriptionOf$1(t3);
                    break;
                  }
                  reason = this._recursiveMatch$4($.index(expected, t3), actual.operator$index$1(t3), 'with key <' + $.S(t3) + '> ' + location$, t2);
                  if (!(reason == null))
                    break;
                }
            else {
              reason = $.StringDescription$('');
              if (depth > 1)
                $.add$1(reason.add$1('expected ').addDescriptionOf$1(expected), ' but was ').addDescriptionOf$1(actual);
              else
                reason.add$1('was ').addDescriptionOf$1(actual);
            }
        }
      if (!(reason == null) && location$.length > 0)
        $.add$1($.add$1(reason, ' '), location$);
      return reason;
  }
},
 get$_recursiveMatch: function() { return new $.BoundClosure3(this, '_recursiveMatch$4'); },
 _match$2: function(expected, actual) {
  var reason = this._recursiveMatch$4(expected, actual, '', 0);
  return reason == null ? null : $.toString(reason);
},
 matches$2: function(item, matchState) {
  return this._match$2(this._expected, item) == null;
},
 describe$1: function(description) {
  return description.addDescriptionOf$1(this._expected);
},
 describeMismatch$4: function(item, mismatchDescription, matchState, verbose) {
  return mismatchDescription.add$1(this._match$2(this._expected, item));
}
};

$$._Predicate = {"": ["_matcher", "_description"],
 "super": "BaseMatcher",
 _matcher$1: function(arg0) { return this._matcher.call$1(arg0); },
 matches$2: function(item, matchState) {
  return this._matcher$1(item);
},
 describe$1: function(description) {
  return description.add$1(this._description);
}
};

$$.StringDescription = {"": ["_out"],
 "super": "Object",
 toString$0: function() {
  return this._out;
},
 add$1: function(text) {
  this._out = $.S(this._out) + $.S(text);
  return this;
},
 addDescriptionOf$1: function(value) {
  if (typeof value === 'object' && value !== null && !!value.is$Matcher)
    value.describe$1(this);
  else if (typeof value === 'string')
    this._addEscapedString$1(value);
  else {
    var description = value == null ? 'null' : $.toString(value);
    if ($.startsWith(description, '<') === true && $.endsWith(description, '>') === true)
      this.add$1(description);
    else {
      this.add$1('<');
      this.add$1(description);
      this.add$1('>');
    }
  }
  return this;
},
 _addEscapedString$1: function(string) {
  this.add$1('\'');
  for (var t1 = string.length, i = 0; i < t1; ++i)
    this.add$1(this._escape$1(string[i]));
  this.add$1('\'');
},
 _escape$1: function(ch) {
  if (typeof ch !== 'string')
    return this._escape$1$bailout(1, ch);
  if (ch === '\'')
    return '\'';
  else if (ch === '\n')
    return '\\n';
  else if (ch === '\r')
    return '\\r';
  else if (ch === '\x09')
    return '\\t';
  else
    return ch;
},
 _escape$1$bailout: function(state0, ch) {
  if ($.eqB(ch, '\''))
    return '\'';
  else if ($.eqB(ch, '\n'))
    return '\\n';
  else if ($.eqB(ch, '\r'))
    return '\\r';
  else if ($.eqB(ch, '\x09'))
    return '\\t';
  else
    return ch;
},
 StringDescription$1: function(init) {
  this._out = init;
}
};

$$.DefaultFailureHandler = {"": [],
 "super": "Object",
 fail$1: function(reason) {
  throw $.$$throw($.ExpectException$(reason));
},
 failMatch$5: function(actual, matcher, reason, matchState, verbose) {
  this.fail$1($._assertErrorFormatter.call$5(actual, matcher, reason, matchState, verbose));
},
 DefaultFailureHandler$0: function() {
  if ($._assertErrorFormatter == null)
    $._assertErrorFormatter = $._defaultErrorFormatter;
}
};

$$.MatchState = {"": ["state"],
 "super": "Object"
};

$$.BaseMatcher = {"": [],
 "super": "Object",
 describeMismatch$4: function(item, mismatchDescription, matchState, verbose) {
  return mismatchDescription.add$1('was ').addDescriptionOf$1(item);
},
 is$Matcher: true
};

$$.TestCase = {"": ["id?", "description?", "_setUp", "_tearDown", "test", "callbackFunctionsOutstanding=", "message?", "result?", "stackTrace?", "currentGroup", "startTime", "runningTime", "enabled", "_doneTeardown"],
 "super": "Object",
 _setUp$0: function() { return this._setUp.call$0(); },
 _tearDown$0: function() { return this._tearDown.call$0(); },
 test$0: function() { return this.test.call$0(); },
 get$isComplete: function() {
  return !this.enabled || !(this.result == null);
},
 run$0: function() {
  if (this.enabled) {
    this.stackTrace = null;
    this.result = null;
    this.message = '';
    this._doneTeardown = false;
    if (!(this._setUp == null))
      this._setUp$0();
    $._config.onTestStart$1(this);
    this.startTime = $.Date_Date$now();
    this.runningTime = null;
    this.test$0();
  }
},
 _complete$0: function() {
  if (this.runningTime == null)
    this.runningTime = $.Duration$(0, 0, 0, 0, 0);
  if (!this._doneTeardown) {
    if (!(this._tearDown == null))
      this._tearDown$0();
    this._doneTeardown = true;
  }
  $._config.onTestResult$1(this);
},
 pass$0: function() {
  this.result = 'pass';
  this._complete$0();
},
 fail$2: function(messageText, stack) {
  var t1 = this.result;
  if (!(t1 == null)) {
    if (t1 === 'pass')
      this.error$2('Test failed after initially passing: ' + $.S(messageText), stack);
    else if (t1 === 'fail')
      this.error$2('Test failed more than once: ' + $.S(messageText), stack);
  } else {
    this.result = 'fail';
    this.message = messageText;
    this.stackTrace = stack;
    this._complete$0();
  }
},
 error$2: function(messageText, stack) {
  this.result = 'error';
  this.message = messageText;
  this.stackTrace = stack;
  this._complete$0();
}
};

$$.Callback = {"": ["_manualDispose", "_lib1_id?", "_lib1_callback?"],
 "super": "Object",
 _lib1_callback$1: function(arg0) { return this._lib1_callback.call$1(arg0); },
 _lib1_callback$2: function(arg0, arg1) { return this._lib1_callback.call$2(arg0, arg1); },
 _lib1_callback$1: function(arg0) { return this._lib1_callback.call$1(arg0); },
 get$_serialized: function() {
  return ['funcref', this._lib1_id, $._proxiedFunctionTable().get$sendPort()];
},
 _initialize$1: function(manualDispose) {
  this._manualDispose = manualDispose;
  this._lib1_id = $.add$1($._proxiedFunctionTable(), this._lib1_callback);
  $._proxiedFunctionTable().globalize$1(this._lib1_id);
  $._deserializedFunctionTable().add$2(this._lib1_callback, this.get$_serialized());
},
 Callback$many$1: function(f) {
  this._lib1_callback = f;
  this._initialize$1(true);
},
 is$Callback: true
};

$$.Proxy = {"": ["_port", "_lib1_id?"],
 "super": "Object",
 operator$index$1: function(arg) {
  return this.noSuchMethod$2('[]', [arg]);
},
 operator$indexSet$2: function(key, value) {
  return this.noSuchMethod$2('[]=', [key, value]);
},
 operator$eq$1: function(other) {
  if (this === other)
    var t1 = true;
  else
    t1 = typeof other === 'object' && other !== null && !!other.is$Proxy && $._jsPortEquals.callSync$1([$._serialize(this), $._serialize(other)]) === true;
  return t1;
},
 noSuchMethod$2: function(method, args) {
  if ($.eqB($._depth(), 0))
    throw $.$$throw('Cannot access a JavaScript proxy out of scope.');
  var result = this._port.callSync$1([this._lib1_id, method, $.map(args, $._serialize)]);
  switch ($.index(result, 0)) {
    case 'return':
      return $._deserialize($.index(result, 1));
    case 'throws':
      throw $.$$throw($._deserialize($.index(result, 1)));
    case 'none':
      throw $.$$throw($.NoSuchMethodError$(this, method, args, null));
    default:
      throw $.$$throw('Invalid return value');
  }
},
 is$Proxy: true
};

$$._ProxiedReferenceTable = {"": ["_registry?", "_scopeIndices?"],
 "super": "Object",
 enterScope$0: function() {
  $.addLast(this._scopeIndices, this._handleStack.length);
},
 exitScope$0: function() {
  var t1 = this._scopeIndices;
  if (0 >= t1.length)
    throw $.ioore(0);
  var start = t1.pop();
  if (start !== (start | 0))
    return this.exitScope$0$bailout(1, start);
  for (var t1 = this._handleStack, t2 = this._globalIds, t3 = this._registry, i = start; t4 = t1.length, i < t4; ++i) {
    if (i < 0)
      throw $.ioore(i);
    if ($.contains$1(t2, t1[i]) !== true) {
      if (i >= t1.length)
        throw $.ioore(i);
      t3.remove$1(t1[i]);
      this._deletedCount = this._deletedCount + 1;
    }
  }
  $.removeRange(t1, start, t4 - start);
  var t4;
},
 exitScope$0$bailout: function(state0, start) {
  for (var t1 = this._handleStack, t2 = this._globalIds, t3 = this._registry, i = start; $.ltB(i, t1.length); i = $.add(i, 1)) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    if ($.contains$1(t2, t1[i]) !== true) {
      if (i >= t1.length)
        throw $.ioore(i);
      t3.remove$1(t1[i]);
      this._deletedCount = this._deletedCount + 1;
    }
  }
  t2 = t1.length;
  if (typeof start !== 'number')
    throw $.iae(start);
  $.removeRange(t1, start, t2 - start);
},
 globalize$1: function(id) {
  return $.add$1(this._globalIds, id);
},
 add$1: function(x) {
  if (this._scopeIndices.length === 0)
    throw $.$$throw('Must be inside scope to allocate.');
  var t1 = this._name + '-';
  var t2 = this._nextId;
  this._nextId = t2 + 1;
  var id = t1 + $.S(t2);
  $.indexSet(this._registry, id, x);
  $.addLast(this._handleStack, id);
  return id;
},
 get$1: function(id) {
  return $.index(this._registry, id);
},
 get$count: function() {
  return $.get$length(this._registry);
},
 get$total: function() {
  return $.add(this.get$count(), this._deletedCount);
},
 get$sendPort: function() {
  return this._port.toSendPort$0();
}
};

$$._ProxiedFunctionTable = {"": ["_name", "_nextId", "_deletedCount", "_registry", "_port", "_globalIds", "_handleStack", "_scopeIndices"],
 "super": "_ProxiedReferenceTable",
 _ProxiedFunctionTable$0: function() {
  this._port.receive$1(new $.anon0(this));
}
};

$$._ProxiedObjectTable = {"": ["_name", "_nextId", "_deletedCount", "_registry", "_port", "_globalIds", "_handleStack", "_scopeIndices"],
 "super": "_ProxiedReferenceTable",
 _ProxiedObjectTable$0: function() {
  this._port.receive$1(new $.anon());
}
};

$$._DeserializedFunctionTable = {"": ["data"],
 "super": "Object",
 find$1: function(f) {
  for (var t1 = $.iterator(this.data); t1.get$hasNext() === true;) {
    var t2 = t1.next$0();
    if ($.eqB(f, $.index(t2, 0)))
      return $.index(t2, 1);
  }
  return;
},
 remove$1: function(f) {
  this.data = $.filter(this.data, new $._DeserializedFunctionTable_remove_anon(f));
},
 add$2: function(f, x) {
  $.add$1(this.data, [f, x]);
},
 _DeserializedFunctionTable$0: function() {
  this.data = [];
}
};

$$.main_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  $.Channel$('atoken').open$0().set$onMessage($.expectAsync1(new $.main_anon0(), 1));
  $.scoped(new $.main_anon1());
}
};

$$.main_anon0 = {"": [],
 "super": "Closure",
 call$1: function(m) {
  $.expect(m, 'a_message', null, null, false);
}
};

$$.main_anon1 = {"": [],
 "super": "Closure",
 call$0: function() {
  var channel = $.index($.context().get$channels(), 'atoken');
  var data = $.map0($.makeLiteralMap(['data', 'a_message']));
  channel.get$socket().get$config().onmessage$1(data);
}
};

$$._convertDartToNative_PrepareForStructuredClone_findSlot = {"": ["copies_3", "values_2"],
 "super": "Closure",
 call$1: function(value) {
  var t1 = this.values_2;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.call$1$bailout(1, value, t1);
  var length$ = t1.length;
  for (var i = 0; i < length$; ++i) {
    var t2 = t1[i];
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  $.add$1(t1, value);
  $.add$1(this.copies_3, null);
  return length$;
},
 call$1$bailout: function(state0, value, t1) {
  var length$ = $.get$length(t1);
  for (var i = 0; $.ltB(i, length$); ++i) {
    var t2 = $.index(t1, i);
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  $.add$1(t1, value);
  $.add$1(this.copies_3, null);
  return length$;
}
};

$$._convertDartToNative_PrepareForStructuredClone_readSlot = {"": ["copies_4"],
 "super": "Closure",
 call$1: function(i) {
  return $.index(this.copies_4, i);
}
};

$$._convertDartToNative_PrepareForStructuredClone_writeSlot = {"": ["copies_5"],
 "super": "Closure",
 call$2: function(i, x) {
  $.indexSet(this.copies_5, i, x);
}
};

$$._convertDartToNative_PrepareForStructuredClone_cleanupSlots = {"": [],
 "super": "Closure",
 call$0: function() {
}
};

$$._convertDartToNative_PrepareForStructuredClone_walk = {"": ["writeSlot_8", "findSlot_7", "readSlot_6"],
 "super": "Closure",
 call$1: function(e) {
  var t1 = {};
  if (e == null)
    return e;
  if (typeof e === 'boolean')
    return e;
  if (typeof e === 'number')
    return e;
  if (typeof e === 'string')
    return e;
  if (typeof e === 'object' && e !== null && !!e.is$Date)
    throw $.$$throw($.CTC3);
  if (typeof e === 'object' && e !== null && !!e.is$RegExp)
    throw $.$$throw($.CTC4);
  if (typeof e === 'object' && e !== null && e.is$_FileImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$File())
    throw $.$$throw($.CTC5);
  if (typeof e === 'object' && e !== null && e.is$_BlobImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$Blob())
    throw $.$$throw($.CTC6);
  if (typeof e === 'object' && e !== null && e.is$_FileListImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$_ImageDataImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ImageData())
    throw $.$$throw($.CTC7);
  if (typeof e === 'object' && e !== null && e.is$_ArrayBufferImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ArrayBuffer())
    throw $.$$throw($.CTC8);
  if (typeof e === 'object' && e !== null && e.is$_ArrayBufferViewImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ArrayBufferView())
    throw $.$$throw($.CTC9);
  if (typeof e === 'object' && e !== null && e.is$Map()) {
    var slot = this.findSlot_7.call$1(e);
    t1.copy_1 = this.readSlot_6.call$1(slot);
    var t2 = t1.copy_1;
    if (!(t2 == null))
      return t2;
    t1.copy_1 = {};
    this.writeSlot_8.call$2(slot, t1.copy_1);
    e.forEach$1(new $._convertDartToNative_PrepareForStructuredClone_walk_anon(this, t1));
    return t1.copy_1;
  }
  if (typeof e === 'object' && e !== null && (e.constructor === Array || e.is$List())) {
    if (typeof e !== 'object' || e === null || (e.constructor !== Array || !!e.immutable$list) && !e.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(1, e, 0, 0, 0, 0, 0, 0);
    var length$ = e.length;
    slot = this.findSlot_7.call$1(e);
    t2 = this.readSlot_6;
    var copy = t2.call$1(slot);
    if (!(copy == null)) {
      if (true === copy) {
        copy = new Array(length$);
        this.writeSlot_8.call$2(slot, copy);
      }
      return copy;
    }
    t1 = e instanceof Array && !!!(e.immutable$list);
    var t3 = this.writeSlot_8;
    if (t1) {
      t3.call$2(slot, true);
      for (var i = 0; i < length$; ++i) {
        if (i >= e.length)
          throw $.ioore(i);
        var element = e[i];
        var elementCopy = this.call$1(element);
        if (!(elementCopy == null ? element == null : elementCopy === element)) {
          copy = t2.call$1(slot);
          if (true === copy) {
            copy = new Array(length$);
            t3.call$2(slot, copy);
          }
          if (typeof copy !== 'object' || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
            return this.call$1$bailout(2, e, t3, length$, elementCopy, slot, copy, i);
          for (var t1 = e.length, t2 = copy.length, j = 0; j < i; ++j) {
            if (j >= t1)
              throw $.ioore(j);
            var t4 = e[j];
            if (j >= t2)
              throw $.ioore(j);
            copy[j] = t4;
          }
          if (i >= t2)
            throw $.ioore(i);
          copy[i] = elementCopy;
          ++i;
          break;
        }
      }
      if (copy == null) {
        t3.call$2(slot, e);
        copy = e;
      }
    } else {
      copy = new Array(length$);
      t3.call$2(slot, copy);
      i = 0;
    }
    if (typeof copy !== 'object' || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(3, e, i, copy, length$, 0, 0, 0);
    for (; i < length$; ++i) {
      if (i >= e.length)
        throw $.ioore(i);
      t1 = this.call$1(e[i]);
      if (i >= copy.length)
        throw $.ioore(i);
      copy[i] = t1;
    }
    return copy;
  }
  throw $.$$throw($.CTC10);
},
 call$1$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6) {
  switch (state0) {
    case 1:
      var e = env0;
      break;
    case 2:
      e = env0;
      t3 = env1;
      length$ = env2;
      elementCopy = env3;
      slot = env4;
      copy = env5;
      i = env6;
      break;
    case 3:
      e = env0;
      i = env1;
      copy = env2;
      length$ = env3;
      break;
  }
  switch (state0) {
    case 0:
      var t1 = {};
      if (e == null)
        return e;
      if (typeof e === 'boolean')
        return e;
      if (typeof e === 'number')
        return e;
      if (typeof e === 'string')
        return e;
      if (typeof e === 'object' && e !== null && !!e.is$Date)
        throw $.$$throw($.CTC3);
      if (typeof e === 'object' && e !== null && !!e.is$RegExp)
        throw $.$$throw($.CTC4);
      if (typeof e === 'object' && e !== null && e.is$_FileImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$File())
        throw $.$$throw($.CTC5);
      if (typeof e === 'object' && e !== null && e.is$_BlobImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$Blob())
        throw $.$$throw($.CTC6);
      if (typeof e === 'object' && e !== null && e.is$_FileListImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$_ImageDataImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ImageData())
        throw $.$$throw($.CTC7);
      if (typeof e === 'object' && e !== null && e.is$_ArrayBufferImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ArrayBuffer())
        throw $.$$throw($.CTC8);
      if (typeof e === 'object' && e !== null && e.is$_ArrayBufferViewImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ArrayBufferView())
        throw $.$$throw($.CTC9);
      if (typeof e === 'object' && e !== null && e.is$Map()) {
        var slot = this.findSlot_7.call$1(e);
        t1.copy_1 = this.readSlot_6.call$1(slot);
        var t2 = t1.copy_1;
        if (!(t2 == null))
          return t2;
        t1.copy_1 = {};
        this.writeSlot_8.call$2(slot, t1.copy_1);
        e.forEach$1(new $._convertDartToNative_PrepareForStructuredClone_walk_anon(this, t1));
        return t1.copy_1;
      }
    default:
      if (state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && typeof e === 'object' && e !== null && (e.constructor === Array || e.is$List()))
        switch (state0) {
          case 0:
          case 1:
            state0 = 0;
            var length$ = $.get$length(e);
            slot = this.findSlot_7.call$1(e);
            t2 = this.readSlot_6;
            var copy = t2.call$1(slot);
            if (!(copy == null)) {
              if (true === copy) {
                copy = new Array(length$);
                this.writeSlot_8.call$2(slot, copy);
              }
              return copy;
            }
            t1 = e instanceof Array && !!!(e.immutable$list);
            var t3 = this.writeSlot_8;
          case 2:
            if (state0 === 2 || state0 === 0 && t1)
              switch (state0) {
                case 0:
                  t3.call$2(slot, true);
                  var i = 0;
                case 2:
                  L0:
                    while (true)
                      switch (state0) {
                        case 0:
                          if (!$.ltB(i, length$))
                            break L0;
                          var element = $.index(e, i);
                          var elementCopy = this.call$1(element);
                        case 2:
                          if (state0 === 2 || state0 === 0 && !(elementCopy == null ? element == null : elementCopy === element))
                            switch (state0) {
                              case 0:
                                copy = t2.call$1(slot);
                                if (true === copy) {
                                  copy = new Array(length$);
                                  t3.call$2(slot, copy);
                                }
                              case 2:
                                state0 = 0;
                                for (var j = 0; j < i; ++j)
                                  $.indexSet(copy, j, $.index(e, j));
                                $.indexSet(copy, i, elementCopy);
                                ++i;
                                break L0;
                            }
                          ++i;
                      }
                  if (copy == null) {
                    t3.call$2(slot, e);
                    copy = e;
                  }
              }
            else {
              copy = new Array(length$);
              t3.call$2(slot, copy);
              i = 0;
            }
          case 3:
            state0 = 0;
            for (; $.ltB(i, length$); ++i)
              $.indexSet(copy, i, this.call$1($.index(e, i)));
            return copy;
        }
      throw $.$$throw($.CTC10);
  }
}
};

$$._convertDartToNative_PrepareForStructuredClone_walk_anon = {"": ["walk_9", "box_0"],
 "super": "Closure",
 call$2: function(key, value) {
  this.box_0.copy_1[key] = this.walk_9.call$1(value);
}
};

$$.Maps__emitMap_anon = {"": ["result_3", "box_0", "visiting_2"],
 "super": "Closure",
 call$2: function(k, v) {
  var t1 = this.box_0;
  if (t1.first_1 !== true)
    $.add$1(this.result_3, ', ');
  t1.first_1 = false;
  t1 = this.result_3;
  var t2 = this.visiting_2;
  $.Collections__emitObject(k, t1, t2);
  $.add$1(t1, ': ');
  $.Collections__emitObject(v, t1, t2);
}
};

$$.anon = {"": [],
 "super": "Closure",
 call$1: function(msg) {
  throw $.$$throw('Invocation unsupported on Dart proxies');
}
};

$$.HashSetImplementation_forEach__ = {"": ["f_0"],
 "super": "Closure",
 call$2: function(key, value) {
  this.f_0.call$1(key);
}
};

$$.DoubleLinkedQueue_length__ = {"": ["box_0"],
 "super": "Closure",
 call$1: function(element) {
  var t1 = this.box_0;
  t1.counter_1 = $.add(t1.counter_1, 1);
}
};

$$.LinkedHashMapImplementation_forEach__ = {"": ["f_0"],
 "super": "Closure",
 call$1: function(entry) {
  this.f_0.call$2(entry.get$key(), entry.get$value());
}
};

$$._convertNativeToDart_AcceptStructuredClone_findSlot = {"": ["copies_1", "values_0"],
 "super": "Closure",
 call$1: function(value) {
  var t1 = this.values_0;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.call$1$bailout(1, value, t1);
  var length$ = t1.length;
  for (var i = 0; i < length$; ++i) {
    var t2 = t1[i];
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  $.add$1(t1, value);
  $.add$1(this.copies_1, null);
  return length$;
},
 call$1$bailout: function(state0, value, t1) {
  var length$ = $.get$length(t1);
  for (var i = 0; $.ltB(i, length$); ++i) {
    var t2 = $.index(t1, i);
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  $.add$1(t1, value);
  $.add$1(this.copies_1, null);
  return length$;
}
};

$$._convertNativeToDart_AcceptStructuredClone_readSlot = {"": ["copies_2"],
 "super": "Closure",
 call$1: function(i) {
  return $.index(this.copies_2, i);
}
};

$$._convertNativeToDart_AcceptStructuredClone_writeSlot = {"": ["copies_3"],
 "super": "Closure",
 call$2: function(i, x) {
  $.indexSet(this.copies_3, i, x);
}
};

$$._convertNativeToDart_AcceptStructuredClone_walk = {"": ["writeSlot_7", "mustCopy_6", "findSlot_5", "readSlot_4"],
 "super": "Closure",
 call$1: function(e) {
  if (typeof e !== 'object' || e === null || (e.constructor !== Array || !!e.immutable$list) && !e.is$JavaScriptIndexingBehavior())
    return this.call$1$bailout(1, e, 0, 0, 0);
  if (e instanceof Date)
    throw $.$$throw($.CTC3);
  if (e instanceof RegExp)
    throw $.$$throw($.CTC4);
  if ($._isJavaScriptSimpleObject(e)) {
    var slot = this.findSlot_5.call$1(e);
    var copy = this.readSlot_4.call$1(slot);
    if (!(copy == null))
      return copy;
    copy = $.makeLiteralMap([]);
    if (typeof copy !== 'object' || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(2, e, slot, copy, 0);
    this.writeSlot_7.call$2(slot, copy);
    for (var t1 = $.iterator(Object.keys(e)); t1.get$hasNext() === true;) {
      var t2 = t1.next$0();
      var t3 = this.call$1(e[t2]);
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (t2 < 0 || t2 >= copy.length)
        throw $.ioore(t2);
      copy[t2] = t3;
    }
    return copy;
  }
  if (e instanceof Array) {
    slot = this.findSlot_5.call$1(e);
    copy = this.readSlot_4.call$1(slot);
    if (!(copy == null))
      return copy;
    var length$ = e.length;
    if (this.mustCopy_6 === true)
      copy = new Array(length$);
    else
      copy = e;
    if (typeof copy !== 'object' || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(3, e, length$, copy, slot);
    this.writeSlot_7.call$2(slot, copy);
    for (var i = 0; i < length$; ++i) {
      if (i >= e.length)
        throw $.ioore(i);
      t1 = this.call$1(e[i]);
      if (i >= copy.length)
        throw $.ioore(i);
      copy[i] = t1;
    }
    return copy;
  }
  return e;
},
 call$1$bailout: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      var e = env0;
      break;
    case 2:
      e = env0;
      slot = env1;
      copy = env2;
      break;
    case 3:
      e = env0;
      length$ = env1;
      copy = env2;
      slot = env3;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      if (e == null)
        return e;
      if (typeof e === 'boolean')
        return e;
      if (typeof e === 'number')
        return e;
      if (typeof e === 'string')
        return e;
      if (e instanceof Date)
        throw $.$$throw($.CTC3);
      if (e instanceof RegExp)
        throw $.$$throw($.CTC4);
    case 2:
      if (state0 === 2 || state0 === 0 && $._isJavaScriptSimpleObject(e))
        switch (state0) {
          case 0:
            var slot = this.findSlot_5.call$1(e);
            var copy = this.readSlot_4.call$1(slot);
            if (!(copy == null))
              return copy;
            copy = $.makeLiteralMap([]);
          case 2:
            state0 = 0;
            this.writeSlot_7.call$2(slot, copy);
            for (var t1 = $.iterator(Object.keys(e)); t1.get$hasNext() === true;) {
              var t2 = t1.next$0();
              $.indexSet(copy, t2, this.call$1(e[t2]));
            }
            return copy;
        }
    case 3:
      if (state0 === 3 || state0 === 0 && e instanceof Array)
        switch (state0) {
          case 0:
            slot = this.findSlot_5.call$1(e);
            copy = this.readSlot_4.call$1(slot);
            if (!(copy == null))
              return copy;
            var length$ = $.get$length(e);
            copy = this.mustCopy_6 === true ? new Array(length$) : e;
          case 3:
            state0 = 0;
            this.writeSlot_7.call$2(slot, copy);
            for (var i = 0; $.ltB(i, length$); ++i)
              $.indexSet(copy, i, this.call$1($.index(e, i)));
            return copy;
        }
      return e;
  }
}
};

$$._convertNativeToDart_IDBKey_containsDate = {"": [],
 "super": "Closure",
 call$1: function(object) {
  if (object instanceof Date)
    return true;
  if (typeof object === 'object' && object !== null && (object.constructor === Array || object.is$List())) {
    if (typeof object !== 'object' || object === null || object.constructor !== Array && !object.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(1, object);
    for (var i = 0; i < object.length; ++i)
      if (this.call$1(object[i]) === true)
        return true;
  }
  return false;
},
 call$1$bailout: function(state0, env0) {
  switch (state0) {
    case 1:
      var object = env0;
      break;
  }
  switch (state0) {
    case 0:
      if (object instanceof Date)
        return true;
    case 1:
      if (state0 === 1 || state0 === 0 && typeof object === 'object' && object !== null && (object.constructor === Array || object.is$List()))
        switch (state0) {
          case 0:
          case 1:
            state0 = 0;
            for (var i = 0; $.ltB(i, $.get$length(object)); ++i)
              if (this.call$1($.index(object, i)) === true)
                return true;
        }
      return false;
  }
}
};

$$.ReceivePortSync_receive_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(e) {
  var data = $.JSON_parse(e.get$detail());
  var replyTo = $.index(data, 0);
  var t1 = $.index(data, 1);
  var message = $._JsDeserializer$().deserialize$1(t1);
  var result = this.this_0._callback$1(message);
  $._dispatchEvent(replyTo, $._JsSerializer$().traverse$1(result));
}
};

$$._StorageImpl_getValues_anon = {"": ["values_0"],
 "super": "Closure",
 call$2: function(k, v) {
  return $.add$1(this.values_0, v);
}
};

$$.HashMapImplementation_getValues__ = {"": ["list_2", "box_0"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1 = this.list_2;
  var t2 = this.box_0;
  var t3 = t2.i_1;
  t2.i_1 = $.add(t3, 1);
  $.indexSet(t1, t3, value);
}
};

$$.LinkedHashMapImplementation_getValues__ = {"": ["list_2", "box_0"],
 "super": "Closure",
 call$1: function(entry) {
  var t1 = this.list_2;
  var t2 = this.box_0;
  var t3 = t2.index_1;
  t2.index_1 = $.add(t3, 1);
  $.indexSet(t1, t3, entry.get$value());
}
};

$$._StorageImpl_getKeys_anon = {"": ["keys_0"],
 "super": "Closure",
 call$2: function(k, v) {
  return $.add$1(this.keys_0, k);
}
};

$$.HashMapImplementation_getKeys__ = {"": ["list_2", "box_0"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1 = this.list_2;
  var t2 = this.box_0;
  var t3 = t2.i_10;
  t2.i_10 = $.add(t3, 1);
  $.indexSet(t1, t3, key);
}
};

$$.LinkedHashMapImplementation_getKeys__ = {"": ["list_2", "box_0"],
 "super": "Closure",
 call$1: function(entry) {
  var t1 = this.list_2;
  var t2 = this.box_0;
  var t3 = t2.index_10;
  t2.index_10 = $.add(t3, 1);
  $.indexSet(t1, t3, entry.get$key());
}
};

$$._RemoteSendPortSync__call_anon = {"": ["box_0"],
 "super": "Closure",
 call$1: function(e) {
  var result = $.JSON_parse(e.get$detail());
  this.box_0.result_1 = result;
}
};

$$.invokeClosure_anon = {"": ["closure_0"],
 "super": "Closure",
 call$0: function() {
  return this.closure_0.call$0();
}
};

$$.invokeClosure_anon0 = {"": ["closure_2", "arg1_1"],
 "super": "Closure",
 call$0: function() {
  return this.closure_2.call$1(this.arg1_1);
}
};

$$.invokeClosure_anon1 = {"": ["closure_5", "arg1_4", "arg2_3"],
 "super": "Closure",
 call$0: function() {
  return this.closure_5.call$2(this.arg1_4, this.arg2_3);
}
};

$$._DateImpl_toString_fourDigits = {"": [],
 "super": "Closure",
 call$1: function(n) {
  var absN = $.abs(n);
  var sign = $.ltB(n, 0) ? '-' : '';
  if ($.geB(absN, 1000))
    return $.S(n);
  if ($.geB(absN, 100))
    return sign + '0' + $.S(absN);
  if ($.geB(absN, 10))
    return sign + '00' + $.S(absN);
  return sign + '000' + $.S(absN);
}
};

$$._DateImpl_toString_threeDigits = {"": [],
 "super": "Closure",
 call$1: function(n) {
  if ($.geB(n, 100))
    return $.S(n);
  if ($.geB(n, 10))
    return '0' + $.S(n);
  return '00' + $.S(n);
}
};

$$._DateImpl_toString_twoDigits = {"": [],
 "super": "Closure",
 call$1: function(n) {
  if ($.geB(n, 10))
    return $.S(n);
  return '0' + $.S(n);
}
};

$$._JsonStringifier_stringifyJsonValue_anon = {"": ["this_2", "box_0"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1 = this.box_0;
  var t2 = t1.first_10 !== true;
  var t3 = this.this_2;
  if (t2)
    $.add$1(t3.get$sb(), ',"');
  else
    $.add$1(t3.get$sb(), '"');
  t2 = this.this_2;
  $._JsonStringifier_escape(t2.get$sb(), key);
  $.add$1(t2.get$sb(), '":');
  t2.stringifyValue$1(value);
  t1.first_10 = false;
}
};

$$.anon0 = {"": ["this_0"],
 "super": "Closure",
 call$1: function(msg) {
  try {
    var id = $.index(msg, 0);
    var args = $.map($.index(msg, 1), $._deserialize);
    var f = $.index(this.this_0.get$_registry(), id);
    var result = null;
    switch ($.get$length(args)) {
      case 0:
        result = $._serialize(f.call$0());
        break;
      case 1:
        result = $._serialize(f.call$1($.index(args, 0)));
        break;
      case 2:
        result = $._serialize(f.call$2($.index(args, 0), $.index(args, 1)));
        break;
      case 3:
        result = $._serialize(f.call$3($.index(args, 0), $.index(args, 1), $.index(args, 2)));
        break;
      case 4:
        result = $._serialize(f.call$4($.index(args, 0), $.index(args, 1), $.index(args, 2), $.index(args, 3)));
        break;
      default:
        throw $.$$throw('Unsupported number of arguments.');
    }
    return ['return', result];
  } catch (exception) {
    var t1 = $.unwrapException(exception);
    var e = t1;
    return ['throws', $.S(e)];
  }

}
};

$$._deserialize_deserializeFunction = {"": [],
 "super": "Closure",
 call$1: function(message) {
  var id = $.index(message, 1);
  var port = $.index(message, 2);
  if ($.eqB(port, $._proxiedFunctionTable().get$sendPort()))
    return $._proxiedFunctionTable().get$1(id);
  else {
    var f = new $._deserialize_deserializeFunction_anon(port, id);
    $._deserializedFunctionTable().add$2(f, message);
    return f;
  }
}
};

$$._deserialize_deserializeFunction_anon = {"": ["port_1", "id_0"],
 "super": "Closure",
 call$4: function(arg0, arg1, arg2, arg3) {
  var t1 = $ === arg0;
  if (t1)
    arg0 = null;
  t1 = !t1;
  var t2 = $ === arg1;
  if (t2)
    arg1 = null;
  t2 = !t2;
  var t3 = $ === arg2;
  if (t3)
    arg2 = null;
  t3 = !t3;
  var t4 = $ === arg3;
  if (t4)
    arg3 = null;
  if (!t4)
    var args = [arg0, arg1, arg2, arg3];
  else if (t3)
    args = [arg0, arg1, arg2];
  else if (t2)
    args = [arg0, arg1];
  else
    args = t1 ? [arg0] : [];
  var message = [this.id_0, $.map(args, $._serialize)];
  var result = this.port_1.callSync$1(message);
  if ($.eqB($.index(result, 0), 'throws'))
    throw $.$$throw($.index(result, 1));
  return $._deserialize($.index(result, 1));
},
 call$0: function() {
  return this.call$4($,$,$,$)
},
 call$1: function(arg0) {
  return this.call$4(arg0,$,$,$)
},
 call$2: function(arg0,arg1) {
  return this.call$4(arg0,arg1,$,$)
},
 call$3: function(arg0,arg1,arg2) {
  return this.call$4(arg0,arg1,arg2,$)
}
};

$$._deserialize_deserializeObject = {"": [],
 "super": "Closure",
 call$1: function(message) {
  var id = $.index(message, 1);
  var port = $.index(message, 2);
  if ($.eqB(port, $._proxiedObjectTable().get$sendPort()))
    return $._proxiedObjectTable().get$1(id);
  else
    return $.Proxy$_internal(port, id);
}
};

$$.ConstantMap_getValues_anon = {"": ["this_1", "result_0"],
 "super": "Closure",
 call$1: function(key) {
  return $.add$1(this.result_0, $.index(this.this_1, key));
}
};

$$.ConstantMap_forEach_anon = {"": ["this_1", "f_0"],
 "super": "Closure",
 call$1: function(key) {
  return this.f_0.call$2(key, $.index(this.this_1, key));
}
};

$$._DeserializedFunctionTable_remove_anon = {"": ["f_0"],
 "super": "Closure",
 call$1: function(item) {
  return !$.eqB($.index(item, 0), this.f_0);
}
};

$$.HashSetImplementation_filter__ = {"": ["f_1", "result_0"],
 "super": "Closure",
 call$2: function(key, value) {
  if (this.f_1.call$1(key) === true)
    $.add$1(this.result_0, key);
}
};

$$._ChildrenElementList_filter_anon = {"": ["f_1", "output_0"],
 "super": "Closure",
 call$1: function(element) {
  if (this.f_1.call$1(element) === true)
    $.add$1(this.output_0, element);
}
};

$$._FilteredElementList__filtered_anon = {"": [],
 "super": "Closure",
 call$1: function(n) {
  return typeof n === 'object' && n !== null && n.is$Element();
}
};

$$._FilteredElementList_removeRange_anon = {"": [],
 "super": "Closure",
 call$1: function(el) {
  return el.remove$0();
}
};

$$.HashSetImplementation_map__ = {"": ["f_1", "result_0"],
 "super": "Closure",
 call$2: function(key, value) {
  $.add$1(this.result_0, this.f_1.call$1(key));
}
};

$$._initialize_anon = {"": [],
 "super": "Closure",
 call$1: function(_) {
  return $._enterScope();
}
};

$$._initialize_anon0 = {"": [],
 "super": "Closure",
 call$1: function(args) {
  return $._exitScope($.index(args, 0));
}
};

$$._initialize_anon1 = {"": [],
 "super": "Closure",
 call$0: function() {
  var t1 = $.Callback$many($.proxyDebug);
  $.context().set$dartProxyDebug(t1);
}
};

$$.HashSetImplementation_addAll__ = {"": ["this_0"],
 "super": "Closure",
 call$1: function(value) {
  this.this_0.add$1(value);
}
};

$$._SpreadArgsHelper_invoke1_anon = {"": ["this_1", "arg1_0"],
 "super": "Closure",
 call$0: function() {
  var t1 = this.this_1;
  t1.set$_actualCalls($.add(t1.get$_actualCalls(), 1));
  if (t1._shouldCallBack$0() === true)
    return t1._lib5_callback$1(this.arg1_0);
}
};

$$._handleCallbackFunctionComplete_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  if ($.ltB($._currentTest, $.get$length($._tests))) {
    var testCase = $.index($._tests, $._currentTest);
    testCase.set$callbackFunctionsOutstanding($.sub(testCase.get$callbackFunctionsOutstanding(), 1));
    if ($.ltB(testCase.get$callbackFunctionsOutstanding(), 0))
      testCase.error$2('More calls to _handleCallbackFunctionComplete() than expected.', '');
    else if ($.eqB(testCase.get$callbackFunctionsOutstanding(), 0)) {
      if (testCase.get$isComplete() !== true)
        testCase.pass$0();
      $._currentTest = $.add($._currentTest, 1);
      $._testRunner.call$0();
    }
  }
}
};

$$._defer_anon = {"": ["port_1", "callback_0"],
 "super": "Closure",
 call$2: function(msg, reply) {
  this.callback_0.call$0();
  this.port_1.close$0();
}
};

$$.Duration_toString_threeDigits = {"": [],
 "super": "Closure",
 call$1: function(n) {
  if ($.geB(n, 100))
    return $.S(n);
  if ($.gtB(n, 10))
    return '0' + $.S(n);
  return '00' + $.S(n);
}
};

$$.Duration_toString_twoDigits = {"": [],
 "super": "Closure",
 call$1: function(n) {
  if ($.geB(n, 10))
    return $.S(n);
  return '0' + $.S(n);
}
};

$$._BaseSendPort_call_anon = {"": ["port_1", "completer_0"],
 "super": "Closure",
 call$2: function(value, ignoreReplyTo) {
  this.port_1.close$0();
  var t1 = typeof value === 'object' && value !== null && !!value.is$Exception;
  var t2 = this.completer_0;
  if (t1)
    t2.completeException$1(value);
  else
    t2.complete$1(value);
}
};

$$._NativeJsSendPort_send_anon = {"": ["this_5", "message_4", "replyTo_3"],
 "super": "Closure",
 call$0: function() {
  var t1 = {};
  var t2 = this.this_5;
  var t3 = this.replyTo_3;
  t2._checkReplyTo$1(t3);
  var isolate = $.index($._globalState().get$isolates(), t2.get$_lib3_isolateId());
  if (isolate == null)
    return;
  if (t2.get$_lib3_receivePort().get$_lib3_callback() == null)
    return;
  var shouldSerialize = !($._globalState().get$currentContext() == null) && !$.eqB($._globalState().get$currentContext().get$id(), t2.get$_lib3_isolateId());
  var msg = this.message_4;
  t1.msg_1 = msg;
  t1.reply_2 = t3;
  if (shouldSerialize) {
    t1.msg_1 = $._serializeMessage(t1.msg_1);
    t1.reply_2 = $._serializeMessage(t1.reply_2);
  }
  $._globalState().get$topEventLoop().enqueue$3(isolate, new $._NativeJsSendPort_send_anon0(t2, t1, shouldSerialize), 'receive ' + $.S(msg));
}
};

$$._NativeJsSendPort_send_anon0 = {"": ["this_7", "box_0", "shouldSerialize_6"],
 "super": "Closure",
 call$0: function() {
  var t1 = this.this_7;
  if (!(t1.get$_lib3_receivePort().get$_lib3_callback() == null)) {
    if (this.shouldSerialize_6 === true) {
      var t2 = this.box_0;
      t2.msg_1 = $._deserializeMessage(t2.msg_1);
      t2.reply_2 = $._deserializeMessage(t2.reply_2);
    }
    t1 = t1.get$_lib3_receivePort();
    t2 = this.box_0;
    t1._lib3_callback$2(t2.msg_1, t2.reply_2);
  }
}
};

$$._waitForPendingPorts_anon = {"": ["callback_0"],
 "super": "Closure",
 call$1: function(_) {
  return this.callback_0.call$0();
}
};

$$._WorkerSendPort_send_anon = {"": ["this_2", "message_1", "replyTo_0"],
 "super": "Closure",
 call$0: function() {
  var t1 = this.this_2;
  var t2 = this.replyTo_0;
  t1._checkReplyTo$1(t2);
  var workerMessage = $._serializeMessage($.makeLiteralMap(['command', 'message', 'port', t1, 'msg', this.message_1, 'replyTo', t2]));
  t2 = $._globalState().get$isWorker() === true;
  var t3 = $._globalState;
  if (t2)
    t3().get$mainManager().postMessage$1(workerMessage);
  else
    $.index(t3().get$managers(), t1.get$_workerId()).postMessage$1(workerMessage);
}
};

$$._PendingSendPortFinder_visitMap_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(e) {
  return this.this_0._lib3_dispatch$1(e);
}
};

$$._Copier_visitMap_anon = {"": ["this_2", "box_0"],
 "super": "Closure",
 call$2: function(key, val) {
  var t1 = this.box_0.copy_10;
  var t2 = this.this_2;
  $.indexSet(t1, t2._lib3_dispatch$1(key), t2._lib3_dispatch$1(val));
}
};

$$._PendingSendPortFinder_visitList_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(e) {
  return this.this_0._lib3_dispatch$1(e);
}
};

$$.Futures_wait_anon = {"": ["completer_5", "pos_4", "box_0", "result_3", "values_2"],
 "super": "Closure",
 call$1: function(value) {
  var t1 = this.values_2;
  $.indexSet(t1, this.pos_4, value);
  var t2 = this.box_0;
  var remaining = $.sub(t2.remaining_1, 1);
  t2.remaining_1 = remaining;
  if ($.eqB(remaining, 0) && this.result_3.get$isComplete() !== true)
    this.completer_5.complete$1(t1);
}
};

$$.Futures_wait_anon0 = {"": ["future_8", "completer_7", "result_6"],
 "super": "Closure",
 call$1: function(exception) {
  if (this.result_6.get$isComplete() !== true)
    this.completer_7.completeException$2(exception, this.future_8.get$stackTrace());
  return true;
}
};

$$.runTests_anon = {"": [],
 "super": "Closure",
 call$1: function(t) {
  return $.eq(t, $._soloTest);
}
};

$$.runTests_anon0 = {"": [],
 "super": "Closure",
 call$0: function() {
  $._testRunner.call$0();
}
};

$$.filterTests_anon = {"": ["re_0"],
 "super": "Closure",
 call$1: function(t) {
  return this.re_0.hasMatch$1(t.get$description());
}
};

$$.filterTests_anon0 = {"": ["testFilter_1"],
 "super": "Closure",
 call$1: function(t) {
  return this.testFilter_1.hasMatch$1(t.get$description());
}
};

$$._nextBatch_anon = {"": ["testCase_0"],
 "super": "Closure",
 call$0: function() {
  var t1 = this.testCase_0;
  t1.run$0();
  if (t1.get$isComplete() !== true && $.eqB(t1.get$callbackFunctionsOutstanding(), 0))
    t1.pass$0();
}
};

$$.Configuration__indent_anon = {"": [],
 "super": "Closure",
 call$1: function(line) {
  return '  ' + $.S(line);
}
};

$$._setup_anon = {"": [],
 "super": "Closure",
 call$2: function(s, _) {
  return s.onOpen$0();
}
};

$$._setup_anon0 = {"": [],
 "super": "Closure",
 call$2: function(s, _) {
  return s.onClose$0();
}
};

$$._setup_anon1 = {"": [],
 "super": "Closure",
 call$2: function(s, d) {
  return s.onMessage$1($.index(d, 'message'));
}
};

$$._setup_anon2 = {"": [],
 "super": "Closure",
 call$2: function(s, d) {
  return s.onError$2($.index(d, 'code'), $.index(d, 'description'));
}
};

$$._subscribe_anon = {"": ["handler_0"],
 "super": "Closure",
 call$1: function(e) {
  var detail = $.JSON_parse(e.get$detail());
  var token = $.index(detail, 'token');
  var socket = $.index($._sockets, token);
  if (!(socket == null) && !(socket.get$onMessage() == null))
    this.handler_0.call$2(socket, detail);
}
};

$$.startRootIsolate_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  $._TimerFactory__factory = $._timerFactory;
  return;
}
};

$$._EventLoop__runHelper_next = {"": ["this_0"],
 "super": "Closure",
 call$0: function() {
  if (this.this_0.runIteration$0() !== true)
    return;
  $._window().setTimeout$2(this, 0);
}
};

$$.anon1 = {"": ["this_1", "callback_0"],
 "super": "Closure",
 call$0: function() {
  return this.callback_0.call$1(this.this_1);
}
};

$$.anon2 = {"": ["this_1", "callback_0"],
 "super": "Closure",
 call$0: function() {
  return this.callback_0.call$1(this.this_1);
}
};

$$.Closure = {"": [],
 "super": "Object",
 toString$0: function() {
  return 'Closure';
},
 is$Function: true
};

$$.BoundClosure = {'':
['self', 'target'],
'super': 'Closure',
call$1: function(p0) { return this.self[this.target](p0); }
};
$$.BoundClosure0 = {'':
['self', 'target'],
'super': 'Closure',
call$1: function(p0) { return this.self[this.target](p0); },
 call$0: function() {
  return this.call$1($)
}
};
$$.BoundClosure1 = {'':
['self', 'target'],
'super': 'Closure',
call$1: function(p0) { return this.self[this.target](p0); },
 call$0: function() {
  return this.call$1($)
}
};
$$.BoundClosure2 = {'':
['self', 'target'],
'super': 'Closure',
call$0: function() { return this.self[this.target](); }
};
$$.BoundClosure3 = {'':
['self', 'target'],
'super': 'Closure',
call$4: function(p0, p1, p2, p3) { return this.self[this.target](p0, p1, p2, p3); }
};
$._InputElementEventsImpl$ = function(_ptr) {
  return new $._InputElementEventsImpl(_ptr);
};

$._StringBufferImpl$ = function(content$) {
  var t1 = new $._StringBufferImpl(null, null);
  t1._StringBufferImpl$1(content$);
  return t1;
};

$.eqB = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b) === true;
  return a === b;
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  return new $._NativeJsSendPort(_receivePort, isolateId);
};

$.set$length = function(receiver, newLength) {
  if ($.isJsArray(receiver)) {
    $.checkNull(newLength);
    if (!(typeof newLength === 'number' && Math.floor(newLength) === newLength))
      throw $.$$throw($.ArgumentError$(newLength));
    if (newLength < 0)
      throw $.$$throw($.IndexOutOfRangeException$(newLength));
    $.checkGrowable(receiver, 'set length');
    receiver.length = newLength;
  } else
    receiver.set$length(newLength);
  return newLength;
};

$._Device_userAgent = function() {
  return $.window().get$navigator().get$userAgent();
};

$.checkNum = function(value) {
  if (!(typeof value === 'number')) {
    $.checkNull(value);
    throw $.$$throw($.ArgumentError$(value));
  }
  return value;
};

$._TextTrackListEventsImpl$ = function(_ptr) {
  return new $._TextTrackListEventsImpl(_ptr);
};

$._serializeElement = function(e) {
  if (e.get$attributes().containsKey$1('data-dart_id') === true)
    var id = $.index(e.get$attributes(), 'data-dart_id');
  else {
    var t1 = $._localNextElementId;
    $._localNextElementId = $.add(t1, 1);
    id = 'dart-' + $.S(t1);
    $.indexSet(e.get$attributes(), 'data-dart_id', id);
  }
  t1 = $.document().get$documentElement();
  if (!(e == null ? t1 == null : e === t1))
    for (var top$ = e; true;) {
      if (top$.get$attributes().containsKey$1('data-dart_temporary_attached') === true) {
        var newValue = $.concat($.index(top$.get$attributes(), 'data-dart_temporary_attached'), 'a');
        $.indexSet(top$.get$attributes(), 'data-dart_temporary_attached', newValue);
        break;
      }
      if (top$.get$parent() == null) {
        $.indexSet(top$.get$attributes(), 'data-dart_temporary_attached', 'a');
        $.add$1($.document().get$documentElement().get$elements(), top$);
        break;
      }
      t1 = top$.get$parent();
      var t2 = $.document().get$documentElement();
      if (t1 == null ? t2 == null : t1 === t2)
        break;
      top$ = top$.get$parent();
    }
  return id;
};

$.StackTrace$ = function(stack) {
  return new $.StackTrace(stack);
};

$._MediaStreamTrackEventsImpl$ = function(_ptr) {
  return new $._MediaStreamTrackEventsImpl(_ptr);
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$.isJsArray = function(value) {
  return !(value == null) && value.constructor === Array;
};

$._fillStatics = function(context) {
  $globals = context.isolateStatics;
  $static_init();
};

$._getNewIsolateId = function() {
  if (!window.$dart$isolate$counter)
    window.$dart$isolate$counter = 1;
  return window.$dart$isolate$counter++;
};

$.ListIterator$ = function(list) {
  return new $.ListIterator(0, list);
};

$._JavaScriptAudioNodeEventsImpl$ = function(_ptr) {
  return new $._JavaScriptAudioNodeEventsImpl(_ptr);
};

$._JsonParser$ = function(json) {
  var t1 = new $._JsonParser(json, $.get$length(json), 0);
  t1._JsonParser$1(json);
  return t1;
};

$._ProxiedObjectTable$ = function() {
  var t1 = $.makeLiteralMap([]);
  var t2 = $.ReceivePortSync$();
  var t3 = $.ListImplementation_List(null);
  var t4 = $.ListImplementation_List(null);
  t4 = new $._ProxiedObjectTable('dart-ref', 0, 0, t1, t2, $.Set_Set(), t3, t4);
  t4._ProxiedObjectTable$0();
  return t4;
};

$.ReceivePortSync__getListenerName = function(isolateId, portId) {
  return 'dart-port-' + $.S(isolateId) + '-' + $.S(portId);
};

$._IDBTransactionEventsImpl$ = function(_ptr) {
  return new $._IDBTransactionEventsImpl(_ptr);
};

$.buildDynamicMetadata = function(inputTable) {
  var result = [];
  for (var i = 0; i < inputTable.length; ++i) {
    var tag = inputTable[i][0];
    var array = inputTable[i];
    var tags = array[1];
    var set = {};
    var tagNames = tags.split('|');
    for (var j = 0, index = 1; j < tagNames.length; ++j) {
      $.propertySet(set, tagNames[j], true);
      index = j;
      array = tagNames;
    }
    result.push($.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.dynamicFunction = function(name$) {
  var f = Object.prototype[name$];
  if (!(f == null) && !!f.methods)
    return f.methods;
  var methods = {};
  var dartMethod = Object.getPrototypeOf($.CTC21)[name$];
  if (!(dartMethod == null))
    $.propertySet(methods, 'Object', dartMethod);
  var bind = function() {return $.dynamicBind.call$4(this, name$, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  $.defineProperty(Object.prototype, name$, bind);
  return methods;
};

$.ListImplementation_List$from = function(other) {
  return $.ListImplementation__from(other);
};

$._Timer$repeating = function(milliSeconds, callback) {
  var t1 = new $._Timer(false, null);
  t1._Timer$repeating$2(milliSeconds, callback);
  return t1;
};

$._EventSourceEventsImpl$ = function(_ptr) {
  return new $._EventSourceEventsImpl(_ptr);
};

$.toString = function(value) {
  if (typeof value == "object" && value !== null)
    if ($.isJsArray(value))
      return $.Collections_collectionToString(value);
    else
      return value.toString$0();
  if (value === 0 && (1 / value) < 0)
    return '-0.0';
  if (value == null)
    return 'null';
  if (typeof value == "function")
    return 'Closure';
  return String(value);
};

$.Primitives_parseDouble = function(string) {
  $.checkString(string);
  if (!/^\s*(?:NaN|[+-]?(?:Infinity|(?:\.\d+|\d+(?:\.\d+)?)(?:[eE][+-]?\d+)?))\s*$/.test(string))
    throw $.$$throw($.FormatException$(string));
  var result = parseFloat(string);
  if ($.get$isNaN(result) === true && !$.eqB(string, 'NaN'))
    throw $.$$throw($.FormatException$(string));
  return result;
};

$._convertDartToNative_PrepareForStructuredClone = function(value) {
  var values = [];
  var copies = [];
  var t1 = new $._convertDartToNative_PrepareForStructuredClone_findSlot(copies, values);
  var t2 = new $._convertDartToNative_PrepareForStructuredClone_readSlot(copies);
  var t3 = new $._convertDartToNative_PrepareForStructuredClone_writeSlot(copies);
  var t4 = new $._convertDartToNative_PrepareForStructuredClone_cleanupSlots();
  var copy = new $._convertDartToNative_PrepareForStructuredClone_walk(t3, t1, t2).call$1(value);
  t4.call$0();
  return copy;
};

$.floor = function(receiver) {
  return Math.floor(receiver);
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$0());
  t1._JsCopier$0();
  return t1;
};

$._WebSocketEventsImpl$ = function(_ptr) {
  return new $._WebSocketEventsImpl(_ptr);
};

$.shr = function(a, b) {
  if ($.checkNumbers(a, b)) {
    if (b < 0)
      throw $.$$throw($.ArgumentError$(b));
    if (a > 0) {
      if (b > 31)
        return 0;
      return a >>> b;
    }
    if (b > 31)
      b = 31;
    return (a >> b) >>> 0;
  }
  return a.operator$shr$1(b);
};

$._convertDartToNative_SerializedScriptValue = function(value) {
  return $._convertDartToNative_PrepareForStructuredClone(value);
};

$.and = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a & b) >>> 0;
  return a.operator$and$1(b);
};

$._RemoteSendPortSync$ = function(_isolateId, _portId) {
  return new $._RemoteSendPortSync(_isolateId, _portId);
};

$._MediaStreamEventsImpl$ = function(_ptr) {
  return new $._MediaStreamEventsImpl(_ptr);
};

$.mul$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a * b;
  return a.operator$mul$1(b);
};

$._deserializeMessage = function(message) {
  if ($._globalState().get$needSerialization() === true)
    return $._JsDeserializer$0().deserialize$1(message);
  else
    return message;
};

$._AllMatchesIterator$ = function(re, _str) {
  return new $._AllMatchesIterator($.JSSyntaxRegExp__globalVersionOf(re), _str, null, false);
};

$._waitForPendingPorts = function(message, callback) {
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $.Futures_wait(finder.ports).then$1(new $._waitForPendingPorts_anon(callback));
};

$.getTypeNameOf = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return $._getTypeNameOf.call$1(obj);
};

$._DeepMatcher$ = function(_expected, limit) {
  return new $._DeepMatcher(_expected, limit, null);
};

$.contains$1 = function(receiver, other) {
  if (typeof receiver !== 'string' && (typeof receiver !== 'object' || receiver === null || receiver.constructor !== Array && !receiver.is$JavaScriptIndexingBehavior()))
    return $.contains$1$bailout(1, receiver, other);
  if (typeof receiver === 'string')
    return $.contains$2(receiver, other, 0);
  else if ($.isJsArray(receiver)) {
    for (var i = 0; i < receiver.length; ++i)
      if ($.eqB(other, receiver[i]))
        return true;
    return false;
  }
  return receiver.contains$1(other);
};

$._handleCallbackFunctionComplete = function() {
  $._defer(new $._handleCallbackFunctionComplete_anon());
};

$._EventsImpl$ = function(_ptr) {
  return new $._EventsImpl(_ptr);
};

$.toUpperCase = function(receiver) {
  if (!(typeof receiver === 'string'))
    return receiver.toUpperCase$0();
  return receiver.toUpperCase();
};

$._RTCPeerConnectionEventsImpl$ = function(_ptr) {
  return new $._RTCPeerConnectionEventsImpl(_ptr);
};

$.StringBuffer_StringBuffer = function(content$) {
  return $._StringBufferImpl$(content$);
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$.neg = function(a) {
  if (typeof a === "number")
    return -a;
  return a.negate$0();
};

$.NoSuchMethodError$ = function(_receiver, _functionName, _arguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _functionName, _arguments, existingArgumentNames);
};

$.HashSetImplementation$ = function() {
  var t1 = new $.HashSetImplementation(null);
  t1.HashSetImplementation$0();
  return t1;
};

$.Strings_join = function(strings, separator) {
  return $.StringImplementation_join(strings, separator);
};

$.StringImplementation_join = function(strings, separator) {
  $.checkNull(strings);
  $.checkNull(separator);
  return $.stringJoinUnchecked($.StringImplementation__toJsStringArray(strings), separator);
};

$.add$1 = function(receiver, value) {
  if ($.isJsArray(receiver)) {
    $.checkGrowable(receiver, 'add');
    receiver.push(value);
    return;
  }
  return receiver.add$1(value);
};

$.get$length = function(receiver) {
  if (typeof receiver === 'string' || $.isJsArray(receiver))
    return receiver.length;
  else
    return receiver.get$length();
};

$.Callback$many = function(f) {
  var t1 = new $.Callback(null, null, null);
  t1.Callback$many$1(f);
  return t1;
};

$.dynamicBind = function(obj, name$, methods, arguments$) {
  var tag = $.getTypeNameOf(obj);
  var method = methods[tag];
  if (method == null && !($._dynamicMetadata0() == null))
    for (var i = 0; i < $._dynamicMetadata0().length; ++i) {
      var entry = $._dynamicMetadata0()[i];
      if (entry.get$_set()[tag]) {
        method = methods[entry.get$_tag()];
        if (!(method == null))
          break;
      }
    }
  if (method == null)
    method = methods['Object'];
  var proto = Object.getPrototypeOf(obj);
  if (method == null)
    method = function () {if (Object.getPrototypeOf(this) === proto) {throw new TypeError(name$ + " is not a function");} else {return Object.prototype[name$].apply(this, arguments);}};
  if (!proto.hasOwnProperty(name$))
    $.defineProperty(proto, name$, method);
  return method.apply(obj, arguments$);
};

$.JSON_parse = function(json) {
  return $._JsonParser$(json).parseToplevel$0();
};

$.regExpMakeNative = function(regExp, global) {
  var pattern = regExp.get$pattern();
  var multiLine = regExp.get$multiLine();
  var ignoreCase = regExp.get$ignoreCase();
  $.checkString(pattern);
  var sb = $.StringBuffer_StringBuffer('');
  if (multiLine === true)
    $.add$1(sb, 'm');
  if (ignoreCase === true)
    $.add$1(sb, 'i');
  if (global === true)
    $.add$1(sb, 'g');
  try {
    return new RegExp(pattern, $.toString(sb));
  } catch (exception) {
    var t1 = $.unwrapException(exception);
    var e = t1;
    throw $.$$throw($.IllegalJSRegExpException$(pattern, String(e)));
  }

};

$.double_parse = function(source) {
  return $.Primitives_parseDouble(source);
};

$.int_parse = function(source) {
  return $.Primitives_parseInt(source);
};

$.main = function() {
  $.query('pre#output').set$text('Hello');
  $.test('basic', new $.main_anon());
};

$.ceil = function(receiver) {
  return Math.ceil(receiver);
};

$.ListImplementation__from = function(other) {
  var result = $.ListImplementation_List(null);
  for (var t1 = $.iterator(other); t1.get$hasNext() === true;)
    result.push(t1.next$0());
  return result;
};

$.Primitives_getYear = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0) : ($.Primitives_lazyAsJsDate(receiver).getFullYear() + 0);
};

$.configureExpectFailureHandler = function(handler) {
  $._assertFailureHandler = handler == null ? $.DefaultFailureHandler$() : handler;
};

$.Socket$_ = function(_token) {
  return new $.Socket(_token, null, null, null, null);
};

$._FrozenElementListIterator$ = function(_list) {
  return new $._FrozenElementListIterator(_list, 0);
};

$.Primitives_getHours = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0) : ($.Primitives_lazyAsJsDate(receiver).getHours() + 0);
};

$.ReceivePortSync$ = function() {
  var t1 = new $.ReceivePortSync(null, null, null);
  t1.ReceivePortSync$0();
  return t1;
};

$._dispatchEvent = function(receiver, message) {
  var event$ = $.CustomEvent_CustomEvent(receiver, false, false, $.JSON_stringify(message));
  $.window().$dom_dispatchEvent$1(event$);
};

$.Maps_mapToString = function(m) {
  var result = $.StringBuffer_StringBuffer('');
  $.Maps__emitMap(m, result, $.ListImplementation_List(null));
  return $.toString(result);
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  if ($.eqB(numberOfArguments, 0))
    return $._callInIsolate(isolate, new $.invokeClosure_anon(closure));
  else if ($.eqB(numberOfArguments, 1))
    return $._callInIsolate(isolate, new $.invokeClosure_anon0(closure, arg1));
  else if ($.eqB(numberOfArguments, 2))
    return $._callInIsolate(isolate, new $.invokeClosure_anon1(closure, arg1, arg2));
  else
    throw $.$$throw($._ExceptionImplementation$('Unsupported number of arguments for wrapped closure'));
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$._deserializedFunctionTable = function() {
  if ($.__deserializedFunctionTable == null)
    $.__deserializedFunctionTable = $._DeserializedFunctionTable$();
  return $.__deserializedFunctionTable;
};

$.geB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a >= b : $.ge$slow(a, b) === true;
};

$._isJavaScriptSimpleObject = function(value) {
  return Object.getPrototypeOf(value) === Object.prototype;
};

$.StringMatch$ = function(_start, str, pattern) {
  return new $.StringMatch(_start, str, pattern);
};

$.ioore = function(index) {
  throw $.$$throw($.IndexOutOfRangeException$(index));
};

$._ChildNodeListLazy$ = function(_this) {
  return new $._ChildNodeListLazy(_this);
};

$._callInIsolate = function(isolate, function$) {
  isolate.eval$1(function$);
  $._globalState().get$topEventLoop().run$0();
};

$._convertNativeToDart_IDBKey = function(nativeKey) {
  if (new $._convertNativeToDart_IDBKey_containsDate().call$1(nativeKey) === true)
    throw $.$$throw($.CTC14);
  return nativeKey;
};

$._initialize = function() {
  if (!($._jsPortSync == null))
    return;
  $._inject('(function() {\n  // Proxy support for js.dart.\n\n  var globalContext = window;\n\n  // Table for local objects and functions that are proxied.\n  // TODO(vsm): Merge into one.\n  function ProxiedReferenceTable(name) {\n    // Name for debugging.\n    this.name = name;\n\n    // Table from IDs to JS objects.\n    this.map = {};\n\n    // Generator for new IDs.\n    this._nextId = 0;\n\n    // Counter for deleted proxies.\n    this._deletedCount = 0;\n\n    // Flag for one-time initialization.\n    this._initialized = false;\n\n    // Ports for managing communication to proxies.\n    this.port = new ReceivePortSync();\n    this.sendPort = this.port.toSendPort();\n\n    // Set of IDs that are global.\n    // These will not be freed on an exitScope().\n    this.globalIds = {};\n\n    // Stack of scoped handles.\n    this.handleStack = [];\n\n    // Stack of active scopes where each value is represented by the size of\n    // the handleStack at the beginning of the scope.  When an active scope\n    // is popped, the handleStack is restored to where it was when the\n    // scope was entered.\n    this.scopeIndices = [];\n  }\n\n  // Number of valid IDs.  This is the number of objects (global and local)\n  // kept alive by this table.\n  ProxiedReferenceTable.prototype.count = function () {\n    return Object.keys(this.map).length;\n  }\n\n  // Number of total IDs ever allocated.\n  ProxiedReferenceTable.prototype.total = function () {\n    return this.count() + this._deletedCount;\n  }\n\n  // Adds an object to the table and return an ID for serialization.\n  ProxiedReferenceTable.prototype.add = function (obj) {\n    if (this.scopeIndices.length == 0) {\n      throw "Cannot allocate a proxy outside of a scope.";\n    }\n    // TODO(vsm): Cache refs for each obj?\n    var ref = this.name + \'-\' + this._nextId++;\n    this.handleStack.push(ref);\n    this.map[ref] = obj;\n    return ref;\n  }\n\n  ProxiedReferenceTable.prototype._initializeOnce = function () {\n    if (!this._initialized) {\n      this._initialize();\n      this._initialized = true;\n    }\n  }\n\n  // Overridable initialization on first use hook.\n  ProxiedReferenceTable.prototype._initialize = function () {}\n\n  // Enters a new scope for this table.\n  ProxiedReferenceTable.prototype.enterScope = function() {\n    this._initializeOnce();\n    this.scopeIndices.push(this.handleStack.length);\n  }\n  \n  // Invalidates all non-global IDs in the current scope and\n  // exit the current scope.\n  ProxiedReferenceTable.prototype.exitScope = function() {\n    var start = this.scopeIndices.pop();\n    for (var i = start; i < this.handleStack.length; ++i) {\n      var key = this.handleStack[i];\n      if (!this.globalIds.hasOwnProperty(key)) {\n        delete this.map[this.handleStack[i]];\n        this._deletedCount++;\n      }\n    }\n    this.handleStack = this.handleStack.splice(0, start);\n  }\n  \n  // Makes this ID globally scope.  It must be explicitly invalidated.\n  ProxiedReferenceTable.prototype.globalize = function(id) {\n    this.globalIds[id] = true;\n  }\n\n  // Invalidates this ID, potentially freeing its corresponding object.\n  ProxiedReferenceTable.prototype.invalidate = function(id) {\n    var old = this.get(id);\n    delete this.globalIds[id];\n    delete this.map[id];\n    this._deletedCount++;\n    return old;\n  }\n\n  // Gets the object or function corresponding to this ID.\n  ProxiedReferenceTable.prototype.get = function (id) {\n    if (!this.map.hasOwnProperty(id)) {\n      throw \'Proxy \' + id + \' has been invalidated.\'\n    }\n    return this.map[id];\n  }\n\n  // Subtype for managing function proxies.\n  function ProxiedFunctionTable() {}\n\n  ProxiedFunctionTable.prototype = new ProxiedReferenceTable(\'func-ref\');\n\n  ProxiedFunctionTable.prototype._initialize = function () {\n    // Configure this table\'s port to invoke the corresponding function given\n    // its ID.\n    // TODO(vsm): Should we enter / exit a scope?\n    var table = this;\n\n    this.port.receive(function (message) {\n      try {\n        var id = message[0];\n        var args = message[1].map(deserialize);\n        var f = table.get(id);\n        // TODO(vsm): Should we capture _this_ automatically?\n        return [ \'return\', serialize(f.apply(null, args)) ];\n      } catch (e) {\n        return [ \'throws\', e.toString() ];\n      }\n    });\n  }\n\n  // The singleton table for proxied local functions.\n  var proxiedFunctionTable = new ProxiedFunctionTable();\n\n  // Subtype for proxied local objects.\n  function ProxiedObjectTable() {}\n\n  ProxiedObjectTable.prototype = new ProxiedReferenceTable(\'js-ref\');\n\n  ProxiedObjectTable.prototype._initialize = function () {\n    // Configure this table\'s port to forward methods, getters, and setters\n    // from the remote proxy to the local object.\n    var table = this;\n\n    this.port.receive(function (message) {\n      // TODO(vsm): Support a mechanism to register a handler here.\n      try {\n        var receiver = table.get(message[0]);\n        var method = message[1];\n        var args = message[2].map(deserialize);\n        if (method.indexOf("get:") == 0) {\n          // Getter.\n          var field = method.substring(4);\n          if (field in receiver && args.length == 0) {\n            return [ \'return\', serialize(receiver[field]) ];\n          }\n        } else if (method.indexOf("set:") == 0) {\n          // Setter.\n          var field = method.substring(4);\n          if (args.length == 1) {\n            return [ \'return\', serialize(receiver[field] = args[0]) ];\n          }\n        } else if (method == \'[]\' && args.length == 1) {\n          // Index getter.\n          return [ \'return\', serialize(receiver[args[0]]) ];\n        } else if (method == \'[]=\' && args.length == 2) {\n          // Index setter.\n          return [ \'return\', serialize(receiver[args[0]] = args[1]) ];\n        } else {\n          var f = receiver[method];\n          if (f) {\n            var result = f.apply(receiver, args);\n            return [ \'return\', serialize(result) ];\n          }\n        }\n        return [ \'none\' ];\n      } catch (e) {\n        return [ \'throws\', e.toString() ];\n      }\n    });\n  }\n\n  // Singleton for local proxied objects.\n  var proxiedObjectTable = new ProxiedObjectTable();\n\n  // DOM element serialization code.\n  var _localNextElementId = 0;\n  var _DART_ID = \'data-dart_id\';\n  var _DART_TEMPORARY_ATTACHED = \'data-dart_temporary_attached\';\n\n  function serializeElement(e) {\n    // TODO(vsm): Use an isolate-specific id.\n    var id;\n    if (e.hasAttribute(_DART_ID)) {\n      id = e.getAttribute(_DART_ID);\n    } else {\n      id = (_localNextElementId++).toString();\n      e.setAttribute(_DART_ID, id);\n    }\n    if (e !== document.documentElement) {\n      // Element must be attached to DOM to be retrieve in js part.\n      // Attach top unattached parent to avoid detaching parent of "e" when\n      // appending "e" directly to document. We keep count of elements\n      // temporarily attached to prevent detaching top unattached parent to\n      // early. This count is equals to the length of _DART_TEMPORARY_ATTACHED\n      // attribute. There could be other elements to serialize having the same\n      // top unattached parent.\n      var top = e;\n      while (true) {\n        if (top.hasAttribute(_DART_TEMPORARY_ATTACHED)) {\n          var oldValue = top.getAttribute(_DART_TEMPORARY_ATTACHED);\n          var newValue = oldValue + "a";\n          top.setAttribute(_DART_TEMPORARY_ATTACHED, newValue);\n          break;\n        }\n        if (top.parentNode == null) {\n          top.setAttribute(_DART_TEMPORARY_ATTACHED, "a");\n          document.documentElement.appendChild(top);\n          break;\n        }\n        if (top.parentNode === document.documentElement) {\n          // e was already attached to dom\n          break;\n        }\n        top = top.parentNode;\n      }\n    }\n    return id;\n  }\n\n  function deserializeElement(id) {\n    // TODO(vsm): Clear the attribute.\n    var list = document.querySelectorAll(\'[\' + _DART_ID + \'="\' + id + \'"]\');\n\n    if (list.length > 1) throw \'Non unique ID: \' + id;\n    if (list.length == 0) {\n      throw \'Element must be attached to the document: \' + id;\n    }\n    var e = list[0];\n    if (e !== document.documentElement) {\n      // detach temporary attached element\n      var top = e;\n      while (true) {\n        if (top.hasAttribute(_DART_TEMPORARY_ATTACHED)) {\n          var oldValue = top.getAttribute(_DART_TEMPORARY_ATTACHED);\n          var newValue = oldValue.substring(1);\n          top.setAttribute(_DART_TEMPORARY_ATTACHED, newValue);\n          // detach top only if no more elements have to be unserialized\n          if (top.getAttribute(_DART_TEMPORARY_ATTACHED).length === 0) {\n            top.removeAttribute(_DART_TEMPORARY_ATTACHED);\n            document.documentElement.removeChild(top);\n          }\n          break;\n        }\n        if (top.parentNode === document.documentElement) {\n          // e was already attached to dom\n          break;\n        }\n        top = top.parentNode;\n      }\n    }\n    return e;\n  }\n\n\n  // Type for remote proxies to Dart objects.\n  function DartProxy(id, sendPort) {\n    this.id = id;\n    this.port = sendPort;\n  }\n\n  // Serializes JS types to SendPortSync format:\n  // - primitives -> primitives\n  // - sendport -> sendport\n  // - DOM element -> [ \'domref\', element-id ]\n  // - Function -> [ \'funcref\', function-id, sendport ]\n  // - Object -> [ \'objref\', object-id, sendport ]\n  function serialize(message) {\n    if (message == null) {\n      return null;  // Convert undefined to null.\n    } else if (typeof(message) == \'string\' ||\n               typeof(message) == \'number\' ||\n               typeof(message) == \'boolean\') {\n      // Primitives are passed directly through.\n      return message;\n    } else if (message instanceof SendPortSync) {\n      // Non-proxied objects are serialized.\n      return message;\n    } else if (message instanceof Element && \n        (message.ownerDocument == null || message.ownerDocument == document)) {\n      return [ \'domref\', serializeElement(message) ];\n    } else if (typeof(message) == \'function\') {\n      if (\'_dart_id\' in message) {\n        // Remote function proxy.\n        var remoteId = message._dart_id;\n        var remoteSendPort = message._dart_port;\n        return [ \'funcref\', remoteId, remoteSendPort ];\n      } else {\n        // Local function proxy.\n        return [ \'funcref\',\n                 proxiedFunctionTable.add(message),\n                 proxiedFunctionTable.sendPort ];\n      }\n    } else if (message instanceof DartProxy) {\n      // Remote object proxy.\n      return [ \'objref\', message.id, message.port ];\n    } else {\n      // Local object proxy.\n      return [ \'objref\',\n               proxiedObjectTable.add(message),\n               proxiedObjectTable.sendPort ];\n    }\n  }\n\n  function deserialize(message) {\n    if (message == null) {\n      return null;  // Convert undefined to null.\n    } else if (typeof(message) == \'string\' ||\n               typeof(message) == \'number\' ||\n               typeof(message) == \'boolean\') {\n      // Primitives are passed directly through.\n      return message;\n    } else if (message instanceof SendPortSync) {\n      // Serialized type.\n      return message;\n    }\n    var tag = message[0];\n    switch (tag) {\n      case \'funcref\': return deserializeFunction(message);\n      case \'objref\': return deserializeObject(message);\n      case \'domref\': return deserializeElement(message[1]);\n    }\n    throw \'Unsupported serialized data: \' + message;\n  }\n\n  // Create a local function that forwards to the remote function.\n  function deserializeFunction(message) {\n    var id = message[1];\n    var port = message[2];\n    // TODO(vsm): Add a more robust check for a local SendPortSync.\n    if ("receivePort" in port) {\n      // Local function.\n      return proxiedFunctionTable.get(id);\n    } else {\n      // Remote function.  Forward to its port.\n      var f = function () {\n        var depth = enterScope();\n        try {\n          var args = Array.prototype.slice.apply(arguments).map(serialize);\n          var result = port.callSync([id, args]);\n          if (result[0] == \'throws\') throw deserialize(result[1]);\n          return deserialize(result[1]);\n        } finally {\n          exitScope(depth);\n        }\n      };\n      // Cache the remote id and port.\n      f._dart_id = id;\n      f._dart_port = port;\n      return f;\n    }\n  }\n\n  // Creates a DartProxy to forwards to the remote object.\n  function deserializeObject(message) {\n    var id = message[1];\n    var port = message[2];\n    // TODO(vsm): Add a more robust check for a local SendPortSync.\n    if ("receivePort" in port) {\n      // Local object.\n      return proxiedObjectTable.get(id);\n    } else {\n      // Remote object.\n      return new DartProxy(id, port);\n    }\n  }\n\n  // Remote handler to construct a new JavaScript object given its\n  // serialized constructor and arguments.\n  function construct(args) {\n    args = args.map(deserialize);\n    var constructor = args[0];\n    args = Array.prototype.slice.call(args, 1);\n\n    // Dummy Type with correct constructor.\n    var Type = function(){};\n    Type.prototype = constructor.prototype;\n\n    // Create a new instance\n    var instance = new Type();\n\n    // Call the original constructor.\n    var ret = constructor.apply(instance, args);\n\n    return serialize(Object(ret) === ret ? ret : instance);\n  }\n\n  // Remote handler to construct a native JavaScript Array.\n  function constructArray() {\n    return serialize(new Array());\n  }\n\n  // Remote handler to return the top-level JavaScript context.\n  function context(data) {\n    return serialize(globalContext);\n  }\n\n  // Remote handler for debugging.\n  function debug() {\n    var live = proxiedObjectTable.count() + proxiedFunctionTable.count();\n    var total = proxiedObjectTable.total() + proxiedFunctionTable.total();\n    return \'JS objects Live : \' + live +\n           \' (out of \' + total + \' ever allocated).\';\n  }\n\n  // Return true if two JavaScript proxies are equal (==).\n  function proxyEquals(args) {\n    return deserialize(args[0]) == deserialize(args[1]);\n  }\n\n  // Return true if a JavaScript proxy is instance of a given type (instanceof).\n  function proxyInstanceof(args) {\n    return deserialize(args[0]) instanceof deserialize(args[1]);\n  }\n\n  function makeGlobalPort(name, f) {\n    var port = new ReceivePortSync();\n    port.receive(f);\n    window.registerPort(name, port.toSendPort());\n  }\n\n  // Enters a new scope in the JavaScript context.\n  function enterJavaScriptScope() {\n    proxiedObjectTable.enterScope();\n    proxiedFunctionTable.enterScope();\n  }\n\n  // Enters a new scope in both the JavaScript and Dart context.\n  var _dartEnterScopePort = null;\n  function enterScope() {\n    enterJavaScriptScope();\n    if (!_dartEnterScopePort) {\n      _dartEnterScopePort = window.lookupPort(\'js-dart-enter-scope\');\n    }\n    return _dartEnterScopePort.callSync([]);\n  }\n\n  // Exits the current scope (and invalidate local IDs) in the JavaScript\n  // context.\n  function exitJavaScriptScope() {\n    proxiedFunctionTable.exitScope();\n    proxiedObjectTable.exitScope();\n  }\n\n  // Exits the current scope in both the JavaScript and Dart context.\n  var _dartExitScopePort = null;\n  function exitScope(depth) {\n    exitJavaScriptScope();\n    if (!_dartExitScopePort) {\n      _dartExitScopePort = window.lookupPort(\'js-dart-exit-scope\');\n    }\n    return _dartExitScopePort.callSync([ depth ]);\n  }\n\n  makeGlobalPort(\'dart-js-context\', context);\n  makeGlobalPort(\'dart-js-create\', construct);\n  makeGlobalPort(\'dart-js-create-array\', constructArray);\n  makeGlobalPort(\'dart-js-debug\', debug);\n  makeGlobalPort(\'dart-js-equals\', proxyEquals);\n  makeGlobalPort(\'dart-js-instanceof\', proxyInstanceof);\n  makeGlobalPort(\'dart-js-enter-scope\', enterJavaScriptScope);\n  makeGlobalPort(\'dart-js-exit-scope\', exitJavaScriptScope);\n  makeGlobalPort(\'dart-js-globalize\', function(data) {\n    if (data[0] == "objref") return proxiedObjectTable.globalize(data[1]);\n    // TODO(vsm): Do we ever need to globalize functions?\n    throw \'Illegal type: \' + data[0];\n  });\n  makeGlobalPort(\'dart-js-invalidate\', function(data) {\n    if (data[0] == "objref") return proxiedObjectTable.invalidate(data[1]);\n    // TODO(vsm): Do we ever need to globalize functions?\n    throw \'Illegal type: \' + data[0];\n  });\n})();\n');
  $._jsPortSync = $.window().lookupPort$1('dart-js-context');
  $._jsPortCreate = $.window().lookupPort$1('dart-js-create');
  $._jsPortCreateArray = $.window().lookupPort$1('dart-js-create-array');
  $._jsPortDebug = $.window().lookupPort$1('dart-js-debug');
  $._jsPortEquals = $.window().lookupPort$1('dart-js-equals');
  $._jsPortInstanceof = $.window().lookupPort$1('dart-js-instanceof');
  $._jsEnterJavaScriptScope = $.window().lookupPort$1('dart-js-enter-scope');
  $._jsExitJavaScriptScope = $.window().lookupPort$1('dart-js-exit-scope');
  $._jsGlobalize = $.window().lookupPort$1('dart-js-globalize');
  $._jsInvalidate = $.window().lookupPort$1('dart-js-invalidate');
  var t1 = $.ReceivePortSync$();
  t1.receive$1(new $._initialize_anon());
  $._dartEnterDartScope = t1;
  t1 = $.ReceivePortSync$();
  t1.receive$1(new $._initialize_anon0());
  $._dartExitDartScope = t1;
  $.window().registerPort$2('js-dart-enter-scope', $._dartEnterDartScope.toSendPort$0());
  $.window().registerPort$2('js-dart-exit-scope', $._dartExitDartScope.toSendPort$0());
  $.scoped(new $._initialize_anon1());
};

$._RTCDataChannelEventsImpl$ = function(_ptr) {
  return new $._RTCDataChannelEventsImpl(_ptr);
};

$.leB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a <= b : $.le$slow(a, b) === true;
};

$.regExpAttachGlobalNative = function(regExp) {
  regExp._re = $.regExpMakeNative(regExp, true);
};

$._IDBRequestEventsImpl$ = function(_ptr) {
  return new $._IDBRequestEventsImpl(_ptr);
};

$._CustomEventFactoryProvider_createCustomEvent = function(type, canBubble, cancelable, detail) {
  var e = $._document().$dom_createEvent$1('CustomEvent');
  e.$dom_initCustomEvent$4(type, canBubble, cancelable, detail);
  return e;
};

$._DOMWindowCrossFrameImpl$ = function(_window) {
  return new $._DOMWindowCrossFrameImpl(_window);
};

$._subscribe = function(type, handler) {
  $.index($.window().get$on(), type).add$2(new $._subscribe_anon(handler), false);
};

$.Collections_collectionToString = function(c) {
  var result = $.StringBuffer_StringBuffer('');
  $.Collections__emitCollection(c, result, $.ListImplementation_List(null));
  return $.toString(result);
};

$._SharedWorkerContextEventsImpl$ = function(_ptr) {
  return new $._SharedWorkerContextEventsImpl(_ptr);
};

$.indexOf$2 = function(receiver, element, start) {
  if ($.isJsArray(receiver)) {
    if (!(typeof start === 'number' && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    return $.Arrays_indexOf(receiver, element, start, receiver.length);
  } else if (typeof receiver === 'string') {
    $.checkNull(element);
    if (!(typeof start === 'number' && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (!(typeof element === 'string'))
      throw $.$$throw($.ArgumentError$(element));
    if (start < 0)
      return -1;
    return receiver.indexOf(element, start);
  }
  return receiver.indexOf$2(element, start);
};

$._JsonStringifier$ = function(sb) {
  return new $._JsonStringifier(sb, []);
};

$._TextTrackEventsImpl$ = function(_ptr) {
  return new $._TextTrackEventsImpl(_ptr);
};

$.DoubleLinkedQueue$ = function() {
  var t1 = new $.DoubleLinkedQueue(null);
  t1.DoubleLinkedQueue$0();
  return t1;
};

$._Elements_createScriptElement = function() {
  return $._document().$dom_createElement$1('script');
};

$.NoSuchMethodError_safeToString = function(object) {
  if (typeof object === 'number' && Math.floor(object) === object || typeof object === 'number' || typeof object === 'boolean' || null == object)
    return $.toString(object);
  if (typeof object === 'string')
    return '"' + $.S($.replaceAll($.replaceAll($.replaceAll($.replaceAll(object, '\\', '\\\\'), '\n', '\\n'), '\r', '\\r'), '"', '\\"')) + '"';
  return $.Primitives_objectToString(object);
};

$._RemoteSendPortSync__call = function(isolateId, portId, message) {
  var t1 = {};
  var target = 'dart-port-' + $.S(isolateId) + '-' + $.S(portId);
  var source = target + '-result';
  t1.result_1 = null;
  var listener = new $._RemoteSendPortSync__call_anon(t1);
  $.add$1($.index($.window().get$on(), source), listener);
  $._dispatchEvent(target, [source, message]);
  $.index($.window().get$on(), source).remove$1(listener);
  return t1.result_1;
};

$._SVGElementInstanceEventsImpl$ = function(_ptr) {
  return new $._SVGElementInstanceEventsImpl(_ptr);
};

$.Primitives_getDay = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0) : ($.Primitives_lazyAsJsDate(receiver).getDate() + 0);
};

$._LocalSendPortSync$_internal = function(_receivePort) {
  return new $._LocalSendPortSync(_receivePort);
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$.regExpTest = function(regExp, str) {
  return $.regExpGetNative(regExp).test(str);
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator = $.iterator(keyValuePairs);
  var result = $.LinkedHashMapImplementation$();
  for (; iterator.get$hasNext() === true;)
    result.operator$indexSet$2(iterator.next$0(), iterator.next$0());
  return result;
};

$.StringImplementation_concatAll = function(strings) {
  return $.stringJoinUnchecked($.StringImplementation__toJsStringArray(strings), '');
};

$._FilteredElementList$ = function(node) {
  return new $._FilteredElementList(node, node.get$nodes());
};

$.NoMoreElementsException$ = function() {
  return new $.NoMoreElementsException();
};

$.addAll = function(receiver, collection) {
  if (!$.isJsArray(receiver))
    return receiver.addAll$1(collection);
  var iterator = $.iterator(collection);
  for (; iterator.get$hasNext() === true;)
    $.add$1(receiver, iterator.next$0());
};

$.gt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a > b;
  return a.operator$gt$1(b);
};

$.Collections__emitCollection = function(c, result, visiting) {
  $.add$1(visiting, c);
  var isList = typeof c === 'object' && c !== null && (c.constructor === Array || c.is$List());
  $.add$1(result, isList ? '[' : '{');
  for (var t1 = $.iterator(c), first = true; t1.get$hasNext() === true;) {
    var t2 = t1.next$0();
    if (!first)
      $.add$1(result, ', ');
    $.Collections__emitObject(t2, result, visiting);
    first = false;
  }
  $.add$1(result, isList ? ']' : '}');
  $.removeLast(visiting);
};

$._document = function() {
  return document;
};

$.proxyDebug = function(message) {
  $.print('Proxy status ' + $.S(message) + ':');
  var live = $.add($._proxiedObjectTable().get$count(), $._proxiedFunctionTable().get$count());
  var total = $.add($._proxiedObjectTable().get$total(), $._proxiedFunctionTable().get$total());
  $.print('  Dart objects Live : ' + $.S(live) + ' (out of ' + $.S(total) + ' ever allocated).');
  $.print('  ' + $.S($._jsPortDebug.callSync$1([])));
};

$.typeNameInChrome = function(obj) {
  var name$ = obj.constructor.name;
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'CanvasPixelArray')
    return 'Uint8ClampedArray';
  if (name$ === 'WebKitMutationObserver')
    return 'MutationObserver';
  return name$;
};

$.FutureUnhandledException$ = function(source, stackTrace) {
  return new $.FutureUnhandledException(source, stackTrace);
};

$.Proxy_Proxy$_json = function(data) {
  if ($.eqB($._depth(), 0))
    throw $.$$throw('Cannot create Proxy out of scope.');
  return $.Proxy__convert(data);
};

$._FrameSetElementEventsImpl$ = function(_ptr) {
  return new $._FrameSetElementEventsImpl(_ptr);
};

$._JsSendPortSync$ = function(_id) {
  return new $._JsSendPortSync(_id);
};

$._deserializeElement = function(id) {
  var list = $.queryAll('[data-dart_id="' + $.S(id) + '"]');
  if ($.gtB($.get$length(list), 1))
    throw $.$$throw('Non unique ID: ' + $.S(id));
  if ($.eqB($.get$length(list), 0))
    throw $.$$throw('Only elements attached to document can be serialized: ' + $.S(id));
  var e = $.index(list, 0);
  var t1 = $.document().get$documentElement();
  if (!(e == null ? t1 == null : e === t1))
    for (var top$ = e; true;) {
      if (top$.get$attributes().containsKey$1('data-dart_temporary_attached') === true) {
        var newValue = $.substring$1($.index(top$.get$attributes(), 'data-dart_temporary_attached'), 1);
        $.indexSet(top$.get$attributes(), 'data-dart_temporary_attached', newValue);
        if ($.eqB($.get$length($.index(top$.get$attributes(), 'data-dart_temporary_attached')), 0)) {
          top$.get$attributes().remove$1('data-dart_temporary_attached');
          top$.remove$0();
        }
        break;
      }
      t1 = top$.get$parent();
      var t2 = $.document().get$documentElement();
      if (t1 == null ? t2 == null : t1 === t2)
        break;
      top$ = top$.get$parent();
    }
  return e;
};

$._IDBDatabaseEventsImpl$ = function(_ptr) {
  return new $._IDBDatabaseEventsImpl(_ptr);
};

$.allMatches = function(receiver, str) {
  if (!(typeof receiver === 'string'))
    return receiver.allMatches$1(str);
  $.checkString(str);
  return $.allMatchesInStringUnchecked(receiver, str);
};

$.toStringForNativeObject = function(obj) {
  return 'Instance of ' + $.getTypeNameOf(obj);
};

$.JsonUnsupportedObjectError$withCause = function(unsupportedObject, cause) {
  return new $.JsonUnsupportedObjectError(unsupportedObject, cause);
};

$.JSSyntaxRegExp__globalVersionOf = function(other) {
  var t1 = other.get$pattern();
  var t2 = other.get$multiLine();
  var re = $.JSSyntaxRegExp$(t1, other.get$ignoreCase(), t2);
  $.regExpAttachGlobalNative(re);
  return re;
};

$.ltB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a < b : $.lt$slow(a, b) === true;
};

$.MatchState$ = function(state) {
  return new $.MatchState(state);
};

$.tdiv = function(a, b) {
  if ($.checkNumbers(a, b))
    return $.truncate(a / b);
  return a.operator$tdiv$1(b);
};

$._MediaStreamTrackListEventsImpl$ = function(_ptr) {
  return new $._MediaStreamTrackListEventsImpl(_ptr);
};

$._ProxiedFunctionTable$ = function() {
  var t1 = $.makeLiteralMap([]);
  var t2 = $.ReceivePortSync$();
  var t3 = $.ListImplementation_List(null);
  var t4 = $.ListImplementation_List(null);
  t4 = new $._ProxiedFunctionTable('func-ref', 0, 0, t1, t2, $.Set_Set(), t3, t4);
  t4._ProxiedFunctionTable$0();
  return t4;
};

$.S = function(value) {
  var res = $.toString(value);
  if (!(typeof res === 'string'))
    throw $.$$throw($.ArgumentError$(value));
  return res;
};

$._DoubleLinkedQueueIterator$ = function(_sentinel) {
  var t1 = new $._DoubleLinkedQueueIterator(_sentinel, null);
  t1._DoubleLinkedQueueIterator$1(_sentinel);
  return t1;
};

$._serialize = function(message) {
  if (message == null)
    return;
  else if (typeof message === 'string' || typeof message === 'number' || typeof message === 'boolean')
    return message;
  else if (typeof message === 'object' && message !== null && !!message.is$SendPortSync)
    return message;
  else {
    if (typeof message === 'object' && message !== null && message.is$Node())
      var t1 = (message.get$document() == null || $.eqB(message.get$document(), $.document())) && message.is$Element();
    else
      t1 = false;
    if (t1)
      return ['domref', $._serializeElement(message)];
    else if (typeof message === 'object' && message !== null && !!message.is$Callback)
      return message.get$_serialized();
    else if (typeof message === 'function' || typeof message === 'object' && message !== null && !!message.is$Function) {
      var serialized = $._deserializedFunctionTable().find$1(message);
      if (!(serialized == null))
        return serialized;
      else
        throw $.$$throw('A function must be converted to a Callback before it can be serialized.');
    } else if (typeof message === 'object' && message !== null && !!message.is$Proxy)
      return ['objref', message._lib1_id, message._port];
    else
      return ['objref', $.add$1($._proxiedObjectTable(), message), $._proxiedObjectTable().get$sendPort()];
  }
};

$._ReceivePortFactory_ReceivePort = function() {
  return $._ReceivePortImpl$();
};

$._Device_isIE = function() {
  return $._Device_isOpera() !== true && $.contains$2($._Device_userAgent(), 'MSIE', 0) === true;
};

$.startRootIsolate = function(entry) {
  var t1 = $._Manager$();
  $._globalState0(t1);
  if ($._globalState().get$isWorker() === true)
    return;
  var rootContext = $._IsolateContext$();
  $._globalState().set$rootContext(rootContext);
  $._fillStatics(rootContext);
  $._globalState().set$currentContext(rootContext);
  if (!($._window() == null))
    rootContext.eval$1(new $.startRootIsolate_anon());
  rootContext.eval$1(entry);
  $._globalState().get$topEventLoop().run$0();
};

$.stringSplitUnchecked = function(receiver, pattern) {
  return receiver.split(pattern);
};

$.add = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a + b : $.add$slow(a, b);
};

$.lt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a < b;
  return a.operator$lt$1(b);
};

$.Collections__emitObject = function(o, result, visiting) {
  if (typeof o === 'object' && o !== null && (o.constructor === Array || o.is$Collection()))
    if ($.Collections__containsRef(visiting, o))
      $.add$1(result, typeof o === 'object' && o !== null && (o.constructor === Array || o.is$List()) ? '[...]' : '{...}');
    else
      $.Collections__emitCollection(o, result, visiting);
  else if (typeof o === 'object' && o !== null && o.is$Map())
    if ($.Collections__containsRef(visiting, o))
      $.add$1(result, '{...}');
    else
      $.Maps__emitMap(o, result, visiting);
  else
    $.add$1(result, o);
};

$._DedicatedWorkerContextEventsImpl$ = function(_ptr) {
  return new $._DedicatedWorkerContextEventsImpl(_ptr);
};

$._exitScope = function(depth) {
  $._jsExitJavaScriptScope.callSync$1([]);
  $._proxiedFunctionTable().exitScope$0();
  $._proxiedObjectTable().exitScope$0();
  $.proxyDebug('');
};

$.truncate = function(receiver) {
  return receiver < 0 ? $.ceil(receiver) : $.floor(receiver);
};

$.StringImplementation_String$fromCharCodes = function(charCodes) {
  return $.StringImplementation__fromCharCodes(charCodes);
};

$._EventLoop$ = function() {
  return new $._EventLoop($.Queue_Queue());
};

$.substringUnchecked = function(receiver, startIndex, endIndex) {
  return receiver.substring(startIndex, endIndex);
};

$.Primitives_stringFromCharCodes = function(charCodes) {
  for (var t1 = $.iterator(charCodes); t1.get$hasNext() === true;) {
    var t2 = t1.next$0();
    if (!(typeof t2 === 'number' && Math.floor(t2) === t2))
      throw $.$$throw($.ArgumentError$(t2));
  }
  return String.fromCharCode.apply(null, charCodes);
};

$._convertNativeToDart_Window = function(win) {
  return $._DOMWindowCrossFrameImpl__createSafe(win);
};

$._convertNativeToDart_IDBAny = function(object) {
  return $._convertNativeToDart_AcceptStructuredClone(object, false);
};

$._AudioContextEventsImpl$ = function(_ptr) {
  return new $._AudioContextEventsImpl(_ptr);
};

$.typeNameInSafari = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'CanvasPixelArray')
    return 'Uint8ClampedArray';
  if (name$ === 'WebKitMutationObserver')
    return 'MutationObserver';
  return name$;
};

$._ElementAttributeMap$ = function(_element) {
  return new $._ElementAttributeMap(_element);
};

$.contains$2 = function(receiver, other, startIndex) {
  if (!(typeof receiver === 'string'))
    return receiver.contains$2(other, startIndex);
  $.checkNull(other);
  return $.stringContainsUnchecked(receiver, other, startIndex);
};

$.regExpMatchStart = function(m) {
  return m.index;
};

$._WorkerContextEventsImpl$ = function(_ptr) {
  return new $._WorkerContextEventsImpl(_ptr);
};

$._ElementEventsImpl$ = function(_ptr) {
  return new $._ElementEventsImpl(_ptr);
};

$.expectAsync1 = function(callback, count) {
  return $._SpreadArgsHelper$fixedCallCount(callback, count).get$invoke1();
};

$.Primitives_getMonth = function(receiver) {
  return receiver.isUtc === true ? $.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : $.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = table;
};

$._dynamicMetadata0 = function() {
  if (typeof($dynamicMetadata) === 'undefined') {
    var t1 = [];
    $._dynamicMetadata(t1);
  }
  return $dynamicMetadata;
};

$.DefaultFailureHandler$ = function() {
  var t1 = new $.DefaultFailureHandler();
  t1.DefaultFailureHandler$0();
  return t1;
};

$.add$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a + b;
  return a.operator$add$1(b);
};

$.jsHasOwnProperty = function(jsObject, property) {
  return jsObject.hasOwnProperty(property);
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$._AllMatchesIterable$ = function(_re, _str) {
  return new $._AllMatchesIterable(_re, _str);
};

$._PendingSendPortFinder$ = function() {
  var t1 = $._MessageTraverserVisitedMap$0();
  t1 = new $._PendingSendPortFinder([], t1);
  t1._PendingSendPortFinder$0();
  return t1;
};

$._MatchImplementation$ = function(pattern, str, _start, _end, _groups) {
  return new $._MatchImplementation(pattern, str, _start, _end, _groups);
};

$.Futures_wait = function(futures) {
  var t1 = {};
  if (typeof futures !== 'string' && (typeof futures !== 'object' || futures === null || futures.constructor !== Array && !futures.is$JavaScriptIndexingBehavior()))
    return $.Futures_wait$bailout(1, futures, t1);
  if ($.get$isEmpty(futures) === true)
    return $.Future_Future$immediate($.CTC1);
  var completer = $.Completer_Completer();
  var result = completer.get$future();
  t1.remaining_1 = futures.length;
  var values = $.ListImplementation_List(futures.length);
  for (var i = 0; i < futures.length; ++i) {
    var future = futures[i];
    future.then$1(new $.Futures_wait_anon(completer, i, t1, result, values));
    future.handleException$1(new $.Futures_wait_anon0(future, completer, result));
  }
  return result;
};

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  if (typeof src !== 'string' && (typeof src !== 'object' || src === null || src.constructor !== Array && !src.is$JavaScriptIndexingBehavior()))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dst !== 'object' || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !dst.is$JavaScriptIndexingBehavior())
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart)
    for (var i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length, t2 = dst.length; i >= srcStart; --i, --j) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      var t3 = src[i];
      if (j !== (j | 0))
        throw $.iae(j);
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = srcStart + count, t2 = src.length, t3 = dst.length, i = srcStart, j = dstStart; i < t1; ++i, ++j) {
      if (i < 0 || i >= t2)
        throw $.ioore(i);
      var t4 = src[i];
      if (j < 0 || j >= t3)
        throw $.ioore(j);
      dst[j] = t4;
    }
};

$._PeerConnection00EventsImpl$ = function(_ptr) {
  return new $._PeerConnection00EventsImpl(_ptr);
};

$._AbstractWorkerEventsImpl$ = function(_ptr) {
  return new $._AbstractWorkerEventsImpl(_ptr);
};

$.indexSet = function(a, index, value) {
  if (a.constructor === Array && !a.immutable$list) {
    var key = index >>> 0;
    if (key === index && key < a.length) {
      a[key] = value;
      return;
    }
  }
  $.indexSet$slow(a, index, value);
};

$.index$slow = function(a, index) {
  if (typeof a === 'string' || $.isJsArray(a)) {
    if (!(typeof index === 'number' && Math.floor(index) === index)) {
      if (!(typeof index === 'number'))
        throw $.$$throw($.ArgumentError$(index));
      if (!($.truncate(index) === index))
        throw $.$$throw($.ArgumentError$(index));
    }
    if ($.ltB(index, 0) || $.geB(index, $.get$length(a)))
      throw $.$$throw($.IndexOutOfRangeException$(index));
    return a[index];
  }
  return a.operator$index$1(index);
};

$.Future_Future$immediate = function(value) {
  return $._FutureImpl__FutureImpl$immediate(value);
};

$.Proxy_Proxy = function(constructor$, arg1, arg2, arg3, arg4) {
  return $.Proxy_Proxy$withArgList(constructor$, [arg1, arg2, arg3, arg4]);
};

$.$$throw = function(ex) {
  if (ex == null)
    ex = $.CTC0;
  var jsError = new Error();
  jsError.name = ex;
  jsError.description = ex;
  jsError.dartException = ex;
  jsError.toString = $.toStringWrapper.call$0;
  throw jsError;
};

$._MessagePortEventsImpl$ = function(_ptr) {
  return new $._MessagePortEventsImpl(_ptr);
};

$.CustomEvent_CustomEvent = function(type, canBubble, cancelable, detail) {
  return $._CustomEventFactoryProvider_createCustomEvent(type, canBubble, cancelable, detail);
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent(isolate, fn, message);
};

$.wrapMatcher = function(x) {
  if (typeof x === 'object' && x !== null && !!x.is$Matcher)
    return x;
  else if (typeof x === 'function' || typeof x === 'object' && x !== null && !!x.is$Function)
    return $._Predicate$(x, 'satisfies function');
  else
    return $._DeepMatcher$(x, 100);
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  if (from === '')
    if (receiver === '')
      return to;
    else {
      var result = $.StringBuffer_StringBuffer('');
      var length$ = receiver.length;
      $.add$1(result, to);
      for (var i = 0; i < length$; ++i) {
        $.add$1(result, receiver[i]);
        $.add$1(result, to);
      }
      return $.toString(result);
    }
  else
    return $.stringReplaceJS(receiver, $.regExpMakeNative($.JSSyntaxRegExp$(from.replace($.regExpMakeNative($.CTC11, true), "\\$&"), false, false), true), to);
};

$._nextBatch = function() {
  for (; $.ltB($._currentTest, $.get$length($._tests));) {
    var testCase = $.index($._tests, $._currentTest);
    $.guardAsync(new $._nextBatch_anon(testCase), null, $._currentTest);
    if (testCase.get$isComplete() !== true && $.gtB(testCase.get$callbackFunctionsOutstanding(), 0))
      return;
    $._currentTest = $.add($._currentTest, 1);
  }
  $._completeTests();
};

$._Device_isFirefox = function() {
  return $.contains$2($._Device_userAgent(), 'Firefox', 0);
};

$.checkMutable = function(list, reason) {
  if (!!(list.immutable$list))
    throw $.$$throw($.UnsupportedError$(reason));
};

$._setup = function() {
  if (!($._sockets == null))
    return;
  $._sockets = $.HashMapImplementation$();
  $._subscribe('_channel_open', new $._setup_anon());
  $._subscribe('_channel_close', new $._setup_anon0());
  $._subscribe('_channel_message', new $._setup_anon1());
  $._subscribe('_channel_error', new $._setup_anon2());
};

$._CompleterImpl$ = function() {
  return new $._CompleterImpl($._FutureImpl$());
};

$.index = function(a, index) {
  if (typeof a == "string" || a.constructor === Array) {
    var key = index >>> 0;
    if (key === index && key < a.length)
      return a[key];
  }
  return $.index$slow(a, index);
};

$.le$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a <= b;
  return a.operator$le$1(b);
};

$.typeNameInOpera = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  return name$;
};

$.xor = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a ^ b) >>> 0;
  return a.operator$xor$1(b);
};

$.last = function(receiver) {
  if (!$.isJsArray(receiver))
    return receiver.last$0();
  return $.index(receiver, $.sub($.get$length(receiver), 1));
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$._window = function() {
  return typeof window != "undefined" ? window : null;
};

$.substring$1 = function(receiver, startIndex) {
  if (!(typeof receiver === 'string'))
    return receiver.substring$1(startIndex);
  return $.substring$2(receiver, startIndex, null);
};

$._ElementFactoryProvider_createElement_tag = function(tag) {
  return document.createElement(tag);
};

$.Primitives_dateNow = function() {
  return Date.now();
};

$.guardAsync = function(tryBody, finallyBody, testNum) {
  if ($.ltB(testNum, 0))
    testNum = $._currentTest;
  try {
    return tryBody.call$0();
  } catch (exception) {
    var t1 = $.unwrapException(exception);
    var e = t1;
    var trace = $.getTraceFromException(exception);
    $._registerException(testNum, e, trace);
  }
 finally {
    if (!(finallyBody == null))
      finallyBody.call$0();
  }
};

$.eq = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b);
  return a === b;
};

$.scoped = function(f) {
  var depth = $._enterScope();
  try {
    return f.call$0();
  } finally {
    $._exitScope(depth);
  }
};

$.NullPointerException$ = function(functionName, arguments$) {
  return new $.NullPointerException(functionName, arguments$);
};

$._DoubleLinkedQueueEntrySentinel$ = function() {
  var t1 = new $._DoubleLinkedQueueEntrySentinel(null, null, null);
  t1.DoubleLinkedQueueEntry$1(null);
  t1._DoubleLinkedQueueEntrySentinel$0();
  return t1;
};

$.contains = function(userAgent, name$) {
  return userAgent.indexOf(name$) !== -1;
};

$.toStringWrapper = function() {
  return $.toString(this.dartException);
};

$.gtB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a > b : $.gt$slow(a, b) === true;
};

$.stringContainsUnchecked = function(receiver, other, startIndex) {
  if (typeof other === 'string')
    return !$.eqB($.indexOf$2(receiver, other, startIndex), -1);
  else if (typeof other === 'object' && other !== null && !!other.is$JSSyntaxRegExp)
    return other.hasMatch$1($.substring$1(receiver, startIndex));
  else
    return $.iterator($.allMatches(other, $.substring$1(receiver, startIndex))).get$hasNext();
};

$.shl = function(a, b) {
  if ($.checkNumbers(a, b)) {
    if (b < 0)
      throw $.$$throw($.ArgumentError$(b));
    if (b > 31)
      return 0;
    return (a << b) >>> 0;
  }
  return a.operator$shl$1(b);
};

$.Proxy__convert = function(data) {
  if (typeof data === 'object' && data !== null && data.is$Map()) {
    var result = $.Proxy_Proxy($.context().get$Object(), null, null, null, null);
    for (var t1 = $.iterator(data.getKeys$0()); t1.get$hasNext() === true;) {
      var t2 = t1.next$0();
      var value = $.Proxy__convert(data.operator$index$1(t2));
      result.noSuchMethod$2('set:' + $.S(t2), [value]);
    }
    return result;
  } else if (typeof data === 'object' && data !== null && (data.constructor === Array || data.is$List())) {
    if (typeof data !== 'object' || data === null || data.constructor !== Array && !data.is$JavaScriptIndexingBehavior())
      return $.Proxy__convert$bailout(1, data);
    result = $._deserialize($._jsPortCreateArray.callSync$1([]));
    for (var i = 0; i < data.length; ++i) {
      value = $.Proxy__convert(data[i]);
      result.noSuchMethod$2('set:' + $.S(i), [value]);
    }
    return result;
  }
  return data;
};

$.Primitives_objectToString = function(object) {
  return 'Instance of \'' + $.S($.Primitives_objectTypeName(object)) + '\'';
};

$._currentIsolate = function() {
  return $._globalState().get$currentContext();
};

$._NotificationEventsImpl$ = function(_ptr) {
  return new $._NotificationEventsImpl(_ptr);
};

$.DoubleLinkedQueueEntry$ = function(e) {
  var t1 = new $.DoubleLinkedQueueEntry(null, null, null);
  t1.DoubleLinkedQueueEntry$1(e);
  return t1;
};

$.startsWith = function(receiver, other) {
  if (!(typeof receiver === 'string'))
    return receiver.startsWith$1(other);
  $.checkString(other);
  var length$ = other.length;
  if (length$ > receiver.length)
    return false;
  return other == receiver.substring(0, length$);
};

$.getRange = function(receiver, start, length$) {
  if (!$.isJsArray(receiver))
    return receiver.getRange$2(start, length$);
  if (0 === length$)
    return [];
  $.checkNull(start);
  $.checkNull(length$);
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$))
    throw $.$$throw($.ArgumentError$(length$));
  var t1 = length$ < 0;
  if (t1)
    throw $.$$throw($.ArgumentError$(length$));
  if (start < 0)
    throw $.$$throw($.IndexOutOfRangeException$(start));
  var end = start + length$;
  if ($.gtB(end, $.get$length(receiver)))
    throw $.$$throw($.IndexOutOfRangeException$(length$));
  if (t1)
    throw $.$$throw($.ArgumentError$(length$));
  return receiver.slice(start, end);
};

$._Lists_getRange = function(a, start, length$, accumulator) {
  if (typeof a !== 'string' && (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior()))
    return $._Lists_getRange$bailout(1, a, start, length$, accumulator);
  if (typeof start !== 'number')
    return $._Lists_getRange$bailout(1, a, start, length$, accumulator);
  if ($.ltB(length$, 0))
    throw $.$$throw($.ArgumentError$('length'));
  if (start < 0)
    throw $.$$throw($.IndexOutOfRangeException$(start));
  if (typeof length$ !== 'number')
    throw $.iae(length$);
  var end = start + length$;
  if (end > a.length)
    throw $.$$throw($.IndexOutOfRangeException$(end));
  for (var i = start; i < end; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    accumulator.push(a[i]);
  }
  return accumulator;
};

$.FutureAlreadyCompleteException$ = function() {
  return new $.FutureAlreadyCompleteException();
};

$.convertDartClosureToJS = function(closure, arity) {
  if (closure == null)
    return;
  var function$ = closure.$identity;
  if (!!function$)
    return function$;
  function$ = function() {
    return $.invokeClosure.call$5(closure, $._currentIsolate(), arity, arguments[0], arguments[1]);
  };
  closure.$identity = function$;
  return function$;
};

$.Date_Date$fromMillisecondsSinceEpoch = function(millisecondsSinceEpoch, isUtc) {
  return $._DateImpl$fromMillisecondsSinceEpoch(millisecondsSinceEpoch, isUtc);
};

$._DeserializedFunctionTable$ = function() {
  var t1 = new $._DeserializedFunctionTable(null);
  t1._DeserializedFunctionTable$0();
  return t1;
};

$.map = function(receiver, f) {
  if (!$.isJsArray(receiver))
    return receiver.map$1(f);
  else
    return $.Collections_map(receiver, [], f);
};

$.clear = function(receiver) {
  if (!$.isJsArray(receiver))
    return receiver.clear$0();
  $.set$length(receiver, 0);
};

$.Primitives_objectTypeName = function(object) {
  var name$ = $.constructorNameFallback(object);
  if ($.eqB(name$, 'Object')) {
    var decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === 'string')
      name$ = decompiled;
  }
  return $.charCodeAt(name$, 0) === 36 ? $.substring$1(name$, 1) : name$;
};

$.getOrCreateExpectFailureHandler = function() {
  if ($._assertFailureHandler == null)
    $.configureExpectFailureHandler(null);
  return $._assertFailureHandler;
};

$.remainder = function(a, b) {
  if ($.checkNumbers(a, b))
    return a % b;
  else
    return a.remainder$1(b);
};

$.stringReplaceJS = function(receiver, replacer, to) {
  return receiver.replace(replacer, to.replace('$', '$$$$'));
};

$.HashSetIterator$ = function(set_) {
  var t1 = new $.HashSetIterator(set_._backingMap._keys, -1);
  t1.HashSetIterator$1(set_);
  return t1;
};

$.print = function(object) {
  if (typeof object === 'string')
    $.Primitives_printString(object);
  else
    $.Primitives_printString($.toString(object));
};

$.forEach = function(receiver, f) {
  if (!$.isJsArray(receiver))
    return receiver.forEach$1(f);
  else
    return $.Collections_forEach(receiver, f);
};

$.Collections_forEach = function(iterable, f) {
  for (var t1 = $.iterator(iterable); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
};

$._DateImpl$fromMillisecondsSinceEpoch = function(millisecondsSinceEpoch, isUtc) {
  var t1 = new $._DateImpl(millisecondsSinceEpoch, isUtc);
  t1._DateImpl$fromMillisecondsSinceEpoch$2(millisecondsSinceEpoch, isUtc);
  return t1;
};

$.runTests = function() {
  $._currentTest = 0;
  $._currentGroup = '';
  if (!($._soloTest == null))
    $.filterTests(new $.runTests_anon());
  $._config.onStart$0();
  $._defer(new $.runTests_anon0());
};

$.Collections_map = function(source, destination, f) {
  for (var t1 = $.iterator(source); t1.get$hasNext() === true;)
    destination.push(f.call$1(t1.next$0()));
  return destination;
};

$._Collections_forEach = function(iterable, f) {
  for (var t1 = $.iterator(iterable); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
};

$._convertNativeToDart_AcceptStructuredClone = function(object, mustCopy) {
  var values = [];
  var copies = [];
  var t1 = new $._convertNativeToDart_AcceptStructuredClone_findSlot(copies, values);
  var t2 = new $._convertNativeToDart_AcceptStructuredClone_readSlot(copies);
  return new $._convertNativeToDart_AcceptStructuredClone_walk(new $._convertNativeToDart_AcceptStructuredClone_writeSlot(copies), mustCopy, t1, t2).call$1(object);
};

$._FrozenElementList$_wrap = function(_nodeList) {
  return new $._FrozenElementList(_nodeList);
};

$.Date_Date$now = function() {
  return $._DateImpl$now();
};

$.ge$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a >= b;
  return a.operator$ge$1(b);
};

$.getFunctionForTypeNameOf = function() {
  if (!(typeof(navigator) === 'object'))
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if ($.contains(userAgent, 'Chrome') || $.contains(userAgent, 'DumpRenderTree'))
    return $.typeNameInChrome;
  else if ($.contains(userAgent, 'Firefox'))
    return $.typeNameInFirefox;
  else if ($.contains(userAgent, 'MSIE'))
    return $.typeNameInIE;
  else if ($.contains(userAgent, 'Opera'))
    return $.typeNameInOpera;
  else if ($.contains(userAgent, 'AppleWebKit'))
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.JSON_stringify = function(object) {
  return $._JsonStringifier_stringify(object);
};

$.get$isEmpty = function(receiver) {
  if (typeof receiver === 'string' || $.isJsArray(receiver))
    return receiver.length === 0;
  return receiver.get$isEmpty();
};

$._JsonStringifier_stringify = function(object) {
  var output = $.StringBuffer_StringBuffer('');
  $._JsonStringifier$(output).stringifyValue$1(object);
  return $.toString(output);
};

$.indexSet$slow = function(a, index, value) {
  if ($.isJsArray(a)) {
    if (!(typeof index === 'number' && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index < 0 || $.geB(index, $.get$length(a)))
      throw $.$$throw($.IndexOutOfRangeException$(index));
    $.checkMutable(a, 'indexed set');
    a[index] = value;
    return;
  }
  a.operator$indexSet$2(index, value);
};

$.Primitives_objectHashCode = function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = $.add($.Primitives_hashCodeSeed, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$._inject = function(code) {
  var script = $.ScriptElement_ScriptElement();
  script.set$type('text/javascript');
  script.set$innerHTML(code);
  $.add$1($.document().get$body().get$nodes(), script);
};

$.gt = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a > b : $.gt$slow(a, b);
};

$.charCodeAt = function(receiver, index) {
  if (typeof receiver === 'string') {
    if (!(typeof index === 'number'))
      throw $.$$throw($.ArgumentError$(index));
    if (index < 0)
      throw $.$$throw($.IndexOutOfRangeException$(index));
    if (index >= receiver.length)
      throw $.$$throw($.IndexOutOfRangeException$(index));
    return receiver.charCodeAt(index);
  } else
    return receiver.charCodeAt$1(index);
};

$.StringImplementation__fromCharCodes = function(charCodes) {
  $.checkNull(charCodes);
  if (!$.isJsArray(charCodes))
    charCodes = $.ListImplementation_List$from(charCodes);
  return $.Primitives_stringFromCharCodes(charCodes);
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
};

$.ListImplementation_List = function(length$) {
  return $.Primitives_newList(length$);
};

$.document = function() {
  return document;
};

$.removeRange = function(receiver, start, length$) {
  if (!$.isJsArray(receiver))
    return receiver.removeRange$2(start, length$);
  $.checkGrowable(receiver, 'removeRange');
  if (length$ === 0)
    return;
  $.checkNull(start);
  $.checkNull(length$);
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$))
    throw $.$$throw($.ArgumentError$(length$));
  if (length$ < 0)
    throw $.$$throw($.ArgumentError$(length$));
  var receiverLength = receiver.length;
  if (start < 0 || start >= receiverLength)
    throw $.$$throw($.IndexOutOfRangeException$(start));
  var t1 = start + length$;
  if (t1 > receiverLength)
    throw $.$$throw($.IndexOutOfRangeException$(t1));
  var t2 = receiverLength - length$;
  $.Arrays_copy(receiver, t1, receiver, start, t2 - start);
  $.set$length(receiver, t2);
};

$._browserPrefix = function() {
  if ($._cachedBrowserPrefix == null)
    if ($._Device_isFirefox() === true)
      $._cachedBrowserPrefix = '-moz-';
    else if ($._Device_isIE() === true)
      $._cachedBrowserPrefix = '-ms-';
    else if ($._Device_isOpera() === true)
      $._cachedBrowserPrefix = '-o-';
    else
      $._cachedBrowserPrefix = '-webkit-';
  return $._cachedBrowserPrefix;
};

$.mul = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a * b : $.mul$slow(a, b);
};

$._BodyElementEventsImpl$ = function(_ptr) {
  return new $._BodyElementEventsImpl(_ptr);
};

$.iterator = function(receiver) {
  if ($.isJsArray(receiver))
    return $.ListIterator$(receiver);
  return receiver.iterator$0();
};

$.Primitives_parseInt = function(string) {
  $.checkString(string);
  var match = /^\s*[+-]?(?:0(x)[a-f0-9]+|\d+)\s*$/i.exec(string);
  if (match == null)
    throw $.$$throw($.FormatException$(string));
  var base = !($.index(match, 1) == null) ? 16 : 10;
  var result = parseInt(string, base);
  if ($.get$isNaN(result) === true)
    throw $.$$throw($.FormatException$(string));
  return result;
};

$.context = function() {
  if ($.eqB($._depth(), 0))
    throw $.$$throw('Cannot get JavaScript context out of scope.');
  return $._deserialize($._jsPortSync.callSync$1([]));
};

$._Timer$ = function(milliSeconds, callback) {
  var t1 = new $._Timer(true, null);
  t1._Timer$2(milliSeconds, callback);
  return t1;
};

$._Predicate$ = function(_matcher, _description) {
  return new $._Predicate(_matcher, _description);
};

$.filterTests = function(testFilter) {
  if (typeof testFilter === 'string')
    var filterFunction = new $.filterTests_anon($.JSSyntaxRegExp$(testFilter, false, false));
  else if (typeof testFilter === 'object' && testFilter !== null && !!testFilter.is$RegExp)
    filterFunction = new $.filterTests_anon0(testFilter);
  else
    filterFunction = typeof testFilter === 'function' || typeof testFilter === 'object' && testFilter !== null && !!testFilter.is$Function ? testFilter : null;
  $._tests = $.filter($._tests, filterFunction);
};

$._Collections_map = function(source, destination, f) {
  for (var t1 = $.iterator(source); t1.get$hasNext() === true;)
    destination.push(f.call$1(t1.next$0()));
  return destination;
};

$._proxiedObjectTable = function() {
  if ($.__proxiedObjectTable == null)
    $.__proxiedObjectTable = $._ProxiedObjectTable$();
  return $.__proxiedObjectTable;
};

$.map0 = function(data) {
  return $.Proxy_Proxy$_json(data);
};

$.ReceivePortSync__isolateId = function() {
  if ($.ReceivePortSync__cachedIsolateId == null)
    $.ReceivePortSync__cachedIsolateId = $._getNewIsolateId();
  return $.ReceivePortSync__cachedIsolateId;
};

$._enterScope = function() {
  $._initialize();
  $._proxiedObjectTable().enterScope$0();
  $._proxiedFunctionTable().enterScope$0();
  $._jsEnterJavaScriptScope.callSync$1([]);
  return $.get$length($._proxiedObjectTable().get$_scopeIndices());
};

$.queryAll = function(selector) {
  return $._document().queryAll$1(selector);
};

$.Proxy_Proxy$withArgList = function(constructor$, arguments$) {
  if ($.eqB($._depth(), 0))
    throw $.$$throw('Cannot create Proxy out of scope.');
  var t1 = [constructor$];
  $.addAll(t1, arguments$);
  var serialized = $.map(t1, $._serialize);
  return $._deserialize($._jsPortCreate.callSync$1(serialized));
};

$._HttpRequestEventsImpl$ = function(_ptr) {
  return new $._HttpRequestEventsImpl(_ptr);
};

$._JsDeserializer$ = function() {
  return new $._JsDeserializer(null);
};

$._JsDeserializer$0 = function() {
  return new $._JsDeserializer0(null);
};

$._fullSpec = function(spec) {
  return !$.eqB($._currentGroup, '') ? $.S($._currentGroup) + $.S($.groupSep) + spec : spec;
};

$.abs = function(receiver) {
  if (!(typeof receiver === 'number'))
    return receiver.abs$0();
  return Math.abs(receiver);
};

$.Primitives_printString = function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw 'Unable to print message: ' + String(string);
};

$.JsonUnsupportedObjectError$ = function(unsupportedObject) {
  return new $.JsonUnsupportedObjectError(unsupportedObject, null);
};

$.Primitives_getMilliseconds = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0) : ($.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0);
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata(inputTable);
  $._dynamicMetadata(t1);
};

$.test = function(spec, body) {
  $.ensureInitialized();
  var t1 = $._tests;
  $.add$1(t1, $.TestCase$($.add($.get$length(t1), 1), $._fullSpec(spec), body, 0));
};

$.typeNameInFirefox = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'Document')
    return 'HTMLDocument';
  if (name$ === 'XMLDocument')
    return 'Document';
  if (name$ === 'WorkerMessageEvent')
    return 'MessageEvent';
  if (name$ === 'DragEvent')
    return 'MouseEvent';
  if (name$ === 'DataTransfer')
    return 'Clipboard';
  if (name$ === 'MouseScrollEvent')
    return 'WheelEvent';
  if (name$ === 'OfflineResourceList')
    return 'DOMApplicationCache';
  return name$;
};

$._WorkerEventsImpl$ = function(_ptr) {
  return new $._WorkerEventsImpl(_ptr);
};

$.sub$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a - b;
  return a.operator$sub$1(b);
};

$.Queue_Queue = function() {
  return $.DoubleLinkedQueue$();
};

$.typeNameInIE = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'Document') {
    if (!!obj.xmlVersion)
      return 'Document';
    return 'HTMLDocument';
  }
  if (name$ === 'ApplicationCache')
    return 'DOMApplicationCache';
  if (name$ === 'CanvasPixelArray')
    return 'Uint8ClampedArray';
  if (name$ === 'DataTransfer')
    return 'Clipboard';
  if (name$ === 'DragEvent')
    return 'MouseEvent';
  if (name$ === 'HTMLDDElement')
    return 'HTMLElement';
  if (name$ === 'HTMLDTElement')
    return 'HTMLElement';
  if (name$ === 'HTMLTableDataCellElement')
    return 'HTMLTableCellElement';
  if (name$ === 'HTMLTableHeaderCellElement')
    return 'HTMLTableCellElement';
  if (name$ === 'HTMLPhraseElement')
    return 'HTMLElement';
  if (name$ === 'MSStyleCSSProperties')
    return 'CSSStyleDeclaration';
  if (name$ === 'MouseWheelEvent')
    return 'WheelEvent';
  return name$;
};

$.removeLast = function(receiver) {
  if ($.isJsArray(receiver)) {
    $.checkGrowable(receiver, 'removeLast');
    if ($.eqB($.get$length(receiver), 0))
      throw $.$$throw($.IndexOutOfRangeException$(-1));
    return receiver.pop();
  }
  return receiver.removeLast$0();
};

$.Primitives_newList = function(length$) {
  if (length$ == null)
    return new Array();
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$) || length$ < 0)
    throw $.$$throw($.ArgumentError$(length$));
  var result = new Array(length$);
  result.fixed$length = true;
  return result;
};

$.ge = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a >= b : $.ge$slow(a, b);
};

$._globalState = function() {
  return $globalState;
};

$.substring$2 = function(receiver, startIndex, endIndex) {
  if (!(typeof receiver === 'string'))
    return receiver.substring$2(startIndex, endIndex);
  $.checkNum(startIndex);
  var length$ = receiver.length;
  if (endIndex == null)
    endIndex = length$;
  $.checkNum(endIndex);
  if ($.ltB(startIndex, 0))
    throw $.$$throw($.IndexOutOfRangeException$(startIndex));
  if ($.gtB(startIndex, endIndex))
    throw $.$$throw($.IndexOutOfRangeException$(startIndex));
  if ($.gtB(endIndex, length$))
    throw $.$$throw($.IndexOutOfRangeException$(endIndex));
  return $.substringUnchecked(receiver, startIndex, endIndex);
};

$.ScriptElement_ScriptElement = function() {
  return $._Elements_createScriptElement();
};

$._globalState0 = function(val) {
  $globalState = val;
};

$._proxiedFunctionTable = function() {
  if ($.__proxiedFunctionTable == null)
    $.__proxiedFunctionTable = $._ProxiedFunctionTable$();
  return $.__proxiedFunctionTable;
};

$.window = function() {
  return window;
};

$.HashMapImplementation$ = function() {
  var t1 = new $.HashMapImplementation(null, null, null, null, null);
  t1.HashMapImplementation$0();
  return t1;
};

$._DateImpl$now = function() {
  var t1 = new $._DateImpl($.Primitives_dateNow(), false);
  t1._DateImpl$now$0();
  return t1;
};

$.Primitives_getMinutes = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0) : ($.Primitives_lazyAsJsDate(receiver).getMinutes() + 0);
};

$.Primitives_lazyAsJsDate = function(receiver) {
  if (receiver.date === (void 0))
    receiver.date = new Date(receiver.millisecondsSinceEpoch);
  return receiver.date;
};

$._FixedSizeListIterator$ = function(array) {
  return new $._FixedSizeListIterator($.get$length(array), array, 0);
};

$.addLast = function(receiver, value) {
  if (!$.isJsArray(receiver))
    return receiver.addLast$1(value);
  $.checkGrowable(receiver, 'addLast');
  receiver.push(value);
};

$._FileReaderEventsImpl$ = function(_ptr) {
  return new $._FileReaderEventsImpl(_ptr);
};

$._depth = function() {
  return $.get$length($._proxiedObjectTable().get$_scopeIndices());
};

$.HashMapImplementation__nextProbe = function(currentProbe, numberOfProbes, length$) {
  return (currentProbe + numberOfProbes & length$ - 1) >>> 0;
};

$.Completer_Completer = function() {
  return $._CompleterImpl$();
};

$._FutureImpl__FutureImpl$immediate = function(value) {
  var res = $._FutureImpl$();
  res._setValue$1(value);
  return res;
};

$.expect = function(actual, matcher, reason, failureHandler, verbose) {
  matcher = $.wrapMatcher(matcher);
  var doesMatch = null;
  var matchState = $.MatchState$(null);
  try {
    doesMatch = matcher.matches$2(actual, matchState);
  } catch (exception) {
    var t1 = $.unwrapException(exception);
    var e = t1;
    var trace = $.getTraceFromException(exception);
    doesMatch = false;
    if (reason == null) {
      t1 = e;
      reason = $.S(typeof t1 === 'string' ? e : $.toString(e)) + ' at ' + $.S(trace);
    }
  }

  if (doesMatch !== true) {
    if (failureHandler == null)
      failureHandler = $.getOrCreateExpectFailureHandler();
    failureHandler.failMatch$5(actual, matcher, reason, matchState, verbose);
  }
};

$.HashMapImplementation__computeLoadLimit = function(capacity) {
  return $.tdiv(capacity * 3, 4);
};

$._EventListenerListImpl$ = function(_ptr, _type) {
  return new $._EventListenerListImpl(_ptr, _type);
};

$.iae = function(argument) {
  throw $.$$throw($.ArgumentError$(argument));
};

$._DOMApplicationCacheEventsImpl$ = function(_ptr) {
  return new $._DOMApplicationCacheEventsImpl(_ptr);
};

$.ExpectException$ = function(message) {
  return new $.ExpectException(message);
};

$.StringImplementation__toJsStringArray = function(strings) {
  if (typeof strings !== 'object' || strings === null || (strings.constructor !== Array || !!strings.immutable$list) && !strings.is$JavaScriptIndexingBehavior())
    return $.StringImplementation__toJsStringArray$bailout(1, strings);
  $.checkNull(strings);
  var length$ = strings.length;
  if ($.isJsArray(strings)) {
    for (var i = 0; i < length$; ++i) {
      if (i >= strings.length)
        throw $.ioore(i);
      var string = strings[i];
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
    }
    var array = strings;
  } else {
    array = $.ListImplementation_List(length$);
    for (i = 0; i < length$; ++i) {
      if (i >= strings.length)
        throw $.ioore(i);
      string = strings[i];
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
      array[i] = string;
    }
  }
  return array;
};

$.IllegalJSRegExpException$ = function(_pattern, _errmsg) {
  return new $.IllegalJSRegExpException(_pattern, _errmsg);
};

$.split = function(receiver, pattern) {
  if (!(typeof receiver === 'string'))
    return receiver.split$1(pattern);
  $.checkNull(pattern);
  return $.stringSplitUnchecked(receiver, pattern);
};

$._timerFactory = function(millis, callback, repeating) {
  return repeating === true ? $._Timer$repeating(millis, callback) : $._Timer$(millis, callback);
};

$.Set_Set = function() {
  return $.HashSetImplementation$();
};

$.query = function(selector) {
  return $._document().query$1(selector);
};

$.constructorNameFallback = function(object) {
  if (object == null)
    return 'Null';
  var constructor$ = object.constructor;
  if (typeof(constructor$) === 'function') {
    var name$ = constructor$.name;
    if (typeof name$ === 'string')
      var t1 = !(name$ === '') && !(name$ === 'Object') && !(name$ === 'Function.prototype');
    else
      t1 = false;
    if (t1)
      return name$;
  }
  var string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.FormatException$ = function(message) {
  return new $.FormatException(message);
};

$._LocalWindowEventsImpl$ = function(_ptr) {
  return new $._LocalWindowEventsImpl(_ptr);
};

$.filter = function(receiver, predicate) {
  if (!$.isJsArray(receiver))
    return receiver.filter$1(predicate);
  else
    return $.Collections_filter(receiver, [], predicate);
};

$.Collections_filter = function(source, destination, f) {
  for (var t1 = $.iterator(source); t1.get$hasNext() === true;) {
    var t2 = t1.next$0();
    if (f.call$1(t2) === true)
      destination.push(t2);
  }
  return destination;
};

$._Collections_filter = function(source, destination, f) {
  for (var t1 = $.iterator(source); t1.get$hasNext() === true;) {
    var t2 = t1.next$0();
    if (f.call$1(t2) === true)
      destination.push(t2);
  }
  return destination;
};

$._JsonStringifier_escape = function(sb, s) {
  var length$ = $.get$length(s);
  var charCodes = $.ListImplementation_List(null);
  for (var needsEscape = false, i = 0; $.ltB(i, length$); ++i) {
    var charCode = $.charCodeAt(s, i);
    if ($.ltB(charCode, 32)) {
      charCodes.push(92);
      switch (charCode) {
        case 8:
          charCodes.push(98);
          break;
        case 9:
          charCodes.push(116);
          break;
        case 10:
          charCodes.push(110);
          break;
        case 12:
          charCodes.push(102);
          break;
        case 13:
          charCodes.push(114);
          break;
        default:
          charCodes.push(117);
          var t1 = $.and($.shr(charCode, 12), 15);
          if ($.ltB(t1, 10)) {
            if (typeof t1 !== 'number')
              throw $.iae(t1);
            t1 = 48 + t1;
          } else {
            if (typeof t1 !== 'number')
              throw $.iae(t1);
            t1 = 87 + t1;
          }
          charCodes.push(t1);
          t1 = $.and($.shr(charCode, 8), 15);
          if ($.ltB(t1, 10)) {
            if (typeof t1 !== 'number')
              throw $.iae(t1);
            t1 = 48 + t1;
          } else {
            if (typeof t1 !== 'number')
              throw $.iae(t1);
            t1 = 87 + t1;
          }
          charCodes.push(t1);
          t1 = $.and($.shr(charCode, 4), 15);
          if ($.ltB(t1, 10)) {
            if (typeof t1 !== 'number')
              throw $.iae(t1);
            t1 = 48 + t1;
          } else {
            if (typeof t1 !== 'number')
              throw $.iae(t1);
            t1 = 87 + t1;
          }
          charCodes.push(t1);
          t1 = $.and(charCode, 15);
          if ($.ltB(t1, 10)) {
            if (typeof t1 !== 'number')
              throw $.iae(t1);
            t1 = 48 + t1;
          } else {
            if (typeof t1 !== 'number')
              throw $.iae(t1);
            t1 = 87 + t1;
          }
          charCodes.push(t1);
          break;
      }
      needsEscape = true;
    } else if ($.eqB(charCode, 34) || $.eqB(charCode, 92)) {
      charCodes.push(92);
      charCodes.push(charCode);
      needsEscape = true;
    } else
      charCodes.push(charCode);
  }
  $.add$1(sb, needsEscape ? $.StringImplementation_String$fromCharCodes(charCodes) : s);
};

$._ChildrenElementList$_wrap = function(element) {
  return new $._ChildrenElementList(element, element.get$$$dom_children());
};

$.unwrapException = function(ex) {
  if ("dartException" in ex)
    return ex.dartException;
  var message = ex.message;
  if (ex instanceof TypeError) {
    var type = ex.type;
    var name$ = ex.arguments ? ex.arguments[0] : "";
    if ($.eqB(type, 'property_not_function') || $.eqB(type, 'called_non_callable') || $.eqB(type, 'non_object_property_call') || $.eqB(type, 'non_object_property_load'))
      return $.NullPointerException$(null, $.CTC1);
    else if ($.eqB(type, 'undefined_method'))
      return $.NoSuchMethodError$('', name$, [], null);
    var ieErrorCode = ex.number & 0xffff;
    var ieFacilityNumber = ex.number>>16 & 0x1FFF;
    if (typeof message === 'string')
      if ($.endsWith(message, 'is null') === true || $.endsWith(message, 'is undefined') === true || $.endsWith(message, 'is null or undefined') === true)
        return $.NullPointerException$(null, $.CTC1);
      else {
        if ($.contains$1(message, ' is not a function') !== true)
          var t1 = ieErrorCode === 438 && ieFacilityNumber === 10;
        else
          t1 = true;
        if (t1)
          return $.NoSuchMethodError$('', '<unknown>', [], null);
      }
    return $._ExceptionImplementation$(typeof message === 'string' ? message : '');
  }
  if (ex instanceof RangeError) {
    if (typeof message === 'string' && $.contains$1(message, 'call stack') === true)
      return $.StackOverflowError$();
    return $.ArgumentError$('');
  }
  if (typeof InternalError == 'function' && ex instanceof InternalError)
    if (typeof message === 'string' && message === 'too much recursion')
      return $.StackOverflowError$();
  return ex;
};

$.checkNumbers = function(a, b) {
  if (typeof a === 'number')
    if (typeof b === 'number')
      return true;
    else {
      $.checkNull(b);
      throw $.$$throw($.ArgumentError$(b));
    }
  return false;
};

$.Configuration$ = function() {
  return new $.Configuration(null);
};

$._ReceivePortImpl$ = function() {
  var t1 = $._ReceivePortImpl__nextFreeId;
  $._ReceivePortImpl__nextFreeId = $.add(t1, 1);
  t1 = new $._ReceivePortImpl(t1, null);
  t1._ReceivePortImpl$0();
  return t1;
};

$._NodeListWrapper$ = function(list) {
  return new $._NodeListWrapper(list);
};

$.stringJoinUnchecked = function(array, separator) {
  return array.join(separator);
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  return new $._WorkerSendPort(_workerId, _receivePortId, isolateId);
};

$._registerException = function(testNum, e, trace) {
  trace = trace == null ? '' : $.toString(trace);
  if ($.index($._tests, testNum).get$result() == null) {
    var message = typeof e === 'object' && e !== null && !!e.is$ExpectException ? e.message : 'Caught ' + $.S(e);
    $.index($._tests, testNum).fail$2(message, trace);
  } else
    $.index($._tests, testNum).error$2('Caught ' + $.S(e), trace);
  if ($.eqB(testNum, $._currentTest) && $.gtB($.index($._tests, testNum).get$callbackFunctionsOutstanding(), 0)) {
    $._currentTest = $.add($._currentTest, 1);
    $._testRunner.call$0();
  }
};

$.checkString = function(value) {
  if (!(typeof value === 'string')) {
    $.checkNull(value);
    throw $.$$throw($.ArgumentError$(value));
  }
  return value;
};

$.replaceAll = function(receiver, from, to) {
  if (!(typeof receiver === 'string'))
    return receiver.replaceAll$2(from, to);
  $.checkString(to);
  return $.stringReplaceAllUnchecked(receiver, from, to);
};

$._deserialize = function(message) {
  var t1 = new $._deserialize_deserializeFunction();
  var t2 = new $._deserialize_deserializeObject();
  if (message == null)
    return;
  else if (typeof message === 'string' || typeof message === 'number' || typeof message === 'boolean')
    return message;
  else if (typeof message === 'object' && message !== null && !!message.is$SendPortSync)
    return message;
  switch ($.index(message, 0)) {
    case 'funcref':
      return t1.call$1(message);
    case 'objref':
      return t2.call$1(message);
    case 'domref':
      return $._deserializeElement($.index(message, 1));
  }
  throw $.$$throw('Unsupported serialized data: ' + $.S(message));
};

$._Device_isOpera = function() {
  return $.contains$2($._Device_userAgent(), 'Opera', 0);
};

$.Element_Element$tag = function(tag) {
  return $._ElementFactoryProvider_createElement_tag(tag);
};

$.Arrays_indexOf = function(a, element, startIndex, endIndex) {
  if (typeof a !== 'string' && (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior()))
    return $.Arrays_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (var i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$._Lists_indexOf = function(a, element, startIndex, endIndex) {
  if (typeof a !== 'string' && (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior()))
    return $._Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof startIndex !== 'number')
    return $._Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof endIndex !== 'number')
    return $._Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (var i = startIndex; i < endIndex; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$._TextTrackCueEventsImpl$ = function(_ptr) {
  return new $._TextTrackCueEventsImpl(_ptr);
};

$.Channel$ = function(token) {
  return new $.Channel(token);
};

$.regExpExec = function(regExp, str) {
  var result = $.regExpGetNative(regExp).exec(str);
  if (result === null)
    return;
  return result;
};

$.endsWith = function(receiver, other) {
  if (!(typeof receiver === 'string'))
    return receiver.endsWith$1(other);
  $.checkString(other);
  var receiverLength = receiver.length;
  var otherLength = other.length;
  if (otherLength > receiverLength)
    return false;
  return other === $.substring$1(receiver, receiverLength - otherLength);
};

$.allMatchesInStringUnchecked = function(needle, haystack) {
  var result = $.ListImplementation_List(null);
  var length$ = $.get$length(haystack);
  var patternLength = needle.length;
  for (var startIndex = 0; true;) {
    var position = $.indexOf$2(haystack, needle, startIndex);
    if ($.eqB(position, -1))
      break;
    result.push($.StringMatch$(position, haystack, needle));
    var endIndex = $.add(position, patternLength);
    if ($.eqB(endIndex, length$))
      break;
    else
      startIndex = $.eqB(position, endIndex) ? $.add(startIndex, 1) : endIndex;
  }
  return result;
};

$._SpeechRecognitionEventsImpl$ = function(_ptr) {
  return new $._SpeechRecognitionEventsImpl(_ptr);
};

$.Primitives_getSeconds = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0) : ($.Primitives_lazyAsJsDate(receiver).getSeconds() + 0);
};

$.ReceivePortSync__lookup = function(isolateId, portId) {
  if ($.eqB(isolateId, $.ReceivePortSync__isolateId()))
    return $.index($.ReceivePortSync__portMap, portId).toSendPort$0();
  else
    return $._RemoteSendPortSync$(isolateId, portId);
};

$._HttpRequestUploadEventsImpl$ = function(_ptr) {
  return new $._HttpRequestUploadEventsImpl(_ptr);
};

$.StringDescription$ = function(init) {
  var t1 = new $.StringDescription(null);
  t1.StringDescription$1(init);
  return t1;
};

$.checkNull = function(object) {
  if (object == null)
    throw $.$$throw($.NullPointerException$(null, $.CTC1));
  return object;
};

$._defaultErrorFormatter = function(actual, matcher, reason, matchState, verbose) {
  var description = $.StringDescription$('');
  $.add$1(description.add$1('Expected: ').addDescriptionOf$1(matcher), '\n     but: ');
  matcher.describeMismatch$4(actual, description, matchState, verbose);
  description.add$1('.\n');
  if (verbose === true && typeof actual === 'object' && actual !== null && (actual.constructor === Array || actual.is$Iterable()))
    $.add$1(description.add$1('Actual: ').addDescriptionOf$1(actual), '\n');
  if (!(reason == null))
    $.add$1(description.add$1(reason), '\n');
  return description.toString$0();
};

$._defer = function(callback) {
  var port = $._ReceivePortFactory_ReceivePort();
  port.receive$1(new $._defer_anon(port, callback));
  port.toSendPort$0().send$2(null, null);
};

$.ensureInitialized = function() {
  if ($._initialized === true)
    return;
  $._initialized = true;
  $._tests = [];
  $._testRunner = $._nextBatch;
  $._uncaughtErrorMessage = null;
  if ($._config == null)
    $._config = $.Configuration$();
  $._config.onInit$0();
  if ($._config.get$autoStart() === true)
    $._defer($.runTests);
};

$.Collections__containsRef = function(c, ref) {
  for (var t1 = $.iterator(c); t1.get$hasNext() === true;) {
    var t2 = t1.next$0();
    if (t2 == null ? ref == null : t2 === ref)
      return true;
  }
  return false;
};

$.TestCase$ = function(id, description, test, callbackFunctionsOutstanding) {
  var t1 = $._currentGroup;
  return new $.TestCase(id, description, $._testSetup, $._testTeardown, test, callbackFunctionsOutstanding, '', null, null, t1, null, null, true, false);
};

$._MediaElementEventsImpl$ = function(_ptr) {
  return new $._MediaElementEventsImpl(_ptr);
};

$.Proxy$_internal = function(_port, _id) {
  return new $.Proxy(_port, _id);
};

$._FutureImpl$ = function() {
  return new $._FutureImpl(false, null, null, null, false, [], [], []);
};

$.concat = function(receiver, other) {
  if (!(typeof receiver === 'string'))
    return receiver.concat$1(other);
  return receiver + other;
};

$.getTraceFromException = function(exception) {
  return $.StackTrace$(exception.stack);
};

$.Maps__emitMap = function(m, result, visiting) {
  var t1 = {};
  $.add$1(visiting, m);
  $.add$1(result, '{');
  t1.first_1 = true;
  $.forEach(m, new $.Maps__emitMap_anon(result, t1, visiting));
  $.add$1(result, '}');
  $.removeLast(visiting);
};

$._MessageTraverser_isPrimitive = function(x) {
  return x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean';
};

$._Deserializer_isPrimitive = function(x) {
  return x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean';
};

$.propertySet = function(object, property, value) {
  object[property] = value;
};

$._BatteryManagerEventsImpl$ = function(_ptr) {
  return new $._BatteryManagerEventsImpl(_ptr);
};

$._MessageTraverser_isPrimitive0 = function(x) {
  return x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean';
};

$._Deserializer_isPrimitive0 = function(x) {
  return x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean';
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$._IDBOpenDBRequestEventsImpl$ = function(_ptr) {
  return new $._IDBOpenDBRequestEventsImpl(_ptr);
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.le = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a <= b : $.le$slow(a, b);
};

$._send = function(type, data) {
  var event$ = $.CustomEvent_CustomEvent(type, false, false, data);
  $.index($.window().get$on(), type).dispatch$1(event$);
};

$.JSSyntaxRegExp$ = function(pattern, ignoreCase, multiLine) {
  return new $.JSSyntaxRegExp(pattern, multiLine, ignoreCase);
};

$._serializeMessage = function(message) {
  if ($._globalState().get$needSerialization() === true)
    return $._JsSerializer$0().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$.IndexOutOfRangeException$ = function(_value) {
  return new $.IndexOutOfRangeException(_value);
};

$.KeyValuePair$ = function(key, value) {
  return new $.KeyValuePair(key, value);
};

$._DocumentEventsImpl$ = function(_ptr) {
  return new $._DocumentEventsImpl(_ptr);
};

$._IDBVersionChangeRequestEventsImpl$ = function(_ptr) {
  return new $._IDBVersionChangeRequestEventsImpl(_ptr);
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$._MessageTraverserVisitedMap$0 = function() {
  return new $._MessageTraverserVisitedMap0();
};

$.get$isNaN = function(receiver) {
  return isNaN(receiver);
};

$._SpreadArgsHelper$fixedCallCount = function(callback, expectedCalls) {
  var t1 = new $._SpreadArgsHelper(null, null, 0, null, null, null, null);
  t1._SpreadArgsHelper$fixedCallCount$2(callback, expectedCalls);
  return t1;
};

$.FutureNotCompleteException$ = function() {
  return new $.FutureNotCompleteException();
};

$.get$hashCode = function(receiver) {
  if (receiver == null)
    return 0;
  if (typeof receiver === 'number')
    return receiver & 0x1FFFFFFF;
  if (typeof receiver === 'boolean')
    return receiver ? 1077375012 : 3247177846;
  if ($.isJsArray(receiver))
    return $.Primitives_objectHashCode(receiver);
  if (!(typeof receiver === 'string'))
    return receiver.get$hashCode();
  var length$ = receiver.length;
  for (var hash = 0, i = 0; i < length$; ++i) {
    var hash0 = 536870911 & hash + receiver.charCodeAt(i);
    var hash1 = 536870911 & hash0 + 524287 & hash0 << 10;
    hash1 = (hash1 ^ $.shr(hash1, 6)) >>> 0;
    hash = hash1;
  }
  hash0 = 536870911 & hash + 67108863 & hash << 3;
  hash0 = (hash0 ^ $.shr(hash0, 11)) >>> 0;
  return 536870911 & hash0 + 16383 & hash0 << 15;
};

$._JsSerializer$ = function() {
  return new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
};

$._JsSerializer$0 = function() {
  var t1 = new $._JsSerializer0(0, $._MessageTraverserVisitedMap$0());
  t1._JsSerializer$0();
  return t1;
};

$.LinkedHashMapImplementation$ = function() {
  var t1 = new $.LinkedHashMapImplementation(null, null);
  t1.LinkedHashMapImplementation$0();
  return t1;
};

$._DOMWindowCrossFrameImpl__createSafe = function(w) {
  var t1 = $.window();
  if (w == null ? t1 == null : w === t1)
    return w;
  else
    return $._DOMWindowCrossFrameImpl$(w);
};

$._completeTests = function() {
  if ($._initialized !== true)
    return;
  for (var t1 = $.iterator($._tests), testsFailed_ = 0, testsPassed_ = 0, testsErrors_ = 0; t1.get$hasNext() === true;)
    switch (t1.next$0().get$result()) {
      case 'pass':
        ++testsPassed_;
        break;
      case 'fail':
        ++testsFailed_;
        break;
      case 'error':
        ++testsErrors_;
        break;
    }
  $._config.onDone$5(testsPassed_, testsFailed_, testsErrors_, $._tests, $._uncaughtErrorMessage);
  $._initialized = false;
};

$._Collections_contains = function(iterable, element) {
  for (var t1 = $.iterator(iterable); t1.get$hasNext() === true;)
    if ($.eqB(t1.next$0(), element))
      return true;
  return false;
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property,
      {value: value, enumerable: false, writable: true, configurable: true});
};

$.lt = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a < b : $.lt$slow(a, b);
};

$._FileWriterEventsImpl$ = function(_ptr) {
  return new $._FileWriterEventsImpl(_ptr);
};

$._callPortSync = function(id, message) {
  return ReceivePortSync.dispatchCall(id, message);
};

$.regExpGetNative = function(regExp) {
  var r = regExp._re;
  return r == null ? regExp._re = $.regExpMakeNative(regExp, false) : r;
};

$._Manager$ = function() {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null);
  t1._Manager$0();
  return t1;
};

$.Duration$ = function(days, hours, milliseconds, minutes, seconds) {
  return new $.Duration($.add($.add($.add($.add($.mul(days, 86400000), $.mul(hours, 3600000)), $.mul(minutes, 60000)), $.mul(seconds, 1000)), milliseconds));
};

$.sub = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a - b : $.sub$slow(a, b);
};

$.Proxy__convert$bailout = function(state0, env0) {
  switch (state0) {
    case 1:
      var data = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      if (state0 === 0 && typeof data === 'object' && data !== null && data.is$Map()) {
        var result = $.Proxy_Proxy($.context().get$Object(), null, null, null, null);
        for (var t1 = $.iterator(data.getKeys$0()); t1.get$hasNext() === true;) {
          var t2 = t1.next$0();
          var value = $.Proxy__convert(data.operator$index$1(t2));
          result.noSuchMethod$2('set:' + $.S(t2), [value]);
        }
        return result;
      } else
        switch (state0) {
          case 0:
          case 1:
            if (state0 === 1 || state0 === 0 && typeof data === 'object' && data !== null && (data.constructor === Array || data.is$List()))
              switch (state0) {
                case 0:
                case 1:
                  state0 = 0;
                  result = $._deserialize($._jsPortCreateArray.callSync$1([]));
                  for (var i = 0; $.ltB(i, $.get$length(data)); ++i) {
                    value = $.Proxy__convert($.index(data, i));
                    result.noSuchMethod$2('set:' + $.S(i), [value]);
                  }
                  return result;
              }
        }
      return data;
  }
};

$.Arrays_copy$bailout = function(state0, src, srcStart, dst, dstStart, count) {
  if (srcStart < dstStart)
    for (var i = srcStart + count - 1, j = dstStart + count - 1; i >= srcStart; --i, --j)
      $.indexSet(dst, j, $.index(src, i));
  else
    for (var t1 = srcStart + count, i = srcStart, j = dstStart; i < t1; ++i, ++j)
      $.indexSet(dst, j, $.index(src, i));
};

$.Arrays_indexOf$bailout = function(state0, a, element, startIndex, endIndex) {
  if ($.geB(startIndex, $.get$length(a)))
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (var i = startIndex; i < endIndex; ++i)
    if ($.eqB($.index(a, i), element))
      return i;
  return -1;
};

$._Lists_indexOf$bailout = function(state0, a, element, startIndex, endIndex) {
  if ($.geB(startIndex, $.get$length(a)))
    return -1;
  if ($.ltB(startIndex, 0))
    startIndex = 0;
  for (var i = startIndex; $.ltB(i, endIndex); i = $.add(i, 1))
    if ($.eqB($.index(a, i), element))
      return i;
  return -1;
};

$._Lists_getRange$bailout = function(state0, a, start, length$, accumulator) {
  if ($.ltB(length$, 0))
    throw $.$$throw($.ArgumentError$('length'));
  if ($.ltB(start, 0))
    throw $.$$throw($.IndexOutOfRangeException$(start));
  var end = $.add(start, length$);
  if ($.gtB(end, $.get$length(a)))
    throw $.$$throw($.IndexOutOfRangeException$(end));
  for (var i = start; $.ltB(i, end); i = $.add(i, 1))
    accumulator.push($.index(a, i));
  return accumulator;
};

$.StringImplementation__toJsStringArray$bailout = function(state0, strings) {
  $.checkNull(strings);
  var length$ = $.get$length(strings);
  if ($.isJsArray(strings)) {
    for (var i = 0; $.ltB(i, length$); ++i) {
      var string = $.index(strings, i);
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
    }
    var array = strings;
  } else {
    array = $.ListImplementation_List(length$);
    for (i = 0; $.ltB(i, length$); ++i) {
      string = $.index(strings, i);
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
      if (i >= array.length)
        throw $.ioore(i);
      array[i] = string;
    }
  }
  return array;
};

$.contains$1$bailout = function(state0, receiver, other) {
  if (typeof receiver === 'string')
    return $.contains$2(receiver, other, 0);
  else if ($.isJsArray(receiver)) {
    for (var i = 0; $.ltB(i, $.get$length(receiver)); ++i)
      if ($.eqB(other, $.index(receiver, i)))
        return true;
    return false;
  }
  return receiver.contains$1(other);
};

$.Futures_wait$bailout = function(state0, futures, t1) {
  if ($.get$isEmpty(futures) === true)
    return $.Future_Future$immediate($.CTC1);
  var completer = $.Completer_Completer();
  var result = completer.get$future();
  t1.remaining_1 = $.get$length(futures);
  var values = $.ListImplementation_List($.get$length(futures));
  for (var i = 0; $.ltB(i, $.get$length(futures)); ++i) {
    var future = $.index(futures, i);
    future.then$1(new $.Futures_wait_anon(completer, i, t1, result, values));
    future.handleException$1(new $.Futures_wait_anon0(future, completer, result));
  }
  return result;
};

$._deserialize.call$1 = $._deserialize;
$._deserialize.$name = "_deserialize";
$.runTests.call$0 = $.runTests;
$.runTests.$name = "runTests";
$.toStringWrapper.call$0 = $.toStringWrapper;
$.toStringWrapper.$name = "toStringWrapper";
$.proxyDebug.call$1 = $.proxyDebug;
$.proxyDebug.call$0 = function() {
  return this.call$1('')
};
$.proxyDebug.$name = "proxyDebug";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$._defaultErrorFormatter.call$5 = $._defaultErrorFormatter;
$._defaultErrorFormatter.$name = "_defaultErrorFormatter";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$._serialize.call$1 = $._serialize;
$._serialize.$name = "_serialize";
$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$._nextBatch.call$0 = $._nextBatch;
$._nextBatch.$name = "_nextBatch";
$._timerFactory.call$3 = $._timerFactory;
$._timerFactory.$name = "_timerFactory";
Isolate.$finishClasses($$);
$$ = {};
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.CTC1 = Isolate.makeConstantList([]);
$.CTC15 = new Isolate.$isolateProperties.ConstantMap(0, {}, Isolate.$isolateProperties.CTC1);
$.CTC22 = 'structured clone of ArrayBuffer';
$.CTC8 = new Isolate.$isolateProperties.NotImplementedException('structured clone of ArrayBuffer');
$.CTC23 = '[-[\\]{}()*+?.,\\\\^$|#\\s]';
$.CTC24 = false;
$.CTC11 = new Isolate.$isolateProperties.JSSyntaxRegExp('[-[\\]{}()*+?.,\\\\^$|#\\s]', false, false);
$.CTC12 = new Isolate.$isolateProperties._DeletedKeySentinel();
$.CTC25 = 'structured clone of ArrayBufferView';
$.CTC9 = new Isolate.$isolateProperties.NotImplementedException('structured clone of ArrayBufferView');
$.CTC21 = new Isolate.$isolateProperties.Object();
$.CTC26 = new Isolate.$isolateProperties._IsTrue();
$.CTC27 = 'structured clone of Blob';
$.CTC6 = new Isolate.$isolateProperties.NotImplementedException('structured clone of Blob');
$.CTC28 = 'structured clone of Date';
$.CTC3 = new Isolate.$isolateProperties.NotImplementedException('structured clone of Date');
$.CTC29 = 'IDBKey containing Date';
$.CTC14 = new Isolate.$isolateProperties.NotImplementedException('IDBKey containing Date');
$.CTC30 = '^#[_a-zA-Z]\\w*$';
$.CTC = new Isolate.$isolateProperties.JSSyntaxRegExp('^#[_a-zA-Z]\\w*$', false, false);
$.CTC31 = 'structured clone of RegExp';
$.CTC4 = new Isolate.$isolateProperties.NotImplementedException('structured clone of RegExp');
$.CTC32 = '^[*a-zA-Z0-9]+$';
$.CTC17 = new Isolate.$isolateProperties.JSSyntaxRegExp('^[*a-zA-Z0-9]+$', false, false);
$.CTC33 = 'Invalid list length';
$.CTC19 = new Isolate.$isolateProperties.ArgumentError('Invalid list length');
$.CTC34 = 'Incorrect number or type of arguments';
$.CTC20 = new Isolate.$isolateProperties._ExceptionImplementation('Incorrect number or type of arguments');
$.CTC35 = 'structured clone of ImageData';
$.CTC7 = new Isolate.$isolateProperties.NotImplementedException('structured clone of ImageData');
$.CTC36 = 'structured clone of other type';
$.CTC10 = new Isolate.$isolateProperties.NotImplementedException('structured clone of other type');
$.CTC37 = null;
$.CTC0 = new Isolate.$isolateProperties.NullPointerException(null, Isolate.$isolateProperties.CTC1);
$.CTC2 = new Isolate.$isolateProperties.NoMoreElementsException();
$.CTC13 = new Isolate.$isolateProperties.EmptyQueueException();
$.CTC38 = 'structured clone of File';
$.CTC5 = new Isolate.$isolateProperties.NotImplementedException('structured clone of File');
$.CTC39 = '^\\[name=["\'][^\'"]+[\'"]\\]$';
$.CTC16 = new Isolate.$isolateProperties.JSSyntaxRegExp('^\\[name=["\'][^\'"]+[\'"]\\]$', false, false);
$.CTC18 = new Isolate.$isolateProperties.NotImplementedException(null);
$.PASS = 'pass';
$._JsonParser_CHAR_CAPITAL_E = 69;
$._jsPortInstanceof = null;
$._JsonParser_TAB = 9;
$.Duration_HOURS_PER_DAY = 24;
$._JsonParser_FALSE_STRING = 'false';
$._jsInvalidate = null;
$.HashMapImplementation__DELETED_KEY = Isolate.$isolateProperties.CTC12;
$._DateImpl__MAX_MILLISECONDS_SINCE_EPOCH = 8640000000000000;
$._testSetup = null;
$._currentTest = 0;
$._JsonParser_CHAR_N = 110;
$._JsonParser_DOT = 46;
$._JsonParser_QUOTE = 34;
$._JsonParser_CHAR_E = 101;
$._JsonParser_MINUS = 45;
$._JsonParser_CHAR_2 = 50;
$._JsonParser_CHAR_7 = 55;
$._JsonParser_NULL_LITERAL = 110;
$._JsonParser_CHAR_3 = 51;
$._jsPortCreateArray = null;
$._JsonParser_COLON = 58;
$._JsonParser_FALSE_LITERAL = 102;
$._JsonParser_TRUE_LITERAL = 116;
$.Duration_MINUTES_PER_HOUR = 60;
$._channelMessage = '_channel_message';
$._JsonParser_SPACE = 32;
$.ERROR = 'error';
$._currentGroup = '';
$._jsPortDebug = null;
$._JsonParser_CHAR_U = 117;
$._jsExitJavaScriptScope = null;
$._JsonParser_NUMBER_LITERAL = 45;
$.ReceivePortSync__portIdCount = null;
$._jsEnterJavaScriptScope = null;
$._ReceivePortImpl__nextFreeId = 1;
$._sockets = null;
$._JsonParser_tokens = null;
$._JsonParser_BACKSPACE = 8;
$._JsonParser_CHAR_1 = 49;
$._channelClose = '_channel_close';
$._jsPortSync = null;
$._testRunner = null;
$._JsonParser_RBRACKET = 93;
$._assertFailureHandler = null;
$._channelError = '_channel_error';
$._uncaughtErrorMessage = null;
$._JsonParser_CHAR_6 = 54;
$._JsonParser_CHAR_5 = 53;
$.__proxiedFunctionTable = null;
$._localNextElementId = 0;
$._dartExitDartScope = null;
$._getTypeNameOf = null;
$._config = null;
$.Duration_MILLISECONDS_PER_DAY = 86400000;
$._JsonParser_CHAR_B = 98;
$._JsonParser_CARRIAGE_RETURN = 13;
$._JsonParser_CHAR_0 = 48;
$.Primitives_hashCodeSeed = 0;
$._JsonParser_BACKSLASH = 92;
$._JsonParser_CHAR_8 = 56;
$.groupSep = ' ';
$._JsonParser_CHAR_R = 114;
$._JsonParser_SLASH = 47;
$._JsonParser_CHAR_9 = 57;
$.HashMapImplementation__INITIAL_CAPACITY = 8;
$._JsonParser_STRING_LITERAL = 34;
$._openChannel = '_open_channel';
$.Duration_SECONDS_PER_MINUTE = 60;
$._JsonParser_LBRACE = 123;
$._jsPortCreate = null;
$._tests = null;
$.__proxiedObjectTable = null;
$._testTeardown = null;
$._channelOpen = '_channel_open';
$._JsonParser_NEW_LINE = 10;
$._assertErrorFormatter = null;
$._initialized = false;
$._jsPortEquals = null;
$.isTrue = Isolate.$isolateProperties.CTC26;
$._JsonParser_WHITESPACE = 32;
$._TimerFactory__factory = null;
$._cachedBrowserPrefix = null;
$._JsonParser_CHAR_4 = 52;
$.Primitives_DOLLAR_CHAR_VALUE = 36;
$.Duration_MILLISECONDS_PER_MINUTE = 60000;
$._JsonParser_LAST_ASCII = 125;
$._JsonParser_CHAR_T = 116;
$._JsonParser_NULL_STRING = 'null';
$.ReceivePortSync__portMap = null;
$._JsonParser_CHAR_F = 102;
$._dartEnterDartScope = null;
$._JsonParser_COMMA = 44;
$._JsonParser_LBRACKET = 91;
$._JsonParser_RBRACE = 125;
$._soloTest = null;
$._JsonParser_PLUS = 43;
$._jsGlobalize = null;
$.ReceivePortSync__cachedIsolateId = null;
$.Duration_MILLISECONDS_PER_SECOND = 1000;
$.__deserializedFunctionTable = null;
$.Duration_MILLISECONDS_PER_HOUR = 3600000;
$._DART_ID = 'data-dart_id';
$._JsonParser_TRUE_STRING = 'true';
$._JsonParser_FORM_FEED = 12;
$._DART_TEMPORARY_ATTACHED = 'data-dart_temporary_attached';
$.FAIL = 'fail';
var $ = null;
Isolate.$finishClasses($$);
$$ = {};
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.$defineNativeClass = function(cls, desc) {
  var fields = desc[''] || [];
  var generateGetterSetter =   function(field, prototype) {
    var len = field.length;
    var lastChar = field[len - 1];
    var needsGetter = lastChar == '?' || lastChar == '=';
    var needsSetter = lastChar == '!' || lastChar == '=';
    if (needsGetter || needsSetter) field = field.substring(0, len - 1);
    if (needsGetter) {
      var getterString = "return this." + field + ";";
        prototype["get$" + field] = new Function(getterString);
    }
    if (needsSetter) {
      var setterString = "this." + field + " = v;";
      prototype["set$" + field] = new Function("v", setterString);
    }
    return field;
  };
  for (var i = 0; i < fields.length; i++) {
    generateGetterSetter(fields[i], desc);
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var method in desc) {
    if (method !== '') {
      if (hasOwnProperty.call(desc, method)) {
        $.dynamicFunction(method)[cls] = desc[method];
      }
    }
  }
};

(function(table) {
  for (var key in table) {
    $.defineProperty(Object.prototype, key, table[key]);
  }
})({
 is$JavaScriptIndexingBehavior: function() { return false; },
 is$Iterable: function() { return false; },
 is$_BlobImpl: function() { return false; },
 is$ArrayBuffer: function() { return false; },
 is$ArrayBufferView: function() { return false; },
 is$_ArrayBufferViewImpl: function() { return false; },
 is$_ImageDataImpl: function() { return false; },
 is$Node: function() { return false; },
 is$_FileListImpl: function() { return false; },
 is$File: function() { return false; },
 is$_FileImpl: function() { return false; },
 is$IDBKeyRange: function() { return false; },
 toString$0: function() { return $.toStringForNativeObject(this); },
 is$Element: function() { return false; },
 is$List: function() { return false; },
 is$_ArrayBufferImpl: function() { return false; },
 get$hashCode: function() { return $.hashCodeForNativeObject(this); },
 is$ImageData: function() { return false; },
 is$Map: function() { return false; },
 is$Blob: function() { return false; },
 is$Collection: function() { return false; }
});

$.$defineNativeClass('HTMLElement', {"": []
});

$.$defineNativeClass('AbstractWorker', {"": [],
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $._AbstractWorkerEventsImpl$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLAnchorElement', {"": ["name?", "type!"],
 toString$0: function() {
  return this.toString();
},
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('WebKitAnimationEvent', {"": []
});

$.$defineNativeClass('WebKitAnimation', {"": ["name?"]
});

$.$defineNativeClass('HTMLAppletElement', {"": ["name?"],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLAreaElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('ArrayBuffer', {"": [],
 is$_ArrayBufferImpl: function() { return true; },
 is$ArrayBuffer: function() { return true; }
});

$.$defineNativeClass('ArrayBufferView', {"": [],
 is$_ArrayBufferViewImpl: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Attr', {"": ["name?", "value="],
 is$Node: function() { return true; }
});

$.$defineNativeClass('AudioBuffer', {"": ["length?"]
});

$.$defineNativeClass('AudioBufferSourceNode', {"": []
});

$.$defineNativeClass('AudioChannelMerger', {"": []
});

$.$defineNativeClass('AudioChannelSplitter', {"": []
});

$.$defineNativeClass('AudioContext', {"": [],
 get$on: function() {
  return $._AudioContextEventsImpl$(this);
}
});

$.$defineNativeClass('AudioDestinationNode', {"": []
});

$.$defineNativeClass('HTMLAudioElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('AudioGain', {"": []
});

$.$defineNativeClass('AudioGainNode', {"": []
});

$.$defineNativeClass('AudioListener', {"": []
});

$.$defineNativeClass('AudioNode', {"": []
});

$.$defineNativeClass('AudioPannerNode', {"": []
});

$.$defineNativeClass('AudioParam', {"": ["name?", "value="]
});

$.$defineNativeClass('AudioProcessingEvent', {"": []
});

$.$defineNativeClass('AudioSourceNode', {"": []
});

$.$defineNativeClass('HTMLBRElement', {"": [],
 clear$0: function() { return this.clear.call$0(); },
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('BarInfo', {"": []
});

$.$defineNativeClass('HTMLBaseElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLBaseFontElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('BatteryManager', {"": [],
 get$on: function() {
  return $._BatteryManagerEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('BeforeLoadEvent', {"": []
});

$.$defineNativeClass('BiquadFilterNode', {"": ["type!"]
});

$.$defineNativeClass('Blob', {"": [],
 is$_BlobImpl: function() { return true; },
 is$Blob: function() { return true; }
});

$.$defineNativeClass('HTMLBodyElement', {"": [],
 get$on: function() {
  return $._BodyElementEventsImpl$(this);
},
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLButtonElement', {"": ["name?", "type!", "value="],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('CDATASection', {"": [],
 is$Node: function() { return true; }
});

$.$defineNativeClass('CSSCharsetRule', {"": []
});

$.$defineNativeClass('CSSFontFaceRule', {"": []
});

$.$defineNativeClass('CSSImportRule', {"": []
});

$.$defineNativeClass('WebKitCSSKeyframeRule', {"": []
});

$.$defineNativeClass('WebKitCSSKeyframesRule', {"": ["name?"]
});

$.$defineNativeClass('WebKitCSSMatrix', {"": [],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('CSSMediaRule', {"": []
});

$.$defineNativeClass('CSSPageRule', {"": []
});

$.$defineNativeClass('CSSPrimitiveValue', {"": []
});

$.$defineNativeClass('CSSRule', {"": []
});

$.$defineNativeClass('CSSRuleList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('CSSStyleDeclaration', {"": ["length?"],
 _getPropertyValue$1: function(propertyName) {
  return this.getPropertyValue(propertyName);
},
 getPropertyValue$1: function(propertyName) {
  var propValue = this._getPropertyValue$1(propertyName);
  return !(propValue == null) ? propValue : '';
},
 get$clear: function() {
  return this.getPropertyValue$1('clear');
},
 clear$0: function() { return this.get$clear().call$0(); },
 get$filter: function() {
  return this.getPropertyValue$1($.S($._browserPrefix()) + 'filter');
},
 filter$1: function(arg0) { return this.get$filter().call$1(arg0); }
});

$.$defineNativeClass('CSSStyleRule', {"": []
});

$.$defineNativeClass('CSSStyleSheet', {"": []
});

$.$defineNativeClass('WebKitCSSTransformValue', {"": [],
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('CSSUnknownRule', {"": []
});

$.$defineNativeClass('CSSValue', {"": []
});

$.$defineNativeClass('CSSValueList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('HTMLCanvasElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('CanvasGradient', {"": []
});

$.$defineNativeClass('CanvasPattern', {"": []
});

$.$defineNativeClass('CanvasRenderingContext2D', {"": []
});

$.$defineNativeClass('CanvasRenderingContext', {"": []
});

$.$defineNativeClass('CharacterData', {"": ["length?"],
 remove$0: function() {
  return this.remove();
},
 is$Node: function() { return true; }
});

$.$defineNativeClass('ClientRect', {"": []
});

$.$defineNativeClass('ClientRectList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('Clipboard', {"": []
});

$.$defineNativeClass('CloseEvent', {"": []
});

$.$defineNativeClass('Comment', {"": [],
 is$Node: function() { return true; }
});

$.$defineNativeClass('CompositionEvent', {"": []
});

_ConsoleImpl = (typeof console == 'undefined' ? {} : console);
_ConsoleImpl.count$1 = function(arg) {
  return this.count(arg);
};
_ConsoleImpl.get$count = function() { return new $.BoundClosure(this, 'count$1'); };
$.$defineNativeClass('HTMLContentElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('ConvolverNode', {"": []
});

$.$defineNativeClass('Coordinates', {"": []
});

$.$defineNativeClass('Counter', {"": []
});

$.$defineNativeClass('Crypto', {"": []
});

$.$defineNativeClass('CustomEvent', {"": ["detail?"],
 $dom_initCustomEvent$4: function(typeArg, canBubbleArg, cancelableArg, detailArg) {
  return this.initCustomEvent(typeArg,canBubbleArg,cancelableArg,detailArg);
}
});

$.$defineNativeClass('HTMLDListElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('DOMApplicationCache', {"": [],
 get$on: function() {
  return $._DOMApplicationCacheEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('DOMError', {"": ["name?"]
});

$.$defineNativeClass('DOMException', {"": ["message?", "name?"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('DOMFileSystem', {"": ["name?"]
});

$.$defineNativeClass('DOMFileSystemSync', {"": ["name?"]
});

$.$defineNativeClass('DOMImplementation', {"": []
});

$.$defineNativeClass('MimeTypeArray', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('MimeType', {"": ["description?"]
});

$.$defineNativeClass('DOMParser', {"": []
});

$.$defineNativeClass('PluginArray', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('Plugin', {"": ["description?", "length?", "name?"]
});

$.$defineNativeClass('Selection', {"": [],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('DOMSettableTokenList', {"": ["value="]
});

$.$defineNativeClass('DOMStringList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 contains$1: function(string) {
  return this.contains(string);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('DOMTokenList', {"": ["length?"],
 contains$1: function(token) {
  return this.contains(token);
},
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('URL', {"": []
});

$.$defineNativeClass('HTMLDataListElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('DataTransferItem', {"": []
});

$.$defineNativeClass('DataTransferItemList', {"": ["length?"],
 add$2: function(data_OR_file, type) {
  return this.add(data_OR_file,type);
},
 add$1: function(data_OR_file) {
  return this.add(data_OR_file);
},
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('DataView', {"": [],
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Database', {"": []
});

$.$defineNativeClass('DatabaseSync', {"": []
});

$.$defineNativeClass('DedicatedWorkerContext', {"": [],
 get$on: function() {
  return $._DedicatedWorkerContextEventsImpl$(this);
},
 postMessage$2: function(message, messagePorts) {
  var t1 = $ === messagePorts;
  if (t1)
    messagePorts = null;
  if (!t1) {
    this._postMessage_1$2($._convertDartToNative_SerializedScriptValue(message), messagePorts);
    return;
  }
  this._postMessage_2$1($._convertDartToNative_SerializedScriptValue(message));
  return;
},
 postMessage$1: function(message) {
  return this.postMessage$2(message,$)
},
 _postMessage_1$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 _postMessage_2$1: function(message) {
  return this.postMessage(message);
}
});

$.$defineNativeClass('DelayNode', {"": []
});

$.$defineNativeClass('HTMLDetailsElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('DeviceMotionEvent', {"": []
});

$.$defineNativeClass('DeviceOrientationEvent', {"": []
});

$.$defineNativeClass('HTMLDirectoryElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('DirectoryEntry', {"": []
});

$.$defineNativeClass('DirectoryEntrySync', {"": []
});

$.$defineNativeClass('DirectoryReader', {"": []
});

$.$defineNativeClass('DirectoryReaderSync', {"": []
});

$.$defineNativeClass('HTMLDivElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('DocumentFragment', {"": [],
 get$elements: function() {
  if (this._elements == null)
    this._elements = $._FilteredElementList$(this);
  return this._elements;
},
 query$1: function(selectors) {
  return this.$dom_querySelector$1(selectors);
},
 queryAll$1: function(selectors) {
  return $._FrozenElementList$_wrap(this.$dom_querySelectorAll$1(selectors));
},
 set$innerHTML: function(value) {
  if (Object.getPrototypeOf(this).hasOwnProperty('set$innerHTML')) {
  {
  $.clear(this.get$nodes());
  var e = $.Element_Element$tag('div');
  e.set$innerHTML(value);
  var nodes = $.ListImplementation_List$from(e.get$nodes());
  $.addAll(this.get$nodes(), nodes);
}
  } else {
    return Object.prototype.set$innerHTML.call(this, value);
  }

},
 get$id: function() {
  return '';
},
 get$parent: function() {
  return;
},
 get$attributes: function() {
  return $.CTC15;
},
 get$on: function() {
  return $._ElementEventsImpl$(this);
},
 $dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 $dom_querySelectorAll$1: function(selectors) {
  return this.querySelectorAll(selectors);
},
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLDocument', {"": ["body?", "documentElement?"],
 get$on: function() {
  return $._DocumentEventsImpl$(this);
},
 $dom_createElement$1: function(tagName) {
  return this.createElement(tagName);
},
 $dom_createEvent$1: function(eventType) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$dom_createEvent$1')) {
  {
  return this.createEvent(eventType);
}
  } else {
    return Object.prototype.$dom_createEvent$1.call(this, eventType);
  }

},
 $dom_getElementById$1: function(elementId) {
  return this.getElementById(elementId);
},
 $dom_getElementsByName$1: function(elementName) {
  return this.getElementsByName(elementName);
},
 $dom_getElementsByTagName$1: function(tagname) {
  return this.getElementsByTagName(tagname);
},
 $dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 $dom_querySelectorAll$1: function(selectors) {
  return this.querySelectorAll(selectors);
},
 query$1: function(selectors) {
  if ($.CTC.hasMatch$1(selectors) === true)
    return this.$dom_getElementById$1($.substring$1(selectors, 1));
  return this.$dom_querySelector$1(selectors);
},
 queryAll$1: function(selectors) {
  if ($.CTC16.hasMatch$1(selectors) === true) {
    var mutableMatches = this.$dom_getElementsByName$1($.substring$2(selectors, 7, selectors.length - 2));
    if (typeof mutableMatches !== 'string' && (typeof mutableMatches !== 'object' || mutableMatches === null || mutableMatches.constructor !== Array && !mutableMatches.is$JavaScriptIndexingBehavior()))
      return this.queryAll$1$bailout(1, mutableMatches);
    var len = mutableMatches.length;
    var copyOfMatches = $.ListImplementation_List(len);
    for (var t1 = mutableMatches.length, i = 0; i < len; ++i) {
      if (i >= t1)
        throw $.ioore(i);
      copyOfMatches[i] = mutableMatches[i];
    }
    return $._FrozenElementList$_wrap(copyOfMatches);
  } else if ($.CTC17.hasMatch$1(selectors) === true) {
    mutableMatches = this.$dom_getElementsByTagName$1(selectors);
    if (typeof mutableMatches !== 'string' && (typeof mutableMatches !== 'object' || mutableMatches === null || mutableMatches.constructor !== Array && !mutableMatches.is$JavaScriptIndexingBehavior()))
      return this.queryAll$1$bailout(2, mutableMatches);
    len = mutableMatches.length;
    copyOfMatches = $.ListImplementation_List(len);
    for (t1 = mutableMatches.length, i = 0; i < len; ++i) {
      if (i >= t1)
        throw $.ioore(i);
      copyOfMatches[i] = mutableMatches[i];
    }
    return $._FrozenElementList$_wrap(copyOfMatches);
  } else
    return $._FrozenElementList$_wrap(this.$dom_querySelectorAll$1(selectors));
},
 queryAll$1$bailout: function(state0, env0) {
  switch (state0) {
    case 1:
      mutableMatches = env0;
      break;
    case 2:
      mutableMatches = env0;
      break;
  }
  switch (state0) {
    case 0:
    default:
      if (state0 === 1 || state0 === 0 && $.CTC16.hasMatch$1(selectors) === true)
        switch (state0) {
          case 0:
            var mutableMatches = this.$dom_getElementsByName$1($.substring$2(selectors, 7, selectors.length - 2));
          case 1:
            state0 = 0;
            var len = $.get$length(mutableMatches);
            var copyOfMatches = $.ListImplementation_List(len);
            for (var i = 0; $.ltB(i, len); ++i) {
              var t1 = $.index(mutableMatches, i);
              if (i >= copyOfMatches.length)
                throw $.ioore(i);
              copyOfMatches[i] = t1;
            }
            return $._FrozenElementList$_wrap(copyOfMatches);
        }
      else
        switch (state0) {
          case 0:
          case 2:
            if (state0 === 2 || state0 === 0 && $.CTC17.hasMatch$1(selectors) === true)
              switch (state0) {
                case 0:
                  mutableMatches = this.$dom_getElementsByTagName$1(selectors);
                case 2:
                  state0 = 0;
                  len = $.get$length(mutableMatches);
                  copyOfMatches = $.ListImplementation_List(len);
                  for (i = 0; $.ltB(i, len); ++i) {
                    t1 = $.index(mutableMatches, i);
                    if (i >= copyOfMatches.length)
                      throw $.ioore(i);
                    copyOfMatches[i] = t1;
                  }
                  return $._FrozenElementList$_wrap(copyOfMatches);
              }
            else
              return $._FrozenElementList$_wrap(this.$dom_querySelectorAll$1(selectors));
        }
  }
},
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('DocumentType', {"": ["name?"],
 remove$0: function() {
  return this.remove();
},
 is$Node: function() { return true; }
});

$.$defineNativeClass('DynamicsCompressorNode', {"": []
});

$.$defineNativeClass('EXTTextureFilterAnisotropic', {"": []
});

$.$defineNativeClass('Element', {"": ["id?", "innerHTML!"],
 get$attributes: function() {
  return $._ElementAttributeMap$(this);
},
 set$elements: function(value) {
  if (Object.getPrototypeOf(this).hasOwnProperty('set$elements')) {
  {
  var elements = this.get$elements();
  $.clear(elements);
  $.addAll(elements, value);
}
  } else {
    return Object.prototype.set$elements.call(this, value);
  }

},
 get$elements: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$elements')) {
  {
  return $._ChildrenElementList$_wrap(this);
}
  } else {
    return Object.prototype.get$elements.call(this);
  }

},
 query$1: function(selectors) {
  return this.$dom_querySelector$1(selectors);
},
 queryAll$1: function(selectors) {
  return $._FrozenElementList$_wrap(this.$dom_querySelectorAll$1(selectors));
},
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $._ElementEventsImpl$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 get$$$dom_children: function() {
  return this.children;
},
 get$$$dom_firstElementChild: function() {
  return this.firstElementChild;
},
 get$$$dom_lastElementChild: function() {
  return this.lastElementChild;
},
 $dom_getAttribute$1: function(name) {
  return this.getAttribute(name);
},
 $dom_hasAttribute$1: function(name) {
  return this.hasAttribute(name);
},
 $dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 $dom_querySelectorAll$1: function(selectors) {
  return this.querySelectorAll(selectors);
},
 $dom_removeAttribute$1: function(name) {
  return this.removeAttribute(name);
},
 $dom_setAttribute$2: function(name, value) {
  return this.setAttribute(name,value);
},
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLEmbedElement', {"": ["name?", "type!"],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('EntityReference', {"": [],
 is$Node: function() { return true; }
});

$.$defineNativeClass('EntryArray', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('EntryArraySync', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('Entry', {"": ["name?"],
 remove$2: function(successCallback, errorCallback) {
  return this.remove($.convertDartClosureToJS(successCallback, 0),$.convertDartClosureToJS(errorCallback, 1));
},
 remove$1: function(successCallback) {
  successCallback = $.convertDartClosureToJS(successCallback, 0);
  return this.remove(successCallback);
}
});

$.$defineNativeClass('EntrySync', {"": ["name?"],
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('ErrorEvent', {"": ["message?"]
});

$.$defineNativeClass('EventException', {"": ["message?", "name?"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('Event', {"": []
});

$.$defineNativeClass('EventSource', {"": [],
 get$on: function() {
  return $._EventSourceEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('EventTarget', {"": [],
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $._EventsImpl$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$dom_addEventListener$3')) {
  {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$dom_addEventListener$3.call(this, type, listener, useCapture);
  }

},
 $dom_dispatchEvent$1: function(event) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$dom_dispatchEvent$1')) {
  {
  return this.dispatchEvent(event);
}
  } else {
    return Object.prototype.$dom_dispatchEvent$1.call(this, event);
  }

},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$dom_removeEventListener$3')) {
  {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$dom_removeEventListener$3.call(this, type, listener, useCapture);
  }

}
});

$.$defineNativeClass('HTMLFieldSetElement', {"": ["elements?", "name?"],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('FileEntry', {"": []
});

$.$defineNativeClass('FileEntrySync', {"": []
});

$.$defineNativeClass('FileError', {"": []
});

$.$defineNativeClass('FileException', {"": ["message?", "name?"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('File', {"": ["name?"],
 is$_FileImpl: function() { return true; },
 is$File: function() { return true; },
 is$Blob: function() { return true; }
});

$.$defineNativeClass('FileList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$_FileListImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('FileReader', {"": ["result?"],
 get$on: function() {
  return $._FileReaderEventsImpl$(this);
},
 error$2: function(arg0, arg1) { return this.error.call$2(arg0, arg1); },
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('FileReaderSync', {"": []
});

$.$defineNativeClass('FileWriter', {"": ["length?"],
 get$on: function() {
  return $._FileWriterEventsImpl$(this);
},
 error$2: function(arg0, arg1) { return this.error.call$2(arg0, arg1); },
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('FileWriterSync', {"": ["length?"]
});

$.$defineNativeClass('Float32Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Float64Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('HTMLFontElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('FormData', {"": []
});

$.$defineNativeClass('HTMLFormElement', {"": ["length?", "name?"],
 reset$0: function() {
  return this.reset();
},
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLFrameElement', {"": ["name?"],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLFrameSetElement', {"": [],
 get$on: function() {
  return $._FrameSetElementEventsImpl$(this);
},
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('Gamepad', {"": ["id?"]
});

$.$defineNativeClass('GamepadList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('Geolocation', {"": []
});

$.$defineNativeClass('Geoposition', {"": []
});

$.$defineNativeClass('HTMLHRElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLAllCollection', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('HTMLCollection', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('HTMLOptionsCollection', {"": [],
 get$length: function() {
  return this.length;
},
 set$length: function(value) {
  this.length = value;
},
 remove$1: function(index) {
  return this.remove(index);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('HashChangeEvent', {"": []
});

$.$defineNativeClass('HTMLHeadElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLHeadingElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLHtmlElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('XMLHttpRequestException', {"": ["message?", "name?"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('XMLHttpRequest', {"": [],
 get$on: function() {
  return $._HttpRequestEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('XMLHttpRequestProgressEvent', {"": []
});

$.$defineNativeClass('XMLHttpRequestUpload', {"": [],
 get$on: function() {
  return $._HttpRequestUploadEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBAny', {"": []
});

$.$defineNativeClass('IDBCursor', {"": [],
 get$key: function() {
  return $._convertNativeToDart_IDBKey(this.get$_key());
},
 get$_key: function() {
  return this.key;
}
});

$.$defineNativeClass('IDBCursorWithValue', {"": [],
 get$value: function() {
  return $._convertNativeToDart_IDBAny(this.get$_lib_value());
},
 get$_lib_value: function() {
  return this.value;
}
});

$.$defineNativeClass('IDBDatabaseException', {"": ["message?", "name?"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('IDBDatabase', {"": ["name?"],
 get$on: function() {
  return $._IDBDatabaseEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBFactory', {"": []
});

$.$defineNativeClass('IDBIndex', {"": ["name?"],
 count$1: function(key_OR_range) {
  var t1 = $ === key_OR_range;
  if (t1)
    key_OR_range = null;
  var t2 = !t1;
  if (t1)
    return this._count_1$0();
  if (typeof key_OR_range === 'object' && key_OR_range !== null && key_OR_range.is$IDBKeyRange() || key_OR_range == null)
    return this._count_2$1(key_OR_range);
  if (t2)
    return this._count_3$1(key_OR_range);
  throw $.$$throw($.CTC20);
},
 get$count: function() { return new $.BoundClosure0(this, 'count$1'); },
 _count_1$0: function() {
  return this.count();
},
 _count_2$1: function(range) {
  return this.count(range);
},
 _count_3$1: function(key) {
  return this.count(key);
},
 get$1: function(key) {
  var t1 = $ === key;
  if (t1)
    key = null;
  t1 = !t1;
  if (typeof key === 'object' && key !== null && key.is$IDBKeyRange() || key == null)
    return this._get_1$1(key);
  if (t1)
    return this._get_2$1(key);
  throw $.$$throw($.CTC20);
},
 _get_1$1: function(key) {
  return this.get(key);
},
 _get_2$1: function(key) {
  return this.get(key);
}
});

$.$defineNativeClass('IDBKey', {"": []
});

$.$defineNativeClass('IDBKeyRange', {"": [],
 is$IDBKeyRange: function() { return true; }
});

$.$defineNativeClass('IDBObjectStore', {"": ["name?"],
 add$2: function(value, key) {
  var t1 = $ === key;
  if (t1)
    key = null;
  if (!t1)
    return this._add_1$2($._convertDartToNative_SerializedScriptValue(value), key);
  return this._add_2$1($._convertDartToNative_SerializedScriptValue(value));
},
 add$1: function(value) {
  return this.add$2(value,$)
},
 _add_1$2: function(value, key) {
  return this.add(value,key);
},
 _add_2$1: function(value) {
  return this.add(value);
},
 clear$0: function() {
  return this.clear();
},
 count$1: function(key_OR_range) {
  var t1 = $ === key_OR_range;
  if (t1)
    key_OR_range = null;
  var t2 = !t1;
  if (t1)
    return this._count_1$0();
  if (typeof key_OR_range === 'object' && key_OR_range !== null && key_OR_range.is$IDBKeyRange() || key_OR_range == null)
    return this._count_2$1(key_OR_range);
  if (t2)
    return this._count_3$1(key_OR_range);
  throw $.$$throw($.CTC20);
},
 get$count: function() { return new $.BoundClosure1(this, 'count$1'); },
 _count_1$0: function() {
  return this.count();
},
 _count_2$1: function(range) {
  return this.count(range);
},
 _count_3$1: function(key) {
  return this.count(key);
}
});

$.$defineNativeClass('IDBOpenDBRequest', {"": [],
 get$on: function() {
  return $._IDBOpenDBRequestEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBRequest', {"": [],
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $._IDBRequestEventsImpl$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 error$2: function(arg0, arg1) { return this.error.call$2(arg0, arg1); },
 get$result: function() {
  return $._convertNativeToDart_IDBAny(this.get$_result());
},
 get$_result: function() {
  return this.result;
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$dom_addEventListener$3')) {
  {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$dom_addEventListener$3.call(this, type, listener, useCapture);
  }

},
 $dom_dispatchEvent$1: function(evt) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$dom_dispatchEvent$1')) {
  {
  return this.dispatchEvent(evt);
}
  } else {
    return Object.prototype.$dom_dispatchEvent$1.call(this, evt);
  }

},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$dom_removeEventListener$3')) {
  {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$dom_removeEventListener$3.call(this, type, listener, useCapture);
  }

}
});

$.$defineNativeClass('IDBTransaction', {"": [],
 get$on: function() {
  return $._IDBTransactionEventsImpl$(this);
},
 error$2: function(arg0, arg1) { return this.error.call$2(arg0, arg1); },
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBVersionChangeEvent', {"": []
});

$.$defineNativeClass('IDBVersionChangeEvent', {"": []
});

$.$defineNativeClass('IDBVersionChangeRequest', {"": [],
 get$on: function() {
  return $._IDBVersionChangeRequestEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLIFrameElement', {"": ["name?"],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('IceCandidate', {"": []
});

$.$defineNativeClass('ImageData', {"": [],
 is$_ImageDataImpl: function() { return true; },
 is$ImageData: function() { return true; }
});

$.$defineNativeClass('HTMLImageElement', {"": ["name?"],
 complete$1: function(arg0) { return this.complete.call$1(arg0); },
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLInputElement', {"": ["name?", "pattern?", "type!", "value="],
 get$on: function() {
  return $._InputElementEventsImpl$(this);
},
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('Int16Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Int32Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Int8Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('JavaScriptAudioNode', {"": [],
 get$on: function() {
  return $._JavaScriptAudioNodeEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('JavaScriptCallFrame', {"": []
});

$.$defineNativeClass('KeyboardEvent', {"": []
});

$.$defineNativeClass('HTMLKeygenElement', {"": ["name?"],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLLIElement', {"": ["type!", "value="],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLLabelElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLLegendElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLLinkElement', {"": ["type!"],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('History', {"": ["length?"]
});

$.$defineNativeClass('Location', {"": [],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('LocalMediaStream', {"": [],
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('DOMWindow', {"": ["name?", "navigator?"],
 lookupPort$1: function(name$) {
  var port = $.JSON_parse($.index(this.localStorage, 'dart-port:' + name$));
  return $._JsDeserializer$().deserialize$1(port);
},
 registerPort$2: function(name$, port) {
  var serialized = $._JsSerializer$().traverse$1(port);
  $.indexSet(this.localStorage, 'dart-port:' + name$, $.JSON_stringify(serialized));
},
 get$on: function() {
  return $._LocalWindowEventsImpl$(this);
},
 get$parent: function() {
  return $._convertNativeToDart_Window(this.get$_parent());
},
 get$_parent: function() {
  return this.parent;
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 _postMessage_1$2: function(message, targetOrigin) {
  return this.postMessage(message,targetOrigin);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS(handler, 0),timeout);
},
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
}
});

$.$defineNativeClass('HTMLMapElement', {"": ["name?"],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLMarqueeElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('MediaController', {"": [],
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaElementAudioSourceNode', {"": []
});

$.$defineNativeClass('HTMLMediaElement', {"": [],
 get$on: function() {
  return $._MediaElementEventsImpl$(this);
},
 error$2: function(arg0, arg1) { return this.error.call$2(arg0, arg1); },
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('MediaError', {"": []
});

$.$defineNativeClass('MediaKeyError', {"": []
});

$.$defineNativeClass('MediaKeyEvent', {"": ["message?"]
});

$.$defineNativeClass('MediaList', {"": ["length?"]
});

$.$defineNativeClass('MediaQueryList', {"": [],
 matches$2: function(arg0, arg1) { return this.matches.call$2(arg0, arg1); }
});

$.$defineNativeClass('MediaSource', {"": [],
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStreamAudioSourceNode', {"": []
});

$.$defineNativeClass('MediaStreamEvent', {"": []
});

$.$defineNativeClass('MediaStream', {"": [],
 get$on: function() {
  return $._MediaStreamEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$dom_addEventListener$3')) {
  {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$dom_addEventListener$3.call(this, type, listener, useCapture);
  }

},
 $dom_dispatchEvent$1: function(event) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$dom_dispatchEvent$1')) {
  {
  return this.dispatchEvent(event);
}
  } else {
    return Object.prototype.$dom_dispatchEvent$1.call(this, event);
  }

},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$dom_removeEventListener$3')) {
  {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$dom_removeEventListener$3.call(this, type, listener, useCapture);
  }

}
});

$.$defineNativeClass('MediaStreamList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('MediaStreamTrackEvent', {"": []
});

$.$defineNativeClass('MediaStreamTrack', {"": [],
 get$on: function() {
  return $._MediaStreamTrackEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStreamTrackList', {"": ["length?"],
 get$on: function() {
  return $._MediaStreamTrackListEventsImpl$(this);
},
 add$1: function(track) {
  return this.add(track);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 remove$1: function(track) {
  return this.remove(track);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MemoryInfo', {"": []
});

$.$defineNativeClass('HTMLMenuElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('MessageChannel', {"": []
});

$.$defineNativeClass('MessageEvent', {"": ["ports?"]
});

$.$defineNativeClass('MessagePort', {"": [],
 get$on: function() {
  return $._MessagePortEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 postMessage$2: function(message, messagePorts) {
  var t1 = $ === messagePorts;
  if (t1)
    messagePorts = null;
  if (!t1) {
    this._postMessage_1$2($._convertDartToNative_SerializedScriptValue(message), messagePorts);
    return;
  }
  this._postMessage_2$1($._convertDartToNative_SerializedScriptValue(message));
  return;
},
 postMessage$1: function(message) {
  return this.postMessage$2(message,$)
},
 _postMessage_1$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 _postMessage_2$1: function(message) {
  return this.postMessage(message);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLMetaElement', {"": ["name?"],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('Metadata', {"": []
});

$.$defineNativeClass('HTMLMeterElement', {"": ["value="],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLModElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('MouseEvent', {"": []
});

$.$defineNativeClass('MutationEvent', {"": []
});

$.$defineNativeClass('MutationObserver', {"": []
});

$.$defineNativeClass('MutationRecord', {"": []
});

$.$defineNativeClass('NamedNodeMap', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('Navigator', {"": ["userAgent?"]
});

$.$defineNativeClass('NavigatorUserMediaError', {"": []
});

$.$defineNativeClass('NodeFilter', {"": []
});

$.$defineNativeClass('Node', {"": [],
 get$nodes: function() {
  return $._ChildNodeListLazy$(this);
},
 remove$0: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('remove$0')) {
  {
  if (!(this.get$parent() == null))
    this.get$parent().$dom_removeChild$1(this);
}
  } else {
    return Object.prototype.remove$0.call(this);
  }

},
 replaceWith$1: function(otherNode) {
  try {
    var parent$ = this.get$parent();
    parent$.$dom_replaceChild$2(otherNode, this);
  } catch (exception) {
    $.unwrapException(exception);
  }

  return this;
},
 get$$$dom_attributes: function() {
  return this.attributes;
},
 get$$$dom_childNodes: function() {
  return this.childNodes;
},
 get$document: function() {
  return this.ownerDocument;
},
 get$parent: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$parent')) {
  {
  return this.parentNode;
}
  } else {
    return Object.prototype.get$parent.call(this);
  }

},
 set$text: function(value) {
  this.textContent = value;
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_appendChild$1: function(newChild) {
  return this.appendChild(newChild);
},
 contains$1: function(other) {
  return this.contains(other);
},
 $dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 $dom_removeChild$1: function(oldChild) {
  return this.removeChild(oldChild);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_replaceChild$2: function(newChild, oldChild) {
  return this.replaceChild(newChild,oldChild);
},
 is$Node: function() { return true; }
});

$.$defineNativeClass('NodeIterator', {"": [],
 filter$1: function(arg0) { return this.filter.call$1(arg0); }
});

$.$defineNativeClass('NodeList', {"": ["_parent?", "length?"],
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  this._parent.$dom_appendChild$1(value);
},
 addLast$1: function(value) {
  this._parent.$dom_appendChild$1(value);
},
 addAll$1: function(collection) {
  for (var t1 = $.iterator(collection), t2 = this._parent; t1.get$hasNext() === true;)
    t2.$dom_appendChild$1(t1.next$0());
},
 removeLast$0: function() {
  var result = this.last$0();
  if (!(result == null))
    this._parent.$dom_removeChild$1(result);
  return result;
},
 clear$0: function() {
  this._parent.set$text('');
},
 operator$indexSet$2: function(index, value) {
  this._parent.$dom_replaceChild$2(value, this.operator$index$1(index));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._NodeListWrapper$($._Collections_filter(this, [], f));
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._NodeListWrapper$($._Lists_getRange(this, start, rangeLength, []));
},
 operator$index$1: function(index) {
  return this[index];
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('Notation', {"": [],
 is$Node: function() { return true; }
});

$.$defineNativeClass('NotificationCenter', {"": []
});

$.$defineNativeClass('Notification', {"": [],
 get$on: function() {
  return $._NotificationEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('OESStandardDerivatives', {"": []
});

$.$defineNativeClass('OESTextureFloat', {"": []
});

$.$defineNativeClass('OESVertexArrayObject', {"": []
});

$.$defineNativeClass('HTMLOListElement', {"": ["type!"],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLObjectElement', {"": ["name?", "type!"],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('OfflineAudioCompletionEvent', {"": []
});

$.$defineNativeClass('HTMLOptGroupElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLOptionElement', {"": ["value="],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('Oscillator', {"": ["type!"]
});

$.$defineNativeClass('HTMLOutputElement', {"": ["name?", "value="],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('OverflowEvent', {"": []
});

$.$defineNativeClass('PagePopupController', {"": []
});

$.$defineNativeClass('PageTransitionEvent', {"": []
});

$.$defineNativeClass('HTMLParagraphElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLParamElement', {"": ["name?", "type!", "value="],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('PeerConnection00', {"": [],
 get$on: function() {
  return $._PeerConnection00EventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('Performance', {"": []
});

$.$defineNativeClass('PerformanceNavigation', {"": []
});

$.$defineNativeClass('PerformanceTiming', {"": []
});

$.$defineNativeClass('WebKitPoint', {"": []
});

$.$defineNativeClass('PopStateEvent', {"": []
});

$.$defineNativeClass('PositionError', {"": ["message?"]
});

$.$defineNativeClass('HTMLPreElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('ProcessingInstruction', {"": [],
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLProgressElement', {"": ["value="],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('ProgressEvent', {"": ["total?"]
});

$.$defineNativeClass('HTMLQuoteElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('RGBColor', {"": []
});

$.$defineNativeClass('RTCDataChannelEvent', {"": []
});

$.$defineNativeClass('RTCDataChannel', {"": [],
 get$on: function() {
  return $._RTCDataChannelEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('RTCIceCandidateEvent', {"": []
});

$.$defineNativeClass('RTCIceCandidate', {"": []
});

$.$defineNativeClass('RTCPeerConnection', {"": [],
 get$on: function() {
  return $._RTCPeerConnectionEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('RTCSessionDescription', {"": ["type!"]
});

$.$defineNativeClass('RTCStatsElement', {"": []
});

$.$defineNativeClass('RTCStatsReport', {"": []
});

$.$defineNativeClass('RTCStatsResponse', {"": [],
 result$0: function() {
  return this.result();
},
 get$result: function() { return new $.BoundClosure2(this, 'result$0'); }
});

$.$defineNativeClass('RadioNodeList', {"": ["value="],
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('RangeException', {"": ["message?", "name?"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('Range', {"": [],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('RealtimeAnalyserNode', {"": []
});

$.$defineNativeClass('Rect', {"": []
});

$.$defineNativeClass('SQLError', {"": ["message?"]
});

$.$defineNativeClass('SQLException', {"": ["message?"]
});

$.$defineNativeClass('SQLResultSet', {"": []
});

$.$defineNativeClass('SQLResultSetRowList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('SQLTransaction', {"": []
});

$.$defineNativeClass('SQLTransactionSync', {"": []
});

$.$defineNativeClass('SVGAElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGAltGlyphDefElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGAltGlyphElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGAltGlyphItemElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGAngle', {"": ["value="]
});

$.$defineNativeClass('SVGAnimateColorElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGAnimateElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGAnimateMotionElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGAnimateTransformElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedAngle', {"": []
});

$.$defineNativeClass('SVGAnimatedBoolean', {"": []
});

$.$defineNativeClass('SVGAnimatedEnumeration', {"": []
});

$.$defineNativeClass('SVGAnimatedInteger', {"": []
});

$.$defineNativeClass('SVGAnimatedLength', {"": []
});

$.$defineNativeClass('SVGAnimatedLengthList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedNumber', {"": []
});

$.$defineNativeClass('SVGAnimatedNumberList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedPreserveAspectRatio', {"": []
});

$.$defineNativeClass('SVGAnimatedRect', {"": []
});

$.$defineNativeClass('SVGAnimatedString', {"": []
});

$.$defineNativeClass('SVGAnimatedTransformList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('SVGAnimationElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGCircleElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGClipPathElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGColor', {"": []
});

$.$defineNativeClass('SVGComponentTransferFunctionElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGCursorElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGDefsElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGDescElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGDocument', {"": [],
 $dom_createEvent$1: function(eventType) {
  return this.createEvent(eventType);
},
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGElement', {"": [],
 get$elements: function() {
  return $._FilteredElementList$(this);
},
 set$elements: function(value) {
  var elements = this.get$elements();
  $.clear(elements);
  $.addAll(elements, value);
},
 set$innerHTML: function(svg) {
  var container = $.Element_Element$tag('div');
  container.set$innerHTML('<svg version="1.1">' + $.S(svg) + '</svg>');
  this.set$elements($.index(container.get$elements(), 0).get$elements());
},
 get$id: function() {
  return this.id;
},
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGElementInstance', {"": [],
 get$on: function() {
  return $._SVGElementInstanceEventsImpl$(this);
}
});

$.$defineNativeClass('SVGElementInstanceList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('SVGEllipseElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGException', {"": ["message?", "name?"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('SVGFEBlendElement', {"": ["result?"],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFEColorMatrixElement', {"": ["result?"],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFEComponentTransferElement', {"": ["result?"],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFECompositeElement', {"": ["result?"],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFEConvolveMatrixElement', {"": ["result?"],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFEDiffuseLightingElement', {"": ["result?"],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFEDisplacementMapElement', {"": ["result?"],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFEDistantLightElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFEDropShadowElement', {"": ["result?"],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFEFloodElement', {"": ["result?"],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFEFuncAElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFEFuncBElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFEFuncGElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFEFuncRElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFEGaussianBlurElement', {"": ["result?"],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFEImageElement', {"": ["result?"],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFEMergeElement', {"": ["result?"],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFEMergeNodeElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFEMorphologyElement', {"": ["result?"],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFEOffsetElement', {"": ["result?"],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFEPointLightElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFESpecularLightingElement', {"": ["result?"],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFESpotLightElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFETileElement', {"": ["result?"],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFETurbulenceElement', {"": ["result?"],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFilterElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFontElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFontFaceElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFontFaceFormatElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFontFaceNameElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFontFaceSrcElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFontFaceUriElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGForeignObjectElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGGElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGGlyphElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGGlyphRefElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGGradientElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGHKernElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGImageElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGLength', {"": ["value="]
});

$.$defineNativeClass('SVGLengthList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('SVGLineElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGLinearGradientElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGMPathElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGMarkerElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGMaskElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGMatrix', {"": []
});

$.$defineNativeClass('SVGMetadataElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGMissingGlyphElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGNumber', {"": ["value="]
});

$.$defineNativeClass('SVGNumberList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('SVGPaint', {"": []
});

$.$defineNativeClass('SVGPathElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGPathSegArcAbs', {"": []
});

$.$defineNativeClass('SVGPathSegArcRel', {"": []
});

$.$defineNativeClass('SVGPathSegClosePath', {"": []
});

$.$defineNativeClass('SVGPathSegCurvetoCubicAbs', {"": []
});

$.$defineNativeClass('SVGPathSegCurvetoCubicRel', {"": []
});

$.$defineNativeClass('SVGPathSegCurvetoCubicSmoothAbs', {"": []
});

$.$defineNativeClass('SVGPathSegCurvetoCubicSmoothRel', {"": []
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticAbs', {"": []
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticRel', {"": []
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticSmoothAbs', {"": []
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticSmoothRel', {"": []
});

$.$defineNativeClass('SVGPathSeg', {"": []
});

$.$defineNativeClass('SVGPathSegLinetoAbs', {"": []
});

$.$defineNativeClass('SVGPathSegLinetoHorizontalAbs', {"": []
});

$.$defineNativeClass('SVGPathSegLinetoHorizontalRel', {"": []
});

$.$defineNativeClass('SVGPathSegLinetoRel', {"": []
});

$.$defineNativeClass('SVGPathSegLinetoVerticalAbs', {"": []
});

$.$defineNativeClass('SVGPathSegLinetoVerticalRel', {"": []
});

$.$defineNativeClass('SVGPathSegList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('SVGPathSegMovetoAbs', {"": []
});

$.$defineNativeClass('SVGPathSegMovetoRel', {"": []
});

$.$defineNativeClass('SVGPatternElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGPoint', {"": []
});

$.$defineNativeClass('SVGPointList', {"": [],
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('SVGPolygonElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGPolylineElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGPreserveAspectRatio', {"": []
});

$.$defineNativeClass('SVGRadialGradientElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGRectElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGRect', {"": []
});

$.$defineNativeClass('SVGRenderingIntent', {"": []
});

$.$defineNativeClass('SVGSVGElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGScriptElement', {"": ["type!"],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGSetElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGStopElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGStringList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('SVGStyleElement', {"": ["type!"],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGSwitchElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGSymbolElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGTRefElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGTSpanElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGTextContentElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGTextElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGTextPathElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGTextPositioningElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGTitleElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGTransform', {"": []
});

$.$defineNativeClass('SVGTransformList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('SVGUnitTypes', {"": []
});

$.$defineNativeClass('SVGUseElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGVKernElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGViewElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGViewSpec', {"": []
});

$.$defineNativeClass('SVGZoomEvent', {"": []
});

$.$defineNativeClass('Screen', {"": []
});

$.$defineNativeClass('HTMLScriptElement', {"": ["type!"],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('ScriptProfile', {"": []
});

$.$defineNativeClass('ScriptProfileNode', {"": []
});

$.$defineNativeClass('HTMLSelectElement', {"": ["length=", "name?", "value="],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SessionDescription', {"": []
});

$.$defineNativeClass('HTMLShadowElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('ShadowRoot', {"": ["innerHTML!"],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SharedWorkerContext', {"": ["name?"],
 get$on: function() {
  return $._SharedWorkerContextEventsImpl$(this);
}
});

$.$defineNativeClass('SharedWorker', {"": []
});

$.$defineNativeClass('SourceBuffer', {"": []
});

$.$defineNativeClass('SourceBufferList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('HTMLSourceElement', {"": ["type!"],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLSpanElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SpeechGrammar', {"": []
});

$.$defineNativeClass('SpeechGrammarList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('SpeechInputEvent', {"": []
});

$.$defineNativeClass('SpeechInputResult', {"": []
});

$.$defineNativeClass('SpeechInputResultList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('SpeechRecognitionAlternative', {"": []
});

$.$defineNativeClass('SpeechRecognitionError', {"": ["message?"]
});

$.$defineNativeClass('SpeechRecognitionEvent', {"": ["result?"]
});

$.$defineNativeClass('SpeechRecognition', {"": [],
 get$on: function() {
  return $._SpeechRecognitionEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('SpeechRecognitionResult', {"": ["length?"]
});

$.$defineNativeClass('SpeechRecognitionResultList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('StorageEvent', {"": ["key?"]
});

$.$defineNativeClass('Storage', {"": [],
 containsKey$1: function(key) {
  return !(this.$dom_getItem$1(key) == null);
},
 operator$index$1: function(key) {
  return this.$dom_getItem$1(key);
},
 operator$indexSet$2: function(key, value) {
  return this.$dom_setItem$2(key, value);
},
 remove$1: function(key) {
  var value = this.operator$index$1(key);
  this.$dom_removeItem$1(key);
  return value;
},
 clear$0: function() {
  return this.$dom_clear$0();
},
 forEach$1: function(f) {
  for (var i = 0; true; ++i) {
    var key = this.$dom_key$1(i);
    if (key == null)
      return;
    f.call$2(key, this.operator$index$1(key));
  }
},
 getKeys$0: function() {
  var keys = [];
  this.forEach$1(new $._StorageImpl_getKeys_anon(keys));
  return keys;
},
 getValues$0: function() {
  var values = [];
  this.forEach$1(new $._StorageImpl_getValues_anon(values));
  return values;
},
 get$length: function() {
  return this.get$$$dom_length();
},
 get$isEmpty: function() {
  return this.$dom_key$1(0) == null;
},
 get$$$dom_length: function() {
  return this.length;
},
 $dom_clear$0: function() {
  return this.clear();
},
 $dom_getItem$1: function(key) {
  return this.getItem(key);
},
 $dom_key$1: function(index) {
  return this.key(index);
},
 $dom_removeItem$1: function(key) {
  return this.removeItem(key);
},
 $dom_setItem$2: function(key, data) {
  return this.setItem(key,data);
},
 is$Map: function() { return true; }
});

$.$defineNativeClass('StorageInfo', {"": []
});

$.$defineNativeClass('HTMLStyleElement', {"": ["type!"],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('StyleMedia', {"": []
});

$.$defineNativeClass('StyleSheet', {"": []
});

$.$defineNativeClass('StyleSheetList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('HTMLTableCaptionElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLTableCellElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLTableColElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLTableElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLTableRowElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLTableSectionElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLTextAreaElement', {"": ["name?", "value="],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('TextEvent', {"": []
});

$.$defineNativeClass('Text', {"": [],
 is$Node: function() { return true; }
});

$.$defineNativeClass('TextMetrics', {"": []
});

$.$defineNativeClass('TextTrackCue', {"": ["id?", "text!"],
 get$on: function() {
  return $._TextTrackCueEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('TextTrackCueList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('TextTrack', {"": [],
 get$on: function() {
  return $._TextTrackEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('TextTrackList', {"": ["length?"],
 get$on: function() {
  return $._TextTrackListEventsImpl$(this);
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('TimeRanges', {"": ["length?"]
});

$.$defineNativeClass('HTMLTitleElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('TouchEvent', {"": []
});

$.$defineNativeClass('Touch', {"": []
});

$.$defineNativeClass('TouchList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('HTMLTrackElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('TrackEvent', {"": []
});

$.$defineNativeClass('WebKitTransitionEvent', {"": []
});

$.$defineNativeClass('TreeWalker', {"": [],
 filter$1: function(arg0) { return this.filter.call$1(arg0); }
});

$.$defineNativeClass('UIEvent', {"": ["detail?"]
});

$.$defineNativeClass('HTMLUListElement', {"": ["type!"],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('Uint16Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Uint32Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Uint8Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Uint8ClampedArray', {"": [],
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('HTMLUnknownElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('ValidityState', {"": []
});

$.$defineNativeClass('HTMLVideoElement', {"": [],
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('WaveShaperNode', {"": []
});

$.$defineNativeClass('WaveTable', {"": []
});

$.$defineNativeClass('WebGLActiveInfo', {"": ["name?"]
});

$.$defineNativeClass('WebGLBuffer', {"": []
});

$.$defineNativeClass('WebGLCompressedTextureS3TC', {"": []
});

$.$defineNativeClass('WebGLContextAttributes', {"": []
});

$.$defineNativeClass('WebGLContextEvent', {"": []
});

$.$defineNativeClass('WebGLDebugRendererInfo', {"": []
});

$.$defineNativeClass('WebGLDebugShaders', {"": []
});

$.$defineNativeClass('WebGLDepthTexture', {"": []
});

$.$defineNativeClass('WebGLFramebuffer', {"": []
});

$.$defineNativeClass('WebGLLoseContext', {"": []
});

$.$defineNativeClass('WebGLProgram', {"": []
});

$.$defineNativeClass('WebGLRenderbuffer', {"": []
});

$.$defineNativeClass('WebGLRenderingContext', {"": []
});

$.$defineNativeClass('WebGLShader', {"": []
});

$.$defineNativeClass('WebGLShaderPrecisionFormat', {"": []
});

$.$defineNativeClass('WebGLTexture', {"": []
});

$.$defineNativeClass('WebGLUniformLocation', {"": []
});

$.$defineNativeClass('WebGLVertexArrayObjectOES', {"": []
});

$.$defineNativeClass('WebKitAnimationList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('WebKitCSSFilterValue', {"": [],
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('WebKitNamedFlow', {"": ["name?"],
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('WebSocket', {"": [],
 get$on: function() {
  return $._WebSocketEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$2: function(code, reason) {
  return this.close(code,reason);
},
 close$0: function() {
  return this.close();
},
 $dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('WheelEvent', {"": []
});

$.$defineNativeClass('WorkerContext', {"": ["navigator?"],
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $._WorkerContextEventsImpl$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS(handler, 0),timeout);
},
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
}
});

$.$defineNativeClass('Worker', {"": [],
 get$on: function() {
  return $._WorkerEventsImpl$(this);
},
 postMessage$2: function(message, messagePorts) {
  var t1 = $ === messagePorts;
  if (t1)
    messagePorts = null;
  if (!t1) {
    this._postMessage_1$2($._convertDartToNative_SerializedScriptValue(message), messagePorts);
    return;
  }
  this._postMessage_2$1($._convertDartToNative_SerializedScriptValue(message));
  return;
},
 postMessage$1: function(message) {
  return this.postMessage$2(message,$)
},
 _postMessage_1$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 _postMessage_2$1: function(message) {
  return this.postMessage(message);
}
});

$.$defineNativeClass('WorkerLocation', {"": [],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('WorkerNavigator', {"": ["userAgent?"]
});

$.$defineNativeClass('XMLSerializer', {"": []
});

$.$defineNativeClass('XPathEvaluator', {"": []
});

$.$defineNativeClass('XPathException', {"": ["message?", "name?"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('XPathExpression', {"": []
});

$.$defineNativeClass('XPathNSResolver', {"": []
});

$.$defineNativeClass('XPathResult', {"": []
});

$.$defineNativeClass('XSLTProcessor', {"": [],
 reset$0: function() {
  return this.reset();
}
});

$.$defineNativeClass('Worker', {"": [],
 get$id: function() {
  return this.id;
},
 postMessage$1: function(msg) {
  return this.postMessage(msg);
}
});

$.$defineNativeClass('DOMWindow', {"": [],
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS(handler, 0),timeout);
}
});

// 526 dynamic classes.
// 526 classes
// 41 !leaf
(function(){
  var v0/*class(_SVGTextPositioningElementImpl)*/ = 'SVGTextPositioningElement|SVGTextElement|SVGTSpanElement|SVGTRefElement|SVGAltGlyphElement|SVGTextElement|SVGTSpanElement|SVGTRefElement|SVGAltGlyphElement';
  var v1/*class(_Uint8ArrayImpl)*/ = 'Uint8Array|Uint8ClampedArray|Uint8ClampedArray';
  var v2/*class(_MouseEventImpl)*/ = 'MouseEvent|WheelEvent|WheelEvent';
  var v3/*class(_AudioSourceNodeImpl)*/ = 'AudioSourceNode|Oscillator|MediaStreamAudioSourceNode|MediaElementAudioSourceNode|AudioBufferSourceNode|Oscillator|MediaStreamAudioSourceNode|MediaElementAudioSourceNode|AudioBufferSourceNode';
  var v4/*class(_SVGColorImpl)*/ = 'SVGColor|SVGPaint|SVGPaint';
  var v5/*class(_CSSValueListImpl)*/ = 'CSSValueList|WebKitCSSFilterValue|WebKitCSSTransformValue|WebKitCSSFilterValue|WebKitCSSTransformValue';
  var v6/*class(_TextImpl)*/ = 'Text|CDATASection|CDATASection';
  var v7/*class(_SVGTextContentElementImpl)*/ = [v0/*class(_SVGTextPositioningElementImpl)*/,v0/*class(_SVGTextPositioningElementImpl)*/,'SVGTextContentElement|SVGTextPathElement|SVGTextPathElement'].join('|');
  var v8/*class(_SVGGradientElementImpl)*/ = 'SVGGradientElement|SVGRadialGradientElement|SVGLinearGradientElement|SVGRadialGradientElement|SVGLinearGradientElement';
  var v9/*class(_SVGComponentTransferFunctionElementImpl)*/ = 'SVGComponentTransferFunctionElement|SVGFEFuncRElement|SVGFEFuncGElement|SVGFEFuncBElement|SVGFEFuncAElement|SVGFEFuncRElement|SVGFEFuncGElement|SVGFEFuncBElement|SVGFEFuncAElement';
  var v10/*class(_SVGAnimationElementImpl)*/ = 'SVGAnimationElement|SVGSetElement|SVGAnimateTransformElement|SVGAnimateMotionElement|SVGAnimateElement|SVGAnimateColorElement|SVGSetElement|SVGAnimateTransformElement|SVGAnimateMotionElement|SVGAnimateElement|SVGAnimateColorElement';
  var v11/*class(_SVGElementImpl)*/ = [v7/*class(_SVGTextContentElementImpl)*/,v8/*class(_SVGGradientElementImpl)*/,v9/*class(_SVGComponentTransferFunctionElementImpl)*/,v10/*class(_SVGAnimationElementImpl)*/,v7/*class(_SVGTextContentElementImpl)*/,v8/*class(_SVGGradientElementImpl)*/,v9/*class(_SVGComponentTransferFunctionElementImpl)*/,v10/*class(_SVGAnimationElementImpl)*/,'SVGElement|SVGViewElement|SVGVKernElement|SVGUseElement|SVGTitleElement|SVGSymbolElement|SVGSwitchElement|SVGStyleElement|SVGStopElement|SVGScriptElement|SVGSVGElement|SVGRectElement|SVGPolylineElement|SVGPolygonElement|SVGPatternElement|SVGPathElement|SVGMissingGlyphElement|SVGMetadataElement|SVGMaskElement|SVGMarkerElement|SVGMPathElement|SVGLineElement|SVGImageElement|SVGHKernElement|SVGGlyphRefElement|SVGGlyphElement|SVGGElement|SVGForeignObjectElement|SVGFontFaceUriElement|SVGFontFaceSrcElement|SVGFontFaceNameElement|SVGFontFaceFormatElement|SVGFontFaceElement|SVGFontElement|SVGFilterElement|SVGFETurbulenceElement|SVGFETileElement|SVGFESpotLightElement|SVGFESpecularLightingElement|SVGFEPointLightElement|SVGFEOffsetElement|SVGFEMorphologyElement|SVGFEMergeNodeElement|SVGFEMergeElement|SVGFEImageElement|SVGFEGaussianBlurElement|SVGFEFloodElement|SVGFEDropShadowElement|SVGFEDistantLightElement|SVGFEDisplacementMapElement|SVGFEDiffuseLightingElement|SVGFEConvolveMatrixElement|SVGFECompositeElement|SVGFEComponentTransferElement|SVGFEColorMatrixElement|SVGFEBlendElement|SVGEllipseElement|SVGDescElement|SVGDefsElement|SVGCursorElement|SVGClipPathElement|SVGCircleElement|SVGAltGlyphItemElement|SVGAltGlyphDefElement|SVGAElement|SVGViewElement|SVGVKernElement|SVGUseElement|SVGTitleElement|SVGSymbolElement|SVGSwitchElement|SVGStyleElement|SVGStopElement|SVGScriptElement|SVGSVGElement|SVGRectElement|SVGPolylineElement|SVGPolygonElement|SVGPatternElement|SVGPathElement|SVGMissingGlyphElement|SVGMetadataElement|SVGMaskElement|SVGMarkerElement|SVGMPathElement|SVGLineElement|SVGImageElement|SVGHKernElement|SVGGlyphRefElement|SVGGlyphElement|SVGGElement|SVGForeignObjectElement|SVGFontFaceUriElement|SVGFontFaceSrcElement|SVGFontFaceNameElement|SVGFontFaceFormatElement|SVGFontFaceElement|SVGFontElement|SVGFilterElement|SVGFETurbulenceElement|SVGFETileElement|SVGFESpotLightElement|SVGFESpecularLightingElement|SVGFEPointLightElement|SVGFEOffsetElement|SVGFEMorphologyElement|SVGFEMergeNodeElement|SVGFEMergeElement|SVGFEImageElement|SVGFEGaussianBlurElement|SVGFEFloodElement|SVGFEDropShadowElement|SVGFEDistantLightElement|SVGFEDisplacementMapElement|SVGFEDiffuseLightingElement|SVGFEConvolveMatrixElement|SVGFECompositeElement|SVGFEComponentTransferElement|SVGFEColorMatrixElement|SVGFEBlendElement|SVGEllipseElement|SVGDescElement|SVGDefsElement|SVGCursorElement|SVGClipPathElement|SVGCircleElement|SVGAltGlyphItemElement|SVGAltGlyphDefElement|SVGAElement'].join('|');
  var v12/*class(_MediaElementImpl)*/ = 'HTMLMediaElement|HTMLVideoElement|HTMLAudioElement|HTMLVideoElement|HTMLAudioElement';
  var v13/*class(_UIEventImpl)*/ = [v2/*class(_MouseEventImpl)*/,v2/*class(_MouseEventImpl)*/,'UIEvent|TouchEvent|TextEvent|SVGZoomEvent|KeyboardEvent|CompositionEvent|TouchEvent|TextEvent|SVGZoomEvent|KeyboardEvent|CompositionEvent'].join('|');
  var v14/*class(_ProgressEventImpl)*/ = 'ProgressEvent|XMLHttpRequestProgressEvent|XMLHttpRequestProgressEvent';
  var v15/*class(_ElementImpl)*/ = [v11/*class(_SVGElementImpl)*/,v12/*class(_MediaElementImpl)*/,v11/*class(_SVGElementImpl)*/,v12/*class(_MediaElementImpl)*/,'Element|HTMLUnknownElement|HTMLUListElement|HTMLTrackElement|HTMLTitleElement|HTMLTextAreaElement|HTMLTableSectionElement|HTMLTableRowElement|HTMLTableElement|HTMLTableColElement|HTMLTableCellElement|HTMLTableCaptionElement|HTMLStyleElement|HTMLSpanElement|HTMLSourceElement|HTMLShadowElement|HTMLSelectElement|HTMLScriptElement|HTMLQuoteElement|HTMLProgressElement|HTMLPreElement|HTMLParamElement|HTMLParagraphElement|HTMLOutputElement|HTMLOptionElement|HTMLOptGroupElement|HTMLObjectElement|HTMLOListElement|HTMLModElement|HTMLMeterElement|HTMLMetaElement|HTMLMenuElement|HTMLMarqueeElement|HTMLMapElement|HTMLLinkElement|HTMLLegendElement|HTMLLabelElement|HTMLLIElement|HTMLKeygenElement|HTMLInputElement|HTMLImageElement|HTMLIFrameElement|HTMLHtmlElement|HTMLHeadingElement|HTMLHeadElement|HTMLHRElement|HTMLFrameSetElement|HTMLFrameElement|HTMLFormElement|HTMLFontElement|HTMLFieldSetElement|HTMLEmbedElement|HTMLDivElement|HTMLDirectoryElement|HTMLDetailsElement|HTMLDataListElement|HTMLDListElement|HTMLContentElement|HTMLCanvasElement|HTMLButtonElement|HTMLBodyElement|HTMLBaseFontElement|HTMLBaseElement|HTMLBRElement|HTMLAreaElement|HTMLAppletElement|HTMLAnchorElement|HTMLElement|HTMLUnknownElement|HTMLUListElement|HTMLTrackElement|HTMLTitleElement|HTMLTextAreaElement|HTMLTableSectionElement|HTMLTableRowElement|HTMLTableElement|HTMLTableColElement|HTMLTableCellElement|HTMLTableCaptionElement|HTMLStyleElement|HTMLSpanElement|HTMLSourceElement|HTMLShadowElement|HTMLSelectElement|HTMLScriptElement|HTMLQuoteElement|HTMLProgressElement|HTMLPreElement|HTMLParamElement|HTMLParagraphElement|HTMLOutputElement|HTMLOptionElement|HTMLOptGroupElement|HTMLObjectElement|HTMLOListElement|HTMLModElement|HTMLMeterElement|HTMLMetaElement|HTMLMenuElement|HTMLMarqueeElement|HTMLMapElement|HTMLLinkElement|HTMLLegendElement|HTMLLabelElement|HTMLLIElement|HTMLKeygenElement|HTMLInputElement|HTMLImageElement|HTMLIFrameElement|HTMLHtmlElement|HTMLHeadingElement|HTMLHeadElement|HTMLHRElement|HTMLFrameSetElement|HTMLFrameElement|HTMLFormElement|HTMLFontElement|HTMLFieldSetElement|HTMLEmbedElement|HTMLDivElement|HTMLDirectoryElement|HTMLDetailsElement|HTMLDataListElement|HTMLDListElement|HTMLContentElement|HTMLCanvasElement|HTMLButtonElement|HTMLBodyElement|HTMLBaseFontElement|HTMLBaseElement|HTMLBRElement|HTMLAreaElement|HTMLAppletElement|HTMLAnchorElement|HTMLElement'].join('|');
  var v16/*class(_DocumentImpl)*/ = 'HTMLDocument|SVGDocument|SVGDocument';
  var v17/*class(_DocumentFragmentImpl)*/ = 'DocumentFragment|ShadowRoot|ShadowRoot';
  var v18/*class(_CharacterDataImpl)*/ = [v6/*class(_TextImpl)*/,v6/*class(_TextImpl)*/,'CharacterData|Comment|Comment'].join('|');
  var v19/*class(_WorkerContextImpl)*/ = 'WorkerContext|SharedWorkerContext|DedicatedWorkerContext|SharedWorkerContext|DedicatedWorkerContext';
  var v20/*class(_NodeImpl)*/ = [v15/*class(_ElementImpl)*/,v16/*class(_DocumentImpl)*/,v17/*class(_DocumentFragmentImpl)*/,v18/*class(_CharacterDataImpl)*/,v15/*class(_ElementImpl)*/,v16/*class(_DocumentImpl)*/,v17/*class(_DocumentFragmentImpl)*/,v18/*class(_CharacterDataImpl)*/,'Node|ProcessingInstruction|Notation|EntityReference|DocumentType|Attr|ProcessingInstruction|Notation|EntityReference|DocumentType|Attr'].join('|');
  var v21/*class(_MediaStreamImpl)*/ = 'MediaStream|LocalMediaStream|LocalMediaStream';
  var v22/*class(_IDBRequestImpl)*/ = 'IDBRequest|IDBVersionChangeRequest|IDBOpenDBRequest|IDBVersionChangeRequest|IDBOpenDBRequest';
  var v23/*class(_AbstractWorkerImpl)*/ = 'AbstractWorker|Worker|SharedWorker|Worker|SharedWorker';
  var table = [
    // [dynamic-dispatch-tag, tags of classes implementing dynamic-dispatch-tag]
    ['SVGTextPositioningElement', v0/*class(_SVGTextPositioningElementImpl)*/],
    ['SVGTextContentElement', v7/*class(_SVGTextContentElementImpl)*/],
    ['StyleSheet', 'StyleSheet|CSSStyleSheet|CSSStyleSheet'],
    ['Text', v6/*class(_TextImpl)*/],
    ['AbstractWorker', v23/*class(_AbstractWorkerImpl)*/],
    ['Uint8Array', v1/*class(_Uint8ArrayImpl)*/],
    ['ArrayBufferView', [v1/*class(_Uint8ArrayImpl)*/,v1/*class(_Uint8ArrayImpl)*/,'ArrayBufferView|Uint32Array|Uint16Array|Int8Array|Int32Array|Int16Array|Float64Array|Float32Array|DataView|Uint32Array|Uint16Array|Int8Array|Int32Array|Int16Array|Float64Array|Float32Array|DataView'].join('|')],
    ['MouseEvent', v2/*class(_MouseEventImpl)*/],
    ['UIEvent', v13/*class(_UIEventImpl)*/],
    ['AudioSourceNode', v3/*class(_AudioSourceNodeImpl)*/],
    ['AudioNode', [v3/*class(_AudioSourceNodeImpl)*/,v3/*class(_AudioSourceNodeImpl)*/,'AudioNode|WaveShaperNode|RealtimeAnalyserNode|JavaScriptAudioNode|DynamicsCompressorNode|DelayNode|ConvolverNode|BiquadFilterNode|AudioPannerNode|AudioGainNode|AudioDestinationNode|AudioChannelSplitter|AudioChannelMerger|WaveShaperNode|RealtimeAnalyserNode|JavaScriptAudioNode|DynamicsCompressorNode|DelayNode|ConvolverNode|BiquadFilterNode|AudioPannerNode|AudioGainNode|AudioDestinationNode|AudioChannelSplitter|AudioChannelMerger'].join('|')],
    ['AudioParam', 'AudioParam|AudioGain|AudioGain'],
    ['Blob', 'Blob|File|File'],
    ['CSSRule', 'CSSRule|CSSUnknownRule|CSSStyleRule|CSSPageRule|CSSMediaRule|WebKitCSSKeyframesRule|WebKitCSSKeyframeRule|CSSImportRule|CSSFontFaceRule|CSSCharsetRule|CSSUnknownRule|CSSStyleRule|CSSPageRule|CSSMediaRule|WebKitCSSKeyframesRule|WebKitCSSKeyframeRule|CSSImportRule|CSSFontFaceRule|CSSCharsetRule'],
    ['WorkerContext', v19/*class(_WorkerContextImpl)*/],
    ['SVGColor', v4/*class(_SVGColorImpl)*/],
    ['CSSValueList', v5/*class(_CSSValueListImpl)*/],
    ['CSSValue', [v4/*class(_SVGColorImpl)*/,v5/*class(_CSSValueListImpl)*/,v4/*class(_SVGColorImpl)*/,v5/*class(_CSSValueListImpl)*/,'CSSValue|CSSPrimitiveValue|CSSPrimitiveValue'].join('|')],
    ['CanvasRenderingContext', 'CanvasRenderingContext|WebGLRenderingContext|CanvasRenderingContext2D|WebGLRenderingContext|CanvasRenderingContext2D'],
    ['CharacterData', v18/*class(_CharacterDataImpl)*/],
    ['DOMTokenList', 'DOMTokenList|DOMSettableTokenList|DOMSettableTokenList'],
    ['DocumentFragment', v17/*class(_DocumentFragmentImpl)*/],
    ['HTMLDocument', v16/*class(_DocumentImpl)*/],
    ['SVGGradientElement', v8/*class(_SVGGradientElementImpl)*/],
    ['SVGComponentTransferFunctionElement', v9/*class(_SVGComponentTransferFunctionElementImpl)*/],
    ['SVGAnimationElement', v10/*class(_SVGAnimationElementImpl)*/],
    ['SVGElement', v11/*class(_SVGElementImpl)*/],
    ['HTMLMediaElement', v12/*class(_MediaElementImpl)*/],
    ['Element', v15/*class(_ElementImpl)*/],
    ['Entry', 'Entry|FileEntry|DirectoryEntry|FileEntry|DirectoryEntry'],
    ['EntrySync', 'EntrySync|FileEntrySync|DirectoryEntrySync|FileEntrySync|DirectoryEntrySync'],
    ['ProgressEvent', v14/*class(_ProgressEventImpl)*/],
    ['Event', [v13/*class(_UIEventImpl)*/,v14/*class(_ProgressEventImpl)*/,v13/*class(_UIEventImpl)*/,v14/*class(_ProgressEventImpl)*/,'Event|WebGLContextEvent|WebKitTransitionEvent|TrackEvent|StorageEvent|SpeechRecognitionEvent|SpeechRecognitionError|SpeechInputEvent|RTCIceCandidateEvent|RTCDataChannelEvent|PopStateEvent|PageTransitionEvent|OverflowEvent|OfflineAudioCompletionEvent|MutationEvent|MessageEvent|MediaStreamTrackEvent|MediaStreamEvent|MediaKeyEvent|IDBVersionChangeEvent|IDBVersionChangeEvent|HashChangeEvent|ErrorEvent|DeviceOrientationEvent|DeviceMotionEvent|CustomEvent|CloseEvent|BeforeLoadEvent|AudioProcessingEvent|WebKitAnimationEvent|WebGLContextEvent|WebKitTransitionEvent|TrackEvent|StorageEvent|SpeechRecognitionEvent|SpeechRecognitionError|SpeechInputEvent|RTCIceCandidateEvent|RTCDataChannelEvent|PopStateEvent|PageTransitionEvent|OverflowEvent|OfflineAudioCompletionEvent|MutationEvent|MessageEvent|MediaStreamTrackEvent|MediaStreamEvent|MediaKeyEvent|IDBVersionChangeEvent|IDBVersionChangeEvent|HashChangeEvent|ErrorEvent|DeviceOrientationEvent|DeviceMotionEvent|CustomEvent|CloseEvent|BeforeLoadEvent|AudioProcessingEvent|WebKitAnimationEvent'].join('|')],
    ['Node', v20/*class(_NodeImpl)*/],
    ['MediaStream', v21/*class(_MediaStreamImpl)*/],
    ['IDBRequest', v22/*class(_IDBRequestImpl)*/],
    ['EventTarget', [v19/*class(_WorkerContextImpl)*/,v20/*class(_NodeImpl)*/,v21/*class(_MediaStreamImpl)*/,v22/*class(_IDBRequestImpl)*/,v23/*class(_AbstractWorkerImpl)*/,v19/*class(_WorkerContextImpl)*/,v20/*class(_NodeImpl)*/,v21/*class(_MediaStreamImpl)*/,v22/*class(_IDBRequestImpl)*/,v23/*class(_AbstractWorkerImpl)*/,'EventTarget|WebSocket|WebKitNamedFlow|TextTrackList|TextTrack|TextTrackCue|SpeechRecognition|SourceBufferList|SVGElementInstance|RTCPeerConnection|RTCDataChannel|Performance|PeerConnection00|Notification|MessagePort|MediaStreamTrackList|MediaStreamTrack|MediaSource|MediaController|DOMWindow|IDBTransaction|IDBDatabase|XMLHttpRequestUpload|XMLHttpRequest|FileWriter|FileReader|EventSource|DOMApplicationCache|BatteryManager|AudioContext|WebSocket|WebKitNamedFlow|TextTrackList|TextTrack|TextTrackCue|SpeechRecognition|SourceBufferList|SVGElementInstance|RTCPeerConnection|RTCDataChannel|Performance|PeerConnection00|Notification|MessagePort|MediaStreamTrackList|MediaStreamTrack|MediaSource|MediaController|DOMWindow|IDBTransaction|IDBDatabase|XMLHttpRequestUpload|XMLHttpRequest|FileWriter|FileReader|EventSource|DOMApplicationCache|BatteryManager|AudioContext'].join('|')],
    ['HTMLCollection', 'HTMLCollection|HTMLOptionsCollection|HTMLOptionsCollection'],
    ['IDBCursor', 'IDBCursor|IDBCursorWithValue|IDBCursorWithValue'],
    ['NodeList', 'NodeList|RadioNodeList|RadioNodeList'],
    ['SVGPathSeg', 'SVGPathSeg|SVGPathSegMovetoRel|SVGPathSegMovetoAbs|SVGPathSegLinetoVerticalRel|SVGPathSegLinetoVerticalAbs|SVGPathSegLinetoRel|SVGPathSegLinetoHorizontalRel|SVGPathSegLinetoHorizontalAbs|SVGPathSegLinetoAbs|SVGPathSegCurvetoQuadraticSmoothRel|SVGPathSegCurvetoQuadraticSmoothAbs|SVGPathSegCurvetoQuadraticRel|SVGPathSegCurvetoQuadraticAbs|SVGPathSegCurvetoCubicSmoothRel|SVGPathSegCurvetoCubicSmoothAbs|SVGPathSegCurvetoCubicRel|SVGPathSegCurvetoCubicAbs|SVGPathSegClosePath|SVGPathSegArcRel|SVGPathSegArcAbs|SVGPathSegMovetoRel|SVGPathSegMovetoAbs|SVGPathSegLinetoVerticalRel|SVGPathSegLinetoVerticalAbs|SVGPathSegLinetoRel|SVGPathSegLinetoHorizontalRel|SVGPathSegLinetoHorizontalAbs|SVGPathSegLinetoAbs|SVGPathSegCurvetoQuadraticSmoothRel|SVGPathSegCurvetoQuadraticSmoothAbs|SVGPathSegCurvetoQuadraticRel|SVGPathSegCurvetoQuadraticAbs|SVGPathSegCurvetoCubicSmoothRel|SVGPathSegCurvetoCubicSmoothAbs|SVGPathSegCurvetoCubicRel|SVGPathSegCurvetoCubicAbs|SVGPathSegClosePath|SVGPathSegArcRel|SVGPathSegArcAbs']];
$.dynamicSetMetadata(table);
})();

var $globalThis = $;
var $globalState;
var $globals;
var $isWorker = false;
var $supportsWorkers = false;
var $thisScriptUrl;
function $static_init(){};

function $initGlobals(context) {
  context.isolateStatics = new Isolate();
}
function $setGlobals(context) {
  $ = context.isolateStatics;
  $globalThis = $;
}
$.main.call$0 = $.main

//
// BEGIN invoke [main].
//
if (typeof document != 'undefined' && document.readyState != 'complete') {
  document.addEventListener('readystatechange', function () {
    if (document.readyState == 'complete') {
      if (typeof dartMainRunner == 'function') {
        dartMainRunner(function() { $.startRootIsolate($.main); });
      } else {
        $.startRootIsolate($.main);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner == 'function') {
    dartMainRunner(function() { $.startRootIsolate($.main); });
  } else {
    $.startRootIsolate($.main);
  }
}
//
// END invoke [main].
//

function init() {
Isolate.$isolateProperties = {};
Isolate.$defineClass = function(cls, fields, prototype) {
  var generateGetterSetter =   function(field, prototype) {
    var len = field.length;
    var lastChar = field[len - 1];
    var needsGetter = lastChar == '?' || lastChar == '=';
    var needsSetter = lastChar == '!' || lastChar == '=';
    if (needsGetter || needsSetter) field = field.substring(0, len - 1);
    if (needsGetter) {
      var getterString = "return this." + field + ";";
        prototype["get$" + field] = new Function(getterString);
    }
    if (needsSetter) {
      var setterString = "this." + field + " = v;";
      prototype["set$" + field] = new Function("v", setterString);
    }
    return field;
  };
  var constructor;
  if (typeof fields == 'function') {
    constructor = fields;
  } else {
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0) str += ", ";
      var field = fields[i];
      field = generateGetterSetter(field, prototype);
      str += field;
      body += "this." + field + " = " + field + ";\n";
    }
    str += ") {" + body + "}\n";
    str += "return " + cls + ";";
    constructor = new Function(str)();
  }
  constructor.prototype = prototype;
  return constructor;
};
var supportsProto = false;
var tmp = Isolate.$defineClass('c', ['f?'], {}).prototype;
if (tmp.__proto__) {
  tmp.__proto__ = {};
  if (typeof tmp.get$f !== "undefined") supportsProto = true;
}
Isolate.$pendingClasses = {};
Isolate.$finishClasses = function(collectedClasses) {
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var cls in collectedClasses) {
    if (hasOwnProperty.call(collectedClasses, cls)) {
      var desc = collectedClasses[cls];
      Isolate.$isolateProperties[cls] = Isolate.$defineClass(cls, desc[''], desc);
      if (desc['super'] !== "") Isolate.$pendingClasses[cls] = desc['super'];
    }
  }
  var pendingClasses = Isolate.$pendingClasses;
  Isolate.$pendingClasses = {};
  var finishedClasses = {};
  function finishClass(cls) {
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (hasOwnProperty.call(finishedClasses, cls)) return;
    finishedClasses[cls] = true;
    var superclass = pendingClasses[cls];
    if (!superclass) return;
    finishClass(superclass);
    var constructor = Isolate.$isolateProperties[cls];
    var superConstructor = Isolate.$isolateProperties[superclass];
    var prototype = constructor.prototype;
    if (supportsProto) {
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
    } else {
      function tmp() {};
      tmp.prototype = superConstructor.prototype;
      var newPrototype = new tmp();
      constructor.prototype = newPrototype;
      newPrototype.constructor = constructor;
      for (var member in prototype) {
        if (member == '' || member == 'super') continue;
        if (hasOwnProperty.call(prototype, member)) {
          newPrototype[member] = prototype[member];
        }
      }
    }
  }
  for (var cls in pendingClasses) finishClass(cls);
};
Isolate.$finishIsolateConstructor = function(oldIsolate) {
  var isolateProperties = oldIsolate.$isolateProperties;
  var isolatePrototype = oldIsolate.prototype;
  var str = "{\n";
  str += "var properties = Isolate.$isolateProperties;\n";
  for (var staticName in isolateProperties) {
    if (Object.prototype.hasOwnProperty.call(isolateProperties, staticName)) {
      str += "this." + staticName + "= properties." + staticName + ";\n";
    }
  }
  str += "}\n";
  var newIsolate = new Function(str);
  newIsolate.prototype = isolatePrototype;
  isolatePrototype.constructor = newIsolate;
  newIsolate.$isolateProperties = isolateProperties;
  return newIsolate;
};
}

//@ sourceMappingURL=channel_test.dart.js.map